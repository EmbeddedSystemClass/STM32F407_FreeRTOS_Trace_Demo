
STM32F407_FreeRTOS_Trace_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009154  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ae8  080092e4  080092e4  000192e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08009dcc  08009dcc  00019dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08009dd0  08009dd0  00019dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000028  20000000  08009dd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020028  2**0
                  CONTENTS
  7 .bss          00015e64  20000028  20000028  00020028  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20015e8c  20015e8c  00020028  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 10 .debug_info   00017a0f  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003f24  00000000  00000000  00037a67  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000f88  00000000  00000000  0003b990  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000d80  00000000  00000000  0003c918  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000088e5  00000000  00000000  0003d698  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00005a88  00000000  00000000  00045f7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004ba05  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003cc4  00000000  00000000  0004ba84  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000028 	.word	0x20000028
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080092cc 	.word	0x080092cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000002c 	.word	0x2000002c
 80001cc:	080092cc 	.word	0x080092cc

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800030e:	f1a4 0401 	sub.w	r4, r4, #1
 8000312:	d1e9      	bne.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f092 0f00 	teq	r2, #0
 80004ba:	bf14      	ite	ne
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e720      	b.n	8000314 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aedc 	beq.w	80002c2 <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6c1      	b.n	80002c2 <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <vStartBlockingQueueTasks>:
static volatile short sBlockingProducerCount[ blckqNUM_TASK_SETS ] = { ( short ) 0, ( short ) 0, ( short ) 0 };

/*-----------------------------------------------------------*/

void vStartBlockingQueueTasks( unsigned portBASE_TYPE uxPriority )
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08e      	sub	sp, #56	; 0x38
 8000a78:	af02      	add	r7, sp, #8
 8000a7a:	6078      	str	r0, [r7, #4]
xBlockingQueueParameters *pxQueueParameters1, *pxQueueParameters2;
xBlockingQueueParameters *pxQueueParameters3, *pxQueueParameters4;
xBlockingQueueParameters *pxQueueParameters5, *pxQueueParameters6;
const unsigned portBASE_TYPE uxQueueSize1 = 1, uxQueueSize5 = 5;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a80:	2305      	movs	r3, #5
 8000a82:	62bb      	str	r3, [r7, #40]	; 0x28
const TickType_t xBlockTime = ( TickType_t ) 1000 / portTICK_PERIOD_MS;
 8000a84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
const TickType_t xDontBlock = ( TickType_t ) 0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	623b      	str	r3, [r7, #32]

	/* Create the first two tasks as described at the top of the file. */ 
	
	/* First create the structure used to pass parameters to the consumer tasks. */
	pxQueueParameters1 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
 8000a8e:	200c      	movs	r0, #12
 8000a90:	f003 f8ee 	bl	8003c70 <pvPortMalloc>
 8000a94:	61f8      	str	r0, [r7, #28]

	/* Create the queue used by the first two tasks to pass the incrementing number.  
	Pass a pointer to the queue in the parameter structure. */
	pxQueueParameters1->xQueue = xQueueCreate( uxQueueSize1, ( unsigned portBASE_TYPE ) sizeof( unsigned short ) );
 8000a96:	2200      	movs	r2, #0
 8000a98:	2102      	movs	r1, #2
 8000a9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000a9c:	f003 fb38 	bl	8004110 <xQueueGenericCreate>
 8000aa0:	4602      	mov	r2, r0
 8000aa2:	69fb      	ldr	r3, [r7, #28]
 8000aa4:	601a      	str	r2, [r3, #0]

	/* The consumer is created first so gets a block time as described above. */
	pxQueueParameters1->xBlockTime = xBlockTime;
 8000aa6:	69fb      	ldr	r3, [r7, #28]
 8000aa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000aaa:	605a      	str	r2, [r3, #4]

	/* Pass in the variable that this task is going to increment so we can check it 
	is still running. */
	pxQueueParameters1->psCheckVariable = &( sBlockingConsumerCount[ 0 ] );
 8000aac:	69fb      	ldr	r3, [r7, #28]
 8000aae:	4a48      	ldr	r2, [pc, #288]	; (8000bd0 <vStartBlockingQueueTasks+0x15c>)
 8000ab0:	609a      	str	r2, [r3, #8]
		
	/* Create the structure used to pass parameters to the producer task. */
	pxQueueParameters2 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
 8000ab2:	200c      	movs	r0, #12
 8000ab4:	f003 f8dc 	bl	8003c70 <pvPortMalloc>
 8000ab8:	61b8      	str	r0, [r7, #24]

	/* Pass the queue to this task also, using the parameter structure. */
	pxQueueParameters2->xQueue = pxQueueParameters1->xQueue;
 8000aba:	69fb      	ldr	r3, [r7, #28]
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	69bb      	ldr	r3, [r7, #24]
 8000ac0:	601a      	str	r2, [r3, #0]

	/* The producer is not going to block - as soon as it posts the consumer will 
	wake and remove the item so the producer should always have room to post. */
	pxQueueParameters2->xBlockTime = xDontBlock;
 8000ac2:	69bb      	ldr	r3, [r7, #24]
 8000ac4:	6a3a      	ldr	r2, [r7, #32]
 8000ac6:	605a      	str	r2, [r3, #4]

	/* Pass in the variable that this task is going to increment so we can check 
	it is still running. */
	pxQueueParameters2->psCheckVariable = &( sBlockingProducerCount[ 0 ] );
 8000ac8:	69bb      	ldr	r3, [r7, #24]
 8000aca:	4a42      	ldr	r2, [pc, #264]	; (8000bd4 <vStartBlockingQueueTasks+0x160>)
 8000acc:	609a      	str	r2, [r3, #8]


	/* Note the producer has a lower priority than the consumer when the tasks are 
	spawned. */
	xTaskCreate( vBlockingQueueConsumer, "QConsB1", blckqSTACK_SIZE, ( void * ) pxQueueParameters1, uxPriority, NULL );
 8000ace:	2300      	movs	r3, #0
 8000ad0:	9301      	str	r3, [sp, #4]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	9300      	str	r3, [sp, #0]
 8000ad6:	69fb      	ldr	r3, [r7, #28]
 8000ad8:	2282      	movs	r2, #130	; 0x82
 8000ada:	493f      	ldr	r1, [pc, #252]	; (8000bd8 <vStartBlockingQueueTasks+0x164>)
 8000adc:	483f      	ldr	r0, [pc, #252]	; (8000bdc <vStartBlockingQueueTasks+0x168>)
 8000ade:	f004 fb97 	bl	8005210 <xTaskCreate>
	xTaskCreate( vBlockingQueueProducer, "QProdB2", blckqSTACK_SIZE, ( void * ) pxQueueParameters2, tskIDLE_PRIORITY, NULL );
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	9301      	str	r3, [sp, #4]
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	9300      	str	r3, [sp, #0]
 8000aea:	69bb      	ldr	r3, [r7, #24]
 8000aec:	2282      	movs	r2, #130	; 0x82
 8000aee:	493c      	ldr	r1, [pc, #240]	; (8000be0 <vStartBlockingQueueTasks+0x16c>)
 8000af0:	483c      	ldr	r0, [pc, #240]	; (8000be4 <vStartBlockingQueueTasks+0x170>)
 8000af2:	f004 fb8d 	bl	8005210 <xTaskCreate>
	

	/* Create the second two tasks as described at the top of the file.   This uses 
	the same mechanism but reverses the task priorities. */

	pxQueueParameters3 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
 8000af6:	200c      	movs	r0, #12
 8000af8:	f003 f8ba 	bl	8003c70 <pvPortMalloc>
 8000afc:	6178      	str	r0, [r7, #20]
	pxQueueParameters3->xQueue = xQueueCreate( uxQueueSize1, ( unsigned portBASE_TYPE ) sizeof( unsigned short ) );
 8000afe:	2200      	movs	r2, #0
 8000b00:	2102      	movs	r1, #2
 8000b02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000b04:	f003 fb04 	bl	8004110 <xQueueGenericCreate>
 8000b08:	4602      	mov	r2, r0
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	601a      	str	r2, [r3, #0]
	pxQueueParameters3->xBlockTime = xDontBlock;
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	6a3a      	ldr	r2, [r7, #32]
 8000b12:	605a      	str	r2, [r3, #4]
	pxQueueParameters3->psCheckVariable = &( sBlockingProducerCount[ 1 ] );
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	4a34      	ldr	r2, [pc, #208]	; (8000be8 <vStartBlockingQueueTasks+0x174>)
 8000b18:	609a      	str	r2, [r3, #8]

	pxQueueParameters4 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
 8000b1a:	200c      	movs	r0, #12
 8000b1c:	f003 f8a8 	bl	8003c70 <pvPortMalloc>
 8000b20:	6138      	str	r0, [r7, #16]
	pxQueueParameters4->xQueue = pxQueueParameters3->xQueue;
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	693b      	ldr	r3, [r7, #16]
 8000b28:	601a      	str	r2, [r3, #0]
	pxQueueParameters4->xBlockTime = xBlockTime;
 8000b2a:	693b      	ldr	r3, [r7, #16]
 8000b2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b2e:	605a      	str	r2, [r3, #4]
	pxQueueParameters4->psCheckVariable = &( sBlockingConsumerCount[ 1 ] );
 8000b30:	693b      	ldr	r3, [r7, #16]
 8000b32:	4a2e      	ldr	r2, [pc, #184]	; (8000bec <vStartBlockingQueueTasks+0x178>)
 8000b34:	609a      	str	r2, [r3, #8]

	xTaskCreate( vBlockingQueueProducer, "QProdB3", blckqSTACK_SIZE, ( void * ) pxQueueParameters3, tskIDLE_PRIORITY, NULL );
 8000b36:	2300      	movs	r3, #0
 8000b38:	9301      	str	r3, [sp, #4]
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	9300      	str	r3, [sp, #0]
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	2282      	movs	r2, #130	; 0x82
 8000b42:	492b      	ldr	r1, [pc, #172]	; (8000bf0 <vStartBlockingQueueTasks+0x17c>)
 8000b44:	4827      	ldr	r0, [pc, #156]	; (8000be4 <vStartBlockingQueueTasks+0x170>)
 8000b46:	f004 fb63 	bl	8005210 <xTaskCreate>
	xTaskCreate( vBlockingQueueConsumer, "QConsB4", blckqSTACK_SIZE, ( void * ) pxQueueParameters4, uxPriority, NULL );
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	9301      	str	r3, [sp, #4]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	9300      	str	r3, [sp, #0]
 8000b52:	693b      	ldr	r3, [r7, #16]
 8000b54:	2282      	movs	r2, #130	; 0x82
 8000b56:	4927      	ldr	r1, [pc, #156]	; (8000bf4 <vStartBlockingQueueTasks+0x180>)
 8000b58:	4820      	ldr	r0, [pc, #128]	; (8000bdc <vStartBlockingQueueTasks+0x168>)
 8000b5a:	f004 fb59 	bl	8005210 <xTaskCreate>



	/* Create the last two tasks as described above.  The mechanism is again just 
	the same.  This time both parameter structures are given a block time. */
	pxQueueParameters5 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
 8000b5e:	200c      	movs	r0, #12
 8000b60:	f003 f886 	bl	8003c70 <pvPortMalloc>
 8000b64:	60f8      	str	r0, [r7, #12]
	pxQueueParameters5->xQueue = xQueueCreate( uxQueueSize5, ( unsigned portBASE_TYPE ) sizeof( unsigned short ) );
 8000b66:	2200      	movs	r2, #0
 8000b68:	2102      	movs	r1, #2
 8000b6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000b6c:	f003 fad0 	bl	8004110 <xQueueGenericCreate>
 8000b70:	4602      	mov	r2, r0
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	601a      	str	r2, [r3, #0]
	pxQueueParameters5->xBlockTime = xBlockTime;
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b7a:	605a      	str	r2, [r3, #4]
	pxQueueParameters5->psCheckVariable = &( sBlockingProducerCount[ 2 ] );
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	4a1e      	ldr	r2, [pc, #120]	; (8000bf8 <vStartBlockingQueueTasks+0x184>)
 8000b80:	609a      	str	r2, [r3, #8]

	pxQueueParameters6 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
 8000b82:	200c      	movs	r0, #12
 8000b84:	f003 f874 	bl	8003c70 <pvPortMalloc>
 8000b88:	60b8      	str	r0, [r7, #8]
	pxQueueParameters6->xQueue = pxQueueParameters5->xQueue;
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	68bb      	ldr	r3, [r7, #8]
 8000b90:	601a      	str	r2, [r3, #0]
	pxQueueParameters6->xBlockTime = xBlockTime;
 8000b92:	68bb      	ldr	r3, [r7, #8]
 8000b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b96:	605a      	str	r2, [r3, #4]
	pxQueueParameters6->psCheckVariable = &( sBlockingConsumerCount[ 2 ] );	
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	4a18      	ldr	r2, [pc, #96]	; (8000bfc <vStartBlockingQueueTasks+0x188>)
 8000b9c:	609a      	str	r2, [r3, #8]

	xTaskCreate( vBlockingQueueProducer, "QProdB5", blckqSTACK_SIZE, ( void * ) pxQueueParameters5, tskIDLE_PRIORITY, NULL );
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	9301      	str	r3, [sp, #4]
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	9300      	str	r3, [sp, #0]
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	2282      	movs	r2, #130	; 0x82
 8000baa:	4915      	ldr	r1, [pc, #84]	; (8000c00 <vStartBlockingQueueTasks+0x18c>)
 8000bac:	480d      	ldr	r0, [pc, #52]	; (8000be4 <vStartBlockingQueueTasks+0x170>)
 8000bae:	f004 fb2f 	bl	8005210 <xTaskCreate>
	xTaskCreate( vBlockingQueueConsumer, "QConsB6", blckqSTACK_SIZE, ( void * ) pxQueueParameters6, tskIDLE_PRIORITY, NULL );
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	9301      	str	r3, [sp, #4]
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	9300      	str	r3, [sp, #0]
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	2282      	movs	r2, #130	; 0x82
 8000bbe:	4911      	ldr	r1, [pc, #68]	; (8000c04 <vStartBlockingQueueTasks+0x190>)
 8000bc0:	4806      	ldr	r0, [pc, #24]	; (8000bdc <vStartBlockingQueueTasks+0x168>)
 8000bc2:	f004 fb25 	bl	8005210 <xTaskCreate>
}
 8000bc6:	bf00      	nop
 8000bc8:	3730      	adds	r7, #48	; 0x30
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20000044 	.word	0x20000044
 8000bd4:	2000004c 	.word	0x2000004c
 8000bd8:	080092e4 	.word	0x080092e4
 8000bdc:	08000c85 	.word	0x08000c85
 8000be0:	080092ec 	.word	0x080092ec
 8000be4:	08000c09 	.word	0x08000c09
 8000be8:	2000004e 	.word	0x2000004e
 8000bec:	20000046 	.word	0x20000046
 8000bf0:	080092f4 	.word	0x080092f4
 8000bf4:	080092fc 	.word	0x080092fc
 8000bf8:	20000050 	.word	0x20000050
 8000bfc:	20000048 	.word	0x20000048
 8000c00:	08009304 	.word	0x08009304
 8000c04:	0800930c 	.word	0x0800930c

08000c08 <vBlockingQueueProducer>:
/*-----------------------------------------------------------*/

static void vBlockingQueueProducer( void *pvParameters )
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b088      	sub	sp, #32
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
unsigned short usValue = 0;
 8000c10:	2300      	movs	r3, #0
 8000c12:	82fb      	strh	r3, [r7, #22]
xBlockingQueueParameters *pxQueueParameters;
const char * const pcTaskStartMsg = "Blocking queue producer started.\r\n";
 8000c14:	4b19      	ldr	r3, [pc, #100]	; (8000c7c <vBlockingQueueProducer+0x74>)
 8000c16:	613b      	str	r3, [r7, #16]
const char * const pcTaskErrorMsg = "Could not post on blocking queue\r\n";
 8000c18:	4b19      	ldr	r3, [pc, #100]	; (8000c80 <vBlockingQueueProducer+0x78>)
 8000c1a:	60fb      	str	r3, [r7, #12]
short sErrorEverOccurred = pdFALSE;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	83fb      	strh	r3, [r7, #30]

	pxQueueParameters = ( xBlockingQueueParameters * ) pvParameters;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	61bb      	str	r3, [r7, #24]

	/* Queue a message for printing to say the task has started. */
	vPrintDisplayMessage( &pcTaskStartMsg );
 8000c24:	f107 0310 	add.w	r3, r7, #16
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f002 fa43 	bl	80030b4 <vPrintDisplayMessage>

	for( ;; )
	{		
		if( xQueueSendToBack( pxQueueParameters->xQueue, ( void * ) &usValue, pxQueueParameters->xBlockTime ) != pdPASS )
 8000c2e:	69bb      	ldr	r3, [r7, #24]
 8000c30:	6818      	ldr	r0, [r3, #0]
 8000c32:	69bb      	ldr	r3, [r7, #24]
 8000c34:	685a      	ldr	r2, [r3, #4]
 8000c36:	f107 0116 	add.w	r1, r7, #22
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	f003 fbe2 	bl	8004404 <xQueueGenericSend>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b01      	cmp	r3, #1
 8000c44:	d007      	beq.n	8000c56 <vBlockingQueueProducer+0x4e>
		{
			vPrintDisplayMessage( &pcTaskErrorMsg );
 8000c46:	f107 030c 	add.w	r3, r7, #12
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f002 fa32 	bl	80030b4 <vPrintDisplayMessage>
			sErrorEverOccurred = pdTRUE;
 8000c50:	2301      	movs	r3, #1
 8000c52:	83fb      	strh	r3, [r7, #30]
 8000c54:	e7eb      	b.n	8000c2e <vBlockingQueueProducer+0x26>
		}
		else
		{
			/* We have successfully posted a message, so increment the variable 
			used to check we are still running. */
			if( sErrorEverOccurred == pdFALSE )
 8000c56:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d108      	bne.n	8000c70 <vBlockingQueueProducer+0x68>
			{
				( *pxQueueParameters->psCheckVariable )++;
 8000c5e:	69bb      	ldr	r3, [r7, #24]
 8000c60:	689b      	ldr	r3, [r3, #8]
 8000c62:	881a      	ldrh	r2, [r3, #0]
 8000c64:	b212      	sxth	r2, r2
 8000c66:	b292      	uxth	r2, r2
 8000c68:	3201      	adds	r2, #1
 8000c6a:	b292      	uxth	r2, r2
 8000c6c:	b212      	sxth	r2, r2
 8000c6e:	801a      	strh	r2, [r3, #0]
			}

			/* Increment the variable we are going to post next time round.  The 
			consumer will expect the numbers to	follow in numerical order. */
			++usValue;
 8000c70:	8afb      	ldrh	r3, [r7, #22]
 8000c72:	3301      	adds	r3, #1
 8000c74:	b29b      	uxth	r3, r3
 8000c76:	82fb      	strh	r3, [r7, #22]
		if( xQueueSendToBack( pxQueueParameters->xQueue, ( void * ) &usValue, pxQueueParameters->xBlockTime ) != pdPASS )
 8000c78:	e7d9      	b.n	8000c2e <vBlockingQueueProducer+0x26>
 8000c7a:	bf00      	nop
 8000c7c:	08009314 	.word	0x08009314
 8000c80:	08009338 	.word	0x08009338

08000c84 <vBlockingQueueConsumer>:
	}
}
/*-----------------------------------------------------------*/

static void vBlockingQueueConsumer( void *pvParameters )
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b088      	sub	sp, #32
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
unsigned short usData, usExpectedValue = 0;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	83fb      	strh	r3, [r7, #30]
xBlockingQueueParameters *pxQueueParameters;
const char * const pcTaskStartMsg = "Blocking queue consumer started.\r\n";
 8000c90:	4b1b      	ldr	r3, [pc, #108]	; (8000d00 <vBlockingQueueConsumer+0x7c>)
 8000c92:	613b      	str	r3, [r7, #16]
const char * const pcTaskErrorMsg = "Incorrect value received on blocking queue.\r\n";
 8000c94:	4b1b      	ldr	r3, [pc, #108]	; (8000d04 <vBlockingQueueConsumer+0x80>)
 8000c96:	60fb      	str	r3, [r7, #12]
short sErrorEverOccurred = pdFALSE;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	83bb      	strh	r3, [r7, #28]

	/* Queue a message for printing to say the task has started. */
	vPrintDisplayMessage( &pcTaskStartMsg );
 8000c9c:	f107 0310 	add.w	r3, r7, #16
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f002 fa07 	bl	80030b4 <vPrintDisplayMessage>

	pxQueueParameters = ( xBlockingQueueParameters * ) pvParameters;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	61bb      	str	r3, [r7, #24]

	for( ;; )
	{	
		if( xQueueReceive( pxQueueParameters->xQueue, &usData, pxQueueParameters->xBlockTime ) == pdPASS )
 8000caa:	69bb      	ldr	r3, [r7, #24]
 8000cac:	6818      	ldr	r0, [r3, #0]
 8000cae:	69bb      	ldr	r3, [r7, #24]
 8000cb0:	685a      	ldr	r2, [r3, #4]
 8000cb2:	f107 0116 	add.w	r1, r7, #22
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	f003 ff08 	bl	8004acc <xQueueGenericReceive>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d1f3      	bne.n	8000caa <vBlockingQueueConsumer+0x26>
		{
			if( usData != usExpectedValue )
 8000cc2:	8afb      	ldrh	r3, [r7, #22]
 8000cc4:	8bfa      	ldrh	r2, [r7, #30]
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	d009      	beq.n	8000cde <vBlockingQueueConsumer+0x5a>
			{
				vPrintDisplayMessage( &pcTaskErrorMsg );
 8000cca:	f107 030c 	add.w	r3, r7, #12
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f002 f9f0 	bl	80030b4 <vPrintDisplayMessage>

				/* Catch-up. */
				usExpectedValue = usData;
 8000cd4:	8afb      	ldrh	r3, [r7, #22]
 8000cd6:	83fb      	strh	r3, [r7, #30]

				sErrorEverOccurred = pdTRUE;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	83bb      	strh	r3, [r7, #28]
 8000cdc:	e7e5      	b.n	8000caa <vBlockingQueueConsumer+0x26>
			}
			else
			{
				/* We have successfully received a message, so increment the 
				variable used to check we are still running. */	
				if( sErrorEverOccurred == pdFALSE )
 8000cde:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d108      	bne.n	8000cf8 <vBlockingQueueConsumer+0x74>
				{
					( *pxQueueParameters->psCheckVariable )++;
 8000ce6:	69bb      	ldr	r3, [r7, #24]
 8000ce8:	689b      	ldr	r3, [r3, #8]
 8000cea:	881a      	ldrh	r2, [r3, #0]
 8000cec:	b212      	sxth	r2, r2
 8000cee:	b292      	uxth	r2, r2
 8000cf0:	3201      	adds	r2, #1
 8000cf2:	b292      	uxth	r2, r2
 8000cf4:	b212      	sxth	r2, r2
 8000cf6:	801a      	strh	r2, [r3, #0]
				}
							
				/* Increment the value we expect to remove from the queue next time 
				round. */
				++usExpectedValue;
 8000cf8:	8bfb      	ldrh	r3, [r7, #30]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	83fb      	strh	r3, [r7, #30]
		if( xQueueReceive( pxQueueParameters->xQueue, &usData, pxQueueParameters->xBlockTime ) == pdPASS )
 8000cfe:	e7d4      	b.n	8000caa <vBlockingQueueConsumer+0x26>
 8000d00:	0800935c 	.word	0x0800935c
 8000d04:	08009380 	.word	0x08009380

08000d08 <xAreBlockingQueuesStillRunning>:
}
/*-----------------------------------------------------------*/

/* This is called to check that all the created tasks are still running. */
portBASE_TYPE xAreBlockingQueuesStillRunning( void )
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
static short sLastBlockingConsumerCount[ blckqNUM_TASK_SETS ] = { ( short ) 0, ( short ) 0, ( short ) 0 };
static short sLastBlockingProducerCount[ blckqNUM_TASK_SETS ] = { ( short ) 0, ( short ) 0, ( short ) 0 };
portBASE_TYPE xReturn = pdPASS, xTasks;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	607b      	str	r3, [r7, #4]
	changed or not.
	
	Loop through each check variable and return pdFALSE if any are found not 
	to have changed since the last call. */

	for( xTasks = 0; xTasks < blckqNUM_TASK_SETS; xTasks++ )
 8000d12:	2300      	movs	r3, #0
 8000d14:	603b      	str	r3, [r7, #0]
 8000d16:	e02e      	b.n	8000d76 <xAreBlockingQueuesStillRunning+0x6e>
	{
		if( sBlockingConsumerCount[ xTasks ] == sLastBlockingConsumerCount[ xTasks ]  )
 8000d18:	4a1c      	ldr	r2, [pc, #112]	; (8000d8c <xAreBlockingQueuesStillRunning+0x84>)
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d20:	b21a      	sxth	r2, r3
 8000d22:	491b      	ldr	r1, [pc, #108]	; (8000d90 <xAreBlockingQueuesStillRunning+0x88>)
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	d101      	bne.n	8000d32 <xAreBlockingQueuesStillRunning+0x2a>
		{
			xReturn = pdFALSE;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	607b      	str	r3, [r7, #4]
		}
		sLastBlockingConsumerCount[ xTasks ] = sBlockingConsumerCount[ xTasks ];
 8000d32:	4a16      	ldr	r2, [pc, #88]	; (8000d8c <xAreBlockingQueuesStillRunning+0x84>)
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d3a:	b219      	sxth	r1, r3
 8000d3c:	4a14      	ldr	r2, [pc, #80]	; (8000d90 <xAreBlockingQueuesStillRunning+0x88>)
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]


		if( sBlockingProducerCount[ xTasks ] == sLastBlockingProducerCount[ xTasks ]  )
 8000d44:	4a13      	ldr	r2, [pc, #76]	; (8000d94 <xAreBlockingQueuesStillRunning+0x8c>)
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d4c:	b21a      	sxth	r2, r3
 8000d4e:	4912      	ldr	r1, [pc, #72]	; (8000d98 <xAreBlockingQueuesStillRunning+0x90>)
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8000d56:	429a      	cmp	r2, r3
 8000d58:	d101      	bne.n	8000d5e <xAreBlockingQueuesStillRunning+0x56>
		{
			xReturn = pdFALSE;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	607b      	str	r3, [r7, #4]
		}
		sLastBlockingProducerCount[ xTasks ] = sBlockingProducerCount[ xTasks ];
 8000d5e:	4a0d      	ldr	r2, [pc, #52]	; (8000d94 <xAreBlockingQueuesStillRunning+0x8c>)
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d66:	b219      	sxth	r1, r3
 8000d68:	4a0b      	ldr	r2, [pc, #44]	; (8000d98 <xAreBlockingQueuesStillRunning+0x90>)
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for( xTasks = 0; xTasks < blckqNUM_TASK_SETS; xTasks++ )
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	3301      	adds	r3, #1
 8000d74:	603b      	str	r3, [r7, #0]
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	2b02      	cmp	r3, #2
 8000d7a:	ddcd      	ble.n	8000d18 <xAreBlockingQueuesStillRunning+0x10>
	}

	return xReturn;
 8000d7c:	687b      	ldr	r3, [r7, #4]
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	20000044 	.word	0x20000044
 8000d90:	20000054 	.word	0x20000054
 8000d94:	2000004c 	.word	0x2000004c
 8000d98:	2000005c 	.word	0x2000005c

08000d9c <vStartGenericQueueTasks>:
static TaskHandle_t xHighPriorityMutexTask, xMediumPriorityMutexTask;

/*-----------------------------------------------------------*/

void vStartGenericQueueTasks( UBaseType_t uxPriority )
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af02      	add	r7, sp, #8
 8000da2:	6078      	str	r0, [r7, #4]
QueueHandle_t xQueue;
SemaphoreHandle_t xMutex;

	/* Create the queue that we are going to use for the
	prvSendFrontAndBackTest demo. */
	xQueue = xQueueCreate( genqQUEUE_LENGTH, sizeof( uint32_t ) );
 8000da4:	2200      	movs	r2, #0
 8000da6:	2104      	movs	r1, #4
 8000da8:	2005      	movs	r0, #5
 8000daa:	f003 f9b1 	bl	8004110 <xQueueGenericCreate>
 8000dae:	60f8      	str	r0, [r7, #12]

	if( xQueue != NULL )
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d00d      	beq.n	8000dd2 <vStartGenericQueueTasks+0x36>
		is in use.  The queue registry is provided as a means for kernel aware
		debuggers to locate queues and has no purpose if a kernel aware debugger
		is not being used.  The call to vQueueAddToRegistry() will be removed
		by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is
		defined to be less than 1. */
		vQueueAddToRegistry( xQueue, "Gen_Queue_Test" );
 8000db6:	491d      	ldr	r1, [pc, #116]	; (8000e2c <vStartGenericQueueTasks+0x90>)
 8000db8:	68f8      	ldr	r0, [r7, #12]
 8000dba:	f004 f9c5 	bl	8005148 <vQueueAddToRegistry>

		/* Create the demo task and pass it the queue just created.  We are
		passing the queue handle by value so it does not matter that it is
		declared on the stack here. */
		xTaskCreate( prvSendFrontAndBackTest, "GenQ", configMINIMAL_STACK_SIZE, ( void * ) xQueue, uxPriority, NULL );
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	9301      	str	r3, [sp, #4]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	9300      	str	r3, [sp, #0]
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	2282      	movs	r2, #130	; 0x82
 8000dca:	4919      	ldr	r1, [pc, #100]	; (8000e30 <vStartGenericQueueTasks+0x94>)
 8000dcc:	4819      	ldr	r0, [pc, #100]	; (8000e34 <vStartGenericQueueTasks+0x98>)
 8000dce:	f004 fa1f 	bl	8005210 <xTaskCreate>
	}

	/* Create the mutex used by the prvMutexTest task. */
	xMutex = xSemaphoreCreateMutex();
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	f003 fa40 	bl	8004258 <xQueueCreateMutex>
 8000dd8:	60b8      	str	r0, [r7, #8]

	if( xMutex != NULL )
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d021      	beq.n	8000e24 <vStartGenericQueueTasks+0x88>
		in use.  The registry is provided as a means for kernel aware
		debuggers to locate mutexes and has no purpose if a kernel aware
		debugger is not being used.  The call to vQueueAddToRegistry() will be
		removed by the pre-processor if configQUEUE_REGISTRY_SIZE is not
		defined or is defined to be less than 1. */
		vQueueAddToRegistry( ( QueueHandle_t ) xMutex, "Gen_Queue_Mutex" );
 8000de0:	4915      	ldr	r1, [pc, #84]	; (8000e38 <vStartGenericQueueTasks+0x9c>)
 8000de2:	68b8      	ldr	r0, [r7, #8]
 8000de4:	f004 f9b0 	bl	8005148 <vQueueAddToRegistry>

		/* Create the mutex demo tasks and pass it the mutex just created.  We
		are passing the mutex handle by value so it does not matter that it is
		declared on the stack here. */
		xTaskCreate( prvLowPriorityMutexTask, "MuLow", configMINIMAL_STACK_SIZE, ( void * ) xMutex, genqMUTEX_LOW_PRIORITY, NULL );
 8000de8:	2300      	movs	r3, #0
 8000dea:	9301      	str	r3, [sp, #4]
 8000dec:	2300      	movs	r3, #0
 8000dee:	9300      	str	r3, [sp, #0]
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	2282      	movs	r2, #130	; 0x82
 8000df4:	4911      	ldr	r1, [pc, #68]	; (8000e3c <vStartGenericQueueTasks+0xa0>)
 8000df6:	4812      	ldr	r0, [pc, #72]	; (8000e40 <vStartGenericQueueTasks+0xa4>)
 8000df8:	f004 fa0a 	bl	8005210 <xTaskCreate>
		xTaskCreate( prvMediumPriorityMutexTask, "MuMed", configMINIMAL_STACK_SIZE, NULL, genqMUTEX_MEDIUM_PRIORITY, &xMediumPriorityMutexTask );
 8000dfc:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <vStartGenericQueueTasks+0xa8>)
 8000dfe:	9301      	str	r3, [sp, #4]
 8000e00:	2302      	movs	r3, #2
 8000e02:	9300      	str	r3, [sp, #0]
 8000e04:	2300      	movs	r3, #0
 8000e06:	2282      	movs	r2, #130	; 0x82
 8000e08:	490f      	ldr	r1, [pc, #60]	; (8000e48 <vStartGenericQueueTasks+0xac>)
 8000e0a:	4810      	ldr	r0, [pc, #64]	; (8000e4c <vStartGenericQueueTasks+0xb0>)
 8000e0c:	f004 fa00 	bl	8005210 <xTaskCreate>
		xTaskCreate( prvHighPriorityMutexTask, "MuHigh", configMINIMAL_STACK_SIZE, ( void * ) xMutex, genqMUTEX_HIGH_PRIORITY, &xHighPriorityMutexTask );
 8000e10:	4b0f      	ldr	r3, [pc, #60]	; (8000e50 <vStartGenericQueueTasks+0xb4>)
 8000e12:	9301      	str	r3, [sp, #4]
 8000e14:	2303      	movs	r3, #3
 8000e16:	9300      	str	r3, [sp, #0]
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	2282      	movs	r2, #130	; 0x82
 8000e1c:	490d      	ldr	r1, [pc, #52]	; (8000e54 <vStartGenericQueueTasks+0xb8>)
 8000e1e:	480e      	ldr	r0, [pc, #56]	; (8000e58 <vStartGenericQueueTasks+0xbc>)
 8000e20:	f004 f9f6 	bl	8005210 <xTaskCreate>
	}
}
 8000e24:	bf00      	nop
 8000e26:	3710      	adds	r7, #16
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	080093b0 	.word	0x080093b0
 8000e30:	080093c0 	.word	0x080093c0
 8000e34:	08000e5d 	.word	0x08000e5d
 8000e38:	080093c8 	.word	0x080093c8
 8000e3c:	080093d8 	.word	0x080093d8
 8000e40:	0800139d 	.word	0x0800139d
 8000e44:	20000078 	.word	0x20000078
 8000e48:	080093e0 	.word	0x080093e0
 8000e4c:	080013f5 	.word	0x080013f5
 8000e50:	20000074 	.word	0x20000074
 8000e54:	080093e8 	.word	0x080093e8
 8000e58:	08001415 	.word	0x08001415

08000e5c <prvSendFrontAndBackTest>:
/*-----------------------------------------------------------*/

static void prvSendFrontAndBackTest( void *pvParameters )
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]

		/* Queue a message for printing to say the task has started. */
		vPrintDisplayMessage( &pcTaskStartMsg );
	#endif

	xQueue = ( QueueHandle_t ) pvParameters;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	617b      	str	r3, [r7, #20]
	{
		/* The queue is empty, so sending an item to the back of the queue
		should have the same efect as sending it to the front of the queue.

		First send to the front and check everything is as expected. */
		xQueueSendToFront( xQueue, ( void * ) &ulLoopCounter, intsemNO_BLOCK );
 8000e68:	2301      	movs	r3, #1
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	49a2      	ldr	r1, [pc, #648]	; (80010f8 <prvSendFrontAndBackTest+0x29c>)
 8000e6e:	6978      	ldr	r0, [r7, #20]
 8000e70:	f003 fac8 	bl	8004404 <xQueueGenericSend>

		if( uxQueueMessagesWaiting( xQueue ) != 1 )
 8000e74:	6978      	ldr	r0, [r7, #20]
 8000e76:	f004 f839 	bl	8004eec <uxQueueMessagesWaiting>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d002      	beq.n	8000e86 <prvSendFrontAndBackTest+0x2a>
		{
			xErrorDetected = pdTRUE;
 8000e80:	4b9e      	ldr	r3, [pc, #632]	; (80010fc <prvSendFrontAndBackTest+0x2a0>)
 8000e82:	2201      	movs	r2, #1
 8000e84:	601a      	str	r2, [r3, #0]
		}

		if( xQueueReceive( xQueue, ( void * ) &ulData, intsemNO_BLOCK ) != pdPASS )
 8000e86:	f107 0110 	add.w	r1, r7, #16
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	6978      	ldr	r0, [r7, #20]
 8000e90:	f003 fe1c 	bl	8004acc <xQueueGenericReceive>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d002      	beq.n	8000ea0 <prvSendFrontAndBackTest+0x44>
		{
			xErrorDetected = pdTRUE;
 8000e9a:	4b98      	ldr	r3, [pc, #608]	; (80010fc <prvSendFrontAndBackTest+0x2a0>)
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	601a      	str	r2, [r3, #0]
		}

		/* The data we sent to the queue should equal the data we just received
		from the queue. */
		if( ulLoopCounter != ulData )
 8000ea0:	4b95      	ldr	r3, [pc, #596]	; (80010f8 <prvSendFrontAndBackTest+0x29c>)
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	429a      	cmp	r2, r3
 8000ea8:	d002      	beq.n	8000eb0 <prvSendFrontAndBackTest+0x54>
		{
			xErrorDetected = pdTRUE;
 8000eaa:	4b94      	ldr	r3, [pc, #592]	; (80010fc <prvSendFrontAndBackTest+0x2a0>)
 8000eac:	2201      	movs	r2, #1
 8000eae:	601a      	str	r2, [r3, #0]
		}

		/* Then do the same, sending the data to the back, checking everything
		is as expected. */
		if( uxQueueMessagesWaiting( xQueue ) != 0 )
 8000eb0:	6978      	ldr	r0, [r7, #20]
 8000eb2:	f004 f81b 	bl	8004eec <uxQueueMessagesWaiting>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d002      	beq.n	8000ec2 <prvSendFrontAndBackTest+0x66>
		{
			xErrorDetected = pdTRUE;
 8000ebc:	4b8f      	ldr	r3, [pc, #572]	; (80010fc <prvSendFrontAndBackTest+0x2a0>)
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	601a      	str	r2, [r3, #0]
		}

		xQueueSendToBack( xQueue, ( void * ) &ulLoopCounter, intsemNO_BLOCK );
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	498c      	ldr	r1, [pc, #560]	; (80010f8 <prvSendFrontAndBackTest+0x29c>)
 8000ec8:	6978      	ldr	r0, [r7, #20]
 8000eca:	f003 fa9b 	bl	8004404 <xQueueGenericSend>

		if( uxQueueMessagesWaiting( xQueue ) != 1 )
 8000ece:	6978      	ldr	r0, [r7, #20]
 8000ed0:	f004 f80c 	bl	8004eec <uxQueueMessagesWaiting>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d002      	beq.n	8000ee0 <prvSendFrontAndBackTest+0x84>
		{
			xErrorDetected = pdTRUE;
 8000eda:	4b88      	ldr	r3, [pc, #544]	; (80010fc <prvSendFrontAndBackTest+0x2a0>)
 8000edc:	2201      	movs	r2, #1
 8000ede:	601a      	str	r2, [r3, #0]
		}

		if( xQueueReceive( xQueue, ( void * ) &ulData, intsemNO_BLOCK ) != pdPASS )
 8000ee0:	f107 0110 	add.w	r1, r7, #16
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	6978      	ldr	r0, [r7, #20]
 8000eea:	f003 fdef 	bl	8004acc <xQueueGenericReceive>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d002      	beq.n	8000efa <prvSendFrontAndBackTest+0x9e>
		{
			xErrorDetected = pdTRUE;
 8000ef4:	4b81      	ldr	r3, [pc, #516]	; (80010fc <prvSendFrontAndBackTest+0x2a0>)
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	601a      	str	r2, [r3, #0]
		}

		if( uxQueueMessagesWaiting( xQueue ) != 0 )
 8000efa:	6978      	ldr	r0, [r7, #20]
 8000efc:	f003 fff6 	bl	8004eec <uxQueueMessagesWaiting>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d002      	beq.n	8000f0c <prvSendFrontAndBackTest+0xb0>
		{
			xErrorDetected = pdTRUE;
 8000f06:	4b7d      	ldr	r3, [pc, #500]	; (80010fc <prvSendFrontAndBackTest+0x2a0>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	601a      	str	r2, [r3, #0]
		}

		/* The data we sent to the queue should equal the data we just received
		from the queue. */
		if( ulLoopCounter != ulData )
 8000f0c:	4b7a      	ldr	r3, [pc, #488]	; (80010f8 <prvSendFrontAndBackTest+0x29c>)
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	429a      	cmp	r2, r3
 8000f14:	d002      	beq.n	8000f1c <prvSendFrontAndBackTest+0xc0>
		{
			xErrorDetected = pdTRUE;
 8000f16:	4b79      	ldr	r3, [pc, #484]	; (80010fc <prvSendFrontAndBackTest+0x2a0>)
 8000f18:	2201      	movs	r2, #1
 8000f1a:	601a      	str	r2, [r3, #0]
		#endif



		/* Place 2, 3, 4 into the queue, adding items to the back of the queue. */
		for( ulData = 2; ulData < 5; ulData++ )
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	613b      	str	r3, [r7, #16]
 8000f20:	e009      	b.n	8000f36 <prvSendFrontAndBackTest+0xda>
		{
			xQueueSendToBack( xQueue, ( void * ) &ulData, intsemNO_BLOCK );
 8000f22:	f107 0110 	add.w	r1, r7, #16
 8000f26:	2300      	movs	r3, #0
 8000f28:	2200      	movs	r2, #0
 8000f2a:	6978      	ldr	r0, [r7, #20]
 8000f2c:	f003 fa6a 	bl	8004404 <xQueueGenericSend>
		for( ulData = 2; ulData < 5; ulData++ )
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	3301      	adds	r3, #1
 8000f34:	613b      	str	r3, [r7, #16]
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	2b04      	cmp	r3, #4
 8000f3a:	d9f2      	bls.n	8000f22 <prvSendFrontAndBackTest+0xc6>
		}

		/* Now the order in the queue should be 2, 3, 4, with 2 being the first
		thing to be read out.  Now add 1 then 0 to the front of the queue. */
		if( uxQueueMessagesWaiting( xQueue ) != 3 )
 8000f3c:	6978      	ldr	r0, [r7, #20]
 8000f3e:	f003 ffd5 	bl	8004eec <uxQueueMessagesWaiting>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b03      	cmp	r3, #3
 8000f46:	d002      	beq.n	8000f4e <prvSendFrontAndBackTest+0xf2>
		{
			xErrorDetected = pdTRUE;
 8000f48:	4b6c      	ldr	r3, [pc, #432]	; (80010fc <prvSendFrontAndBackTest+0x2a0>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	601a      	str	r2, [r3, #0]
		}
		ulData = 1;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	613b      	str	r3, [r7, #16]
		xQueueSendToFront( xQueue, ( void * ) &ulData, intsemNO_BLOCK );
 8000f52:	f107 0110 	add.w	r1, r7, #16
 8000f56:	2301      	movs	r3, #1
 8000f58:	2200      	movs	r2, #0
 8000f5a:	6978      	ldr	r0, [r7, #20]
 8000f5c:	f003 fa52 	bl	8004404 <xQueueGenericSend>
		ulData = 0;
 8000f60:	2300      	movs	r3, #0
 8000f62:	613b      	str	r3, [r7, #16]
		xQueueSendToFront( xQueue, ( void * ) &ulData, intsemNO_BLOCK );
 8000f64:	f107 0110 	add.w	r1, r7, #16
 8000f68:	2301      	movs	r3, #1
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	6978      	ldr	r0, [r7, #20]
 8000f6e:	f003 fa49 	bl	8004404 <xQueueGenericSend>

		/* Now the queue should be full, and when we read the data out we
		should receive 0, 1, 2, 3, 4. */
		if( uxQueueMessagesWaiting( xQueue ) != 5 )
 8000f72:	6978      	ldr	r0, [r7, #20]
 8000f74:	f003 ffba 	bl	8004eec <uxQueueMessagesWaiting>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b05      	cmp	r3, #5
 8000f7c:	d002      	beq.n	8000f84 <prvSendFrontAndBackTest+0x128>
		{
			xErrorDetected = pdTRUE;
 8000f7e:	4b5f      	ldr	r3, [pc, #380]	; (80010fc <prvSendFrontAndBackTest+0x2a0>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	601a      	str	r2, [r3, #0]
		}

		if( xQueueSendToFront( xQueue, ( void * ) &ulData, intsemNO_BLOCK ) != errQUEUE_FULL )
 8000f84:	f107 0110 	add.w	r1, r7, #16
 8000f88:	2301      	movs	r3, #1
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	6978      	ldr	r0, [r7, #20]
 8000f8e:	f003 fa39 	bl	8004404 <xQueueGenericSend>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d002      	beq.n	8000f9e <prvSendFrontAndBackTest+0x142>
		{
			xErrorDetected = pdTRUE;
 8000f98:	4b58      	ldr	r3, [pc, #352]	; (80010fc <prvSendFrontAndBackTest+0x2a0>)
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	601a      	str	r2, [r3, #0]
		}

		if( xQueueSendToBack( xQueue, ( void * ) &ulData, intsemNO_BLOCK ) != errQUEUE_FULL )
 8000f9e:	f107 0110 	add.w	r1, r7, #16
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	6978      	ldr	r0, [r7, #20]
 8000fa8:	f003 fa2c 	bl	8004404 <xQueueGenericSend>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d002      	beq.n	8000fb8 <prvSendFrontAndBackTest+0x15c>
		{
			xErrorDetected = pdTRUE;
 8000fb2:	4b52      	ldr	r3, [pc, #328]	; (80010fc <prvSendFrontAndBackTest+0x2a0>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	601a      	str	r2, [r3, #0]
		#if configUSE_PREEMPTION == 0
			taskYIELD();
		#endif

		/* Check the data we read out is in the expected order. */
		for( ulData = 0; ulData < genqQUEUE_LENGTH; ulData++ )
 8000fb8:	2300      	movs	r3, #0
 8000fba:	613b      	str	r3, [r7, #16]
 8000fbc:	e02d      	b.n	800101a <prvSendFrontAndBackTest+0x1be>
		{
			/* Try peeking the data first. */
			if( xQueuePeek( xQueue, &ulData2, intsemNO_BLOCK ) != pdPASS )
 8000fbe:	f107 010c 	add.w	r1, r7, #12
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	6978      	ldr	r0, [r7, #20]
 8000fc8:	f003 fd80 	bl	8004acc <xQueueGenericReceive>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d002      	beq.n	8000fd8 <prvSendFrontAndBackTest+0x17c>
			{
				xErrorDetected = pdTRUE;
 8000fd2:	4b4a      	ldr	r3, [pc, #296]	; (80010fc <prvSendFrontAndBackTest+0x2a0>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	601a      	str	r2, [r3, #0]
			}

			if( ulData != ulData2 )
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d002      	beq.n	8000fe6 <prvSendFrontAndBackTest+0x18a>
			{
				xErrorDetected = pdTRUE;
 8000fe0:	4b46      	ldr	r3, [pc, #280]	; (80010fc <prvSendFrontAndBackTest+0x2a0>)
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	601a      	str	r2, [r3, #0]
			}


			/* Now try receiving the data for real.  The value should be the
			same.  Clobber the value first so we know we really received it. */
			ulData2 = ~ulData2;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	60fb      	str	r3, [r7, #12]
			if( xQueueReceive( xQueue, &ulData2, intsemNO_BLOCK ) != pdPASS )
 8000fec:	f107 010c 	add.w	r1, r7, #12
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	6978      	ldr	r0, [r7, #20]
 8000ff6:	f003 fd69 	bl	8004acc <xQueueGenericReceive>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d002      	beq.n	8001006 <prvSendFrontAndBackTest+0x1aa>
			{
				xErrorDetected = pdTRUE;
 8001000:	4b3e      	ldr	r3, [pc, #248]	; (80010fc <prvSendFrontAndBackTest+0x2a0>)
 8001002:	2201      	movs	r2, #1
 8001004:	601a      	str	r2, [r3, #0]
			}

			if( ulData != ulData2 )
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	429a      	cmp	r2, r3
 800100c:	d002      	beq.n	8001014 <prvSendFrontAndBackTest+0x1b8>
			{
				xErrorDetected = pdTRUE;
 800100e:	4b3b      	ldr	r3, [pc, #236]	; (80010fc <prvSendFrontAndBackTest+0x2a0>)
 8001010:	2201      	movs	r2, #1
 8001012:	601a      	str	r2, [r3, #0]
		for( ulData = 0; ulData < genqQUEUE_LENGTH; ulData++ )
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	3301      	adds	r3, #1
 8001018:	613b      	str	r3, [r7, #16]
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	2b04      	cmp	r3, #4
 800101e:	d9ce      	bls.n	8000fbe <prvSendFrontAndBackTest+0x162>
			}
		}

		/* The queue should now be empty again. */
		if( uxQueueMessagesWaiting( xQueue ) != 0 )
 8001020:	6978      	ldr	r0, [r7, #20]
 8001022:	f003 ff63 	bl	8004eec <uxQueueMessagesWaiting>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d002      	beq.n	8001032 <prvSendFrontAndBackTest+0x1d6>
		{
			xErrorDetected = pdTRUE;
 800102c:	4b33      	ldr	r3, [pc, #204]	; (80010fc <prvSendFrontAndBackTest+0x2a0>)
 800102e:	2201      	movs	r2, #1
 8001030:	601a      	str	r2, [r3, #0]
			taskYIELD();
		#endif


		/* Our queue is empty once more, add 10, 11 to the back. */
		ulData = 10;
 8001032:	230a      	movs	r3, #10
 8001034:	613b      	str	r3, [r7, #16]
		if( xQueueSend( xQueue, &ulData, intsemNO_BLOCK ) != pdPASS )
 8001036:	f107 0110 	add.w	r1, r7, #16
 800103a:	2300      	movs	r3, #0
 800103c:	2200      	movs	r2, #0
 800103e:	6978      	ldr	r0, [r7, #20]
 8001040:	f003 f9e0 	bl	8004404 <xQueueGenericSend>
 8001044:	4603      	mov	r3, r0
 8001046:	2b01      	cmp	r3, #1
 8001048:	d002      	beq.n	8001050 <prvSendFrontAndBackTest+0x1f4>
		{
			xErrorDetected = pdTRUE;
 800104a:	4b2c      	ldr	r3, [pc, #176]	; (80010fc <prvSendFrontAndBackTest+0x2a0>)
 800104c:	2201      	movs	r2, #1
 800104e:	601a      	str	r2, [r3, #0]
		}
		ulData = 11;
 8001050:	230b      	movs	r3, #11
 8001052:	613b      	str	r3, [r7, #16]
		if( xQueueSend( xQueue, &ulData, intsemNO_BLOCK ) != pdPASS )
 8001054:	f107 0110 	add.w	r1, r7, #16
 8001058:	2300      	movs	r3, #0
 800105a:	2200      	movs	r2, #0
 800105c:	6978      	ldr	r0, [r7, #20]
 800105e:	f003 f9d1 	bl	8004404 <xQueueGenericSend>
 8001062:	4603      	mov	r3, r0
 8001064:	2b01      	cmp	r3, #1
 8001066:	d002      	beq.n	800106e <prvSendFrontAndBackTest+0x212>
		{
			xErrorDetected = pdTRUE;
 8001068:	4b24      	ldr	r3, [pc, #144]	; (80010fc <prvSendFrontAndBackTest+0x2a0>)
 800106a:	2201      	movs	r2, #1
 800106c:	601a      	str	r2, [r3, #0]
		}

		if( uxQueueMessagesWaiting( xQueue ) != 2 )
 800106e:	6978      	ldr	r0, [r7, #20]
 8001070:	f003 ff3c 	bl	8004eec <uxQueueMessagesWaiting>
 8001074:	4603      	mov	r3, r0
 8001076:	2b02      	cmp	r3, #2
 8001078:	d002      	beq.n	8001080 <prvSendFrontAndBackTest+0x224>
		{
			xErrorDetected = pdTRUE;
 800107a:	4b20      	ldr	r3, [pc, #128]	; (80010fc <prvSendFrontAndBackTest+0x2a0>)
 800107c:	2201      	movs	r2, #1
 800107e:	601a      	str	r2, [r3, #0]
		}

		/* Now we should have 10, 11 in the queue.  Add 7, 8, 9 to the
		front. */
		for( ulData = 9; ulData >= 7; ulData-- )
 8001080:	2309      	movs	r3, #9
 8001082:	613b      	str	r3, [r7, #16]
 8001084:	e00f      	b.n	80010a6 <prvSendFrontAndBackTest+0x24a>
		{
			if( xQueueSendToFront( xQueue, ( void * ) &ulData, intsemNO_BLOCK ) != pdPASS )
 8001086:	f107 0110 	add.w	r1, r7, #16
 800108a:	2301      	movs	r3, #1
 800108c:	2200      	movs	r2, #0
 800108e:	6978      	ldr	r0, [r7, #20]
 8001090:	f003 f9b8 	bl	8004404 <xQueueGenericSend>
 8001094:	4603      	mov	r3, r0
 8001096:	2b01      	cmp	r3, #1
 8001098:	d002      	beq.n	80010a0 <prvSendFrontAndBackTest+0x244>
			{
				xErrorDetected = pdTRUE;
 800109a:	4b18      	ldr	r3, [pc, #96]	; (80010fc <prvSendFrontAndBackTest+0x2a0>)
 800109c:	2201      	movs	r2, #1
 800109e:	601a      	str	r2, [r3, #0]
		for( ulData = 9; ulData >= 7; ulData-- )
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	3b01      	subs	r3, #1
 80010a4:	613b      	str	r3, [r7, #16]
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	2b06      	cmp	r3, #6
 80010aa:	d8ec      	bhi.n	8001086 <prvSendFrontAndBackTest+0x22a>
			}
		}

		/* Now check that the queue is full, and that receiving data provides
		the expected sequence of 7, 8, 9, 10, 11. */
		if( uxQueueMessagesWaiting( xQueue ) != 5 )
 80010ac:	6978      	ldr	r0, [r7, #20]
 80010ae:	f003 ff1d 	bl	8004eec <uxQueueMessagesWaiting>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b05      	cmp	r3, #5
 80010b6:	d002      	beq.n	80010be <prvSendFrontAndBackTest+0x262>
		{
			xErrorDetected = pdTRUE;
 80010b8:	4b10      	ldr	r3, [pc, #64]	; (80010fc <prvSendFrontAndBackTest+0x2a0>)
 80010ba:	2201      	movs	r2, #1
 80010bc:	601a      	str	r2, [r3, #0]
		}

		if( xQueueSendToFront( xQueue, ( void * ) &ulData, intsemNO_BLOCK ) != errQUEUE_FULL )
 80010be:	f107 0110 	add.w	r1, r7, #16
 80010c2:	2301      	movs	r3, #1
 80010c4:	2200      	movs	r2, #0
 80010c6:	6978      	ldr	r0, [r7, #20]
 80010c8:	f003 f99c 	bl	8004404 <xQueueGenericSend>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d002      	beq.n	80010d8 <prvSendFrontAndBackTest+0x27c>
		{
			xErrorDetected = pdTRUE;
 80010d2:	4b0a      	ldr	r3, [pc, #40]	; (80010fc <prvSendFrontAndBackTest+0x2a0>)
 80010d4:	2201      	movs	r2, #1
 80010d6:	601a      	str	r2, [r3, #0]
		}

		if( xQueueSendToBack( xQueue, ( void * ) &ulData, intsemNO_BLOCK ) != errQUEUE_FULL )
 80010d8:	f107 0110 	add.w	r1, r7, #16
 80010dc:	2300      	movs	r3, #0
 80010de:	2200      	movs	r2, #0
 80010e0:	6978      	ldr	r0, [r7, #20]
 80010e2:	f003 f98f 	bl	8004404 <xQueueGenericSend>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d002      	beq.n	80010f2 <prvSendFrontAndBackTest+0x296>
		{
			xErrorDetected = pdTRUE;
 80010ec:	4b03      	ldr	r3, [pc, #12]	; (80010fc <prvSendFrontAndBackTest+0x2a0>)
 80010ee:	2201      	movs	r2, #1
 80010f0:	601a      	str	r2, [r3, #0]
		#if configUSE_PREEMPTION == 0
			taskYIELD();
		#endif

		/* Check the data we read out is in the expected order. */
		for( ulData = 7; ulData < ( 7 + genqQUEUE_LENGTH ); ulData++ )
 80010f2:	2307      	movs	r3, #7
 80010f4:	613b      	str	r3, [r7, #16]
 80010f6:	e01a      	b.n	800112e <prvSendFrontAndBackTest+0x2d2>
 80010f8:	20000068 	.word	0x20000068
 80010fc:	20000064 	.word	0x20000064
		{
			if( xQueueReceive( xQueue, &ulData2, intsemNO_BLOCK ) != pdPASS )
 8001100:	f107 010c 	add.w	r1, r7, #12
 8001104:	2300      	movs	r3, #0
 8001106:	2200      	movs	r2, #0
 8001108:	6978      	ldr	r0, [r7, #20]
 800110a:	f003 fcdf 	bl	8004acc <xQueueGenericReceive>
 800110e:	4603      	mov	r3, r0
 8001110:	2b01      	cmp	r3, #1
 8001112:	d002      	beq.n	800111a <prvSendFrontAndBackTest+0x2be>
			{
				xErrorDetected = pdTRUE;
 8001114:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <prvSendFrontAndBackTest+0x2f8>)
 8001116:	2201      	movs	r2, #1
 8001118:	601a      	str	r2, [r3, #0]
			}

			if( ulData != ulData2 )
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	429a      	cmp	r2, r3
 8001120:	d002      	beq.n	8001128 <prvSendFrontAndBackTest+0x2cc>
			{
				xErrorDetected = pdTRUE;
 8001122:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <prvSendFrontAndBackTest+0x2f8>)
 8001124:	2201      	movs	r2, #1
 8001126:	601a      	str	r2, [r3, #0]
		for( ulData = 7; ulData < ( 7 + genqQUEUE_LENGTH ); ulData++ )
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	3301      	adds	r3, #1
 800112c:	613b      	str	r3, [r7, #16]
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	2b0b      	cmp	r3, #11
 8001132:	d9e5      	bls.n	8001100 <prvSendFrontAndBackTest+0x2a4>
			}
		}

		if( uxQueueMessagesWaiting( xQueue ) != 0 )
 8001134:	6978      	ldr	r0, [r7, #20]
 8001136:	f003 fed9 	bl	8004eec <uxQueueMessagesWaiting>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d002      	beq.n	8001146 <prvSendFrontAndBackTest+0x2ea>
		{
			xErrorDetected = pdTRUE;
 8001140:	4b04      	ldr	r3, [pc, #16]	; (8001154 <prvSendFrontAndBackTest+0x2f8>)
 8001142:	2201      	movs	r2, #1
 8001144:	601a      	str	r2, [r3, #0]
		}

		ulLoopCounter++;
 8001146:	4b04      	ldr	r3, [pc, #16]	; (8001158 <prvSendFrontAndBackTest+0x2fc>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	3301      	adds	r3, #1
 800114c:	4a02      	ldr	r2, [pc, #8]	; (8001158 <prvSendFrontAndBackTest+0x2fc>)
 800114e:	6013      	str	r3, [r2, #0]
		xQueueSendToFront( xQueue, ( void * ) &ulLoopCounter, intsemNO_BLOCK );
 8001150:	e68a      	b.n	8000e68 <prvSendFrontAndBackTest+0xc>
 8001152:	bf00      	nop
 8001154:	20000064 	.word	0x20000064
 8001158:	20000068 	.word	0x20000068

0800115c <prvTakeTwoMutexesReturnInDifferentOrder>:
	}
}
/*-----------------------------------------------------------*/

static void prvTakeTwoMutexesReturnInDifferentOrder( SemaphoreHandle_t xMutex, SemaphoreHandle_t xLocalMutex )
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
	/* Take the mutex.  It should be available now. */
	if( xSemaphoreTake( xMutex, intsemNO_BLOCK ) != pdPASS )
 8001166:	2300      	movs	r3, #0
 8001168:	2200      	movs	r2, #0
 800116a:	2100      	movs	r1, #0
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f003 fcad 	bl	8004acc <xQueueGenericReceive>
 8001172:	4603      	mov	r3, r0
 8001174:	2b01      	cmp	r3, #1
 8001176:	d002      	beq.n	800117e <prvTakeTwoMutexesReturnInDifferentOrder+0x22>
	{
		xErrorDetected = pdTRUE;
 8001178:	4b40      	ldr	r3, [pc, #256]	; (800127c <prvTakeTwoMutexesReturnInDifferentOrder+0x120>)
 800117a:	2201      	movs	r2, #1
 800117c:	601a      	str	r2, [r3, #0]
	}

	/* Set the guarded variable to a known start value. */
	ulGuardedVariable = 0;
 800117e:	4b40      	ldr	r3, [pc, #256]	; (8001280 <prvTakeTwoMutexesReturnInDifferentOrder+0x124>)
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]

	/* This task's priority should be as per that assigned when the task was
	created. */
	if( uxTaskPriorityGet( NULL ) != genqMUTEX_LOW_PRIORITY )
 8001184:	2000      	movs	r0, #0
 8001186:	f004 faf3 	bl	8005770 <uxTaskPriorityGet>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d002      	beq.n	8001196 <prvTakeTwoMutexesReturnInDifferentOrder+0x3a>
	{
		xErrorDetected = pdTRUE;
 8001190:	4b3a      	ldr	r3, [pc, #232]	; (800127c <prvTakeTwoMutexesReturnInDifferentOrder+0x120>)
 8001192:	2201      	movs	r2, #1
 8001194:	601a      	str	r2, [r3, #0]
	}

	/* Now unsuspend the high priority task.  This will attempt to take the
	mutex, and block when it finds it cannot obtain it. */
	vTaskResume( xHighPriorityMutexTask );
 8001196:	4b3b      	ldr	r3, [pc, #236]	; (8001284 <prvTakeTwoMutexesReturnInDifferentOrder+0x128>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4618      	mov	r0, r3
 800119c:	f004 fc84 	bl	8005aa8 <vTaskResume>
	}
	#endif /* INCLUDE_eTaskGetState */

	/* The priority of the high priority task should now have been inherited
	as by now it will have attempted to get the mutex. */
	if( uxTaskPriorityGet( NULL ) != genqMUTEX_HIGH_PRIORITY )
 80011a0:	2000      	movs	r0, #0
 80011a2:	f004 fae5 	bl	8005770 <uxTaskPriorityGet>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b03      	cmp	r3, #3
 80011aa:	d002      	beq.n	80011b2 <prvTakeTwoMutexesReturnInDifferentOrder+0x56>
	{
		xErrorDetected = pdTRUE;
 80011ac:	4b33      	ldr	r3, [pc, #204]	; (800127c <prvTakeTwoMutexesReturnInDifferentOrder+0x120>)
 80011ae:	2201      	movs	r2, #1
 80011b0:	601a      	str	r2, [r3, #0]
	}

	/* Attempt to set the priority of this task to the test priority -
	between the	idle priority and the medium/high test priorities, but the
	actual priority should remain at the high priority. */
	vTaskPrioritySet( NULL, genqMUTEX_TEST_PRIORITY );
 80011b2:	2101      	movs	r1, #1
 80011b4:	2000      	movs	r0, #0
 80011b6:	f004 faf5 	bl	80057a4 <vTaskPrioritySet>
	if( uxTaskPriorityGet( NULL ) != genqMUTEX_HIGH_PRIORITY )
 80011ba:	2000      	movs	r0, #0
 80011bc:	f004 fad8 	bl	8005770 <uxTaskPriorityGet>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b03      	cmp	r3, #3
 80011c4:	d002      	beq.n	80011cc <prvTakeTwoMutexesReturnInDifferentOrder+0x70>
	{
		xErrorDetected = pdTRUE;
 80011c6:	4b2d      	ldr	r3, [pc, #180]	; (800127c <prvTakeTwoMutexesReturnInDifferentOrder+0x120>)
 80011c8:	2201      	movs	r2, #1
 80011ca:	601a      	str	r2, [r3, #0]
	}

	/* Now unsuspend the medium priority task.  This should not run as the
	inherited priority of this task is above that of the medium priority
	task. */
	vTaskResume( xMediumPriorityMutexTask );
 80011cc:	4b2e      	ldr	r3, [pc, #184]	; (8001288 <prvTakeTwoMutexesReturnInDifferentOrder+0x12c>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f004 fc69 	bl	8005aa8 <vTaskResume>

	/* If the medium priority task did run then it will have incremented the
	guarded variable. */
	if( ulGuardedVariable != 0 )
 80011d6:	4b2a      	ldr	r3, [pc, #168]	; (8001280 <prvTakeTwoMutexesReturnInDifferentOrder+0x124>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d002      	beq.n	80011e4 <prvTakeTwoMutexesReturnInDifferentOrder+0x88>
	{
		xErrorDetected = pdTRUE;
 80011de:	4b27      	ldr	r3, [pc, #156]	; (800127c <prvTakeTwoMutexesReturnInDifferentOrder+0x120>)
 80011e0:	2201      	movs	r2, #1
 80011e2:	601a      	str	r2, [r3, #0]
	}

	/* Take the local mutex too, so two mutexes are now held. */
	if( xSemaphoreTake( xLocalMutex, intsemNO_BLOCK ) != pdPASS )
 80011e4:	2300      	movs	r3, #0
 80011e6:	2200      	movs	r2, #0
 80011e8:	2100      	movs	r1, #0
 80011ea:	6838      	ldr	r0, [r7, #0]
 80011ec:	f003 fc6e 	bl	8004acc <xQueueGenericReceive>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d002      	beq.n	80011fc <prvTakeTwoMutexesReturnInDifferentOrder+0xa0>
	{
		xErrorDetected = pdTRUE;
 80011f6:	4b21      	ldr	r3, [pc, #132]	; (800127c <prvTakeTwoMutexesReturnInDifferentOrder+0x120>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	601a      	str	r2, [r3, #0]
	yet be disinherited because the local mutex is still held.  This is a
	simplification to allow FreeRTOS to be integrated with middleware that
	attempts to hold multiple mutexes without bloating the code with complex
	algorithms.  It is possible that the high priority mutex task will
	execute as it shares a priority with this task. */
	if( xSemaphoreGive( xMutex ) != pdPASS )
 80011fc:	2300      	movs	r3, #0
 80011fe:	2200      	movs	r2, #0
 8001200:	2100      	movs	r1, #0
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f003 f8fe 	bl	8004404 <xQueueGenericSend>
 8001208:	4603      	mov	r3, r0
 800120a:	2b01      	cmp	r3, #1
 800120c:	d002      	beq.n	8001214 <prvTakeTwoMutexesReturnInDifferentOrder+0xb8>
	{
		xErrorDetected = pdTRUE;
 800120e:	4b1b      	ldr	r3, [pc, #108]	; (800127c <prvTakeTwoMutexesReturnInDifferentOrder+0x120>)
 8001210:	2201      	movs	r2, #1
 8001212:	601a      	str	r2, [r3, #0]
	#endif

	/* The guarded variable is only incremented by the medium priority task,
	which still should not have executed as this task should remain at the
	higher priority, ensure this is the case. */
	if( ulGuardedVariable != 0 )
 8001214:	4b1a      	ldr	r3, [pc, #104]	; (8001280 <prvTakeTwoMutexesReturnInDifferentOrder+0x124>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d002      	beq.n	8001222 <prvTakeTwoMutexesReturnInDifferentOrder+0xc6>
	{
		xErrorDetected = pdTRUE;
 800121c:	4b17      	ldr	r3, [pc, #92]	; (800127c <prvTakeTwoMutexesReturnInDifferentOrder+0x120>)
 800121e:	2201      	movs	r2, #1
 8001220:	601a      	str	r2, [r3, #0]
	}

	if( uxTaskPriorityGet( NULL ) != genqMUTEX_HIGH_PRIORITY )
 8001222:	2000      	movs	r0, #0
 8001224:	f004 faa4 	bl	8005770 <uxTaskPriorityGet>
 8001228:	4603      	mov	r3, r0
 800122a:	2b03      	cmp	r3, #3
 800122c:	d002      	beq.n	8001234 <prvTakeTwoMutexesReturnInDifferentOrder+0xd8>
	{
		xErrorDetected = pdTRUE;
 800122e:	4b13      	ldr	r3, [pc, #76]	; (800127c <prvTakeTwoMutexesReturnInDifferentOrder+0x120>)
 8001230:	2201      	movs	r2, #1
 8001232:	601a      	str	r2, [r3, #0]
	This time the priority of this task should be disinherited back to the
	priority to which it was set while the mutex was held.  This means
	the medium priority task should execute and increment the guarded
	variable.   When this task next	runs both the high and medium priority
	tasks will have been suspended again. */
	if( xSemaphoreGive( xLocalMutex ) != pdPASS )
 8001234:	2300      	movs	r3, #0
 8001236:	2200      	movs	r2, #0
 8001238:	2100      	movs	r1, #0
 800123a:	6838      	ldr	r0, [r7, #0]
 800123c:	f003 f8e2 	bl	8004404 <xQueueGenericSend>
 8001240:	4603      	mov	r3, r0
 8001242:	2b01      	cmp	r3, #1
 8001244:	d002      	beq.n	800124c <prvTakeTwoMutexesReturnInDifferentOrder+0xf0>
	{
		xErrorDetected = pdTRUE;
 8001246:	4b0d      	ldr	r3, [pc, #52]	; (800127c <prvTakeTwoMutexesReturnInDifferentOrder+0x120>)
 8001248:	2201      	movs	r2, #1
 800124a:	601a      	str	r2, [r3, #0]
	#if configUSE_PREEMPTION == 0
		taskYIELD();
	#endif

	/* Check the guarded variable did indeed increment... */
	if( ulGuardedVariable != 1 )
 800124c:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <prvTakeTwoMutexesReturnInDifferentOrder+0x124>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2b01      	cmp	r3, #1
 8001252:	d002      	beq.n	800125a <prvTakeTwoMutexesReturnInDifferentOrder+0xfe>
	{
		xErrorDetected = pdTRUE;
 8001254:	4b09      	ldr	r3, [pc, #36]	; (800127c <prvTakeTwoMutexesReturnInDifferentOrder+0x120>)
 8001256:	2201      	movs	r2, #1
 8001258:	601a      	str	r2, [r3, #0]
	}

	/* ... and that the priority of this task has been disinherited to
	genqMUTEX_TEST_PRIORITY. */
	if( uxTaskPriorityGet( NULL ) != genqMUTEX_TEST_PRIORITY )
 800125a:	2000      	movs	r0, #0
 800125c:	f004 fa88 	bl	8005770 <uxTaskPriorityGet>
 8001260:	4603      	mov	r3, r0
 8001262:	2b01      	cmp	r3, #1
 8001264:	d002      	beq.n	800126c <prvTakeTwoMutexesReturnInDifferentOrder+0x110>
	{
		xErrorDetected = pdTRUE;
 8001266:	4b05      	ldr	r3, [pc, #20]	; (800127c <prvTakeTwoMutexesReturnInDifferentOrder+0x120>)
 8001268:	2201      	movs	r2, #1
 800126a:	601a      	str	r2, [r3, #0]
	}

	/* Set the priority of this task back to its original value, ready for
	the next loop around this test. */
	vTaskPrioritySet( NULL, genqMUTEX_LOW_PRIORITY );
 800126c:	2100      	movs	r1, #0
 800126e:	2000      	movs	r0, #0
 8001270:	f004 fa98 	bl	80057a4 <vTaskPrioritySet>
}
 8001274:	bf00      	nop
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20000064 	.word	0x20000064
 8001280:	20000070 	.word	0x20000070
 8001284:	20000074 	.word	0x20000074
 8001288:	20000078 	.word	0x20000078

0800128c <prvTakeTwoMutexesReturnInSameOrder>:
/*-----------------------------------------------------------*/

static void prvTakeTwoMutexesReturnInSameOrder( SemaphoreHandle_t xMutex, SemaphoreHandle_t xLocalMutex )
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
	/* Take the mutex.  It should be available now. */
	if( xSemaphoreTake( xMutex, intsemNO_BLOCK ) != pdPASS )
 8001296:	2300      	movs	r3, #0
 8001298:	2200      	movs	r2, #0
 800129a:	2100      	movs	r1, #0
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f003 fc15 	bl	8004acc <xQueueGenericReceive>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d002      	beq.n	80012ae <prvTakeTwoMutexesReturnInSameOrder+0x22>
	{
		xErrorDetected = pdTRUE;
 80012a8:	4b38      	ldr	r3, [pc, #224]	; (800138c <prvTakeTwoMutexesReturnInSameOrder+0x100>)
 80012aa:	2201      	movs	r2, #1
 80012ac:	601a      	str	r2, [r3, #0]
	}

	/* Set the guarded variable to a known start value. */
	ulGuardedVariable = 0;
 80012ae:	4b38      	ldr	r3, [pc, #224]	; (8001390 <prvTakeTwoMutexesReturnInSameOrder+0x104>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]

	/* This task's priority should be as per that assigned when the task was
	created. */
	if( uxTaskPriorityGet( NULL ) != genqMUTEX_LOW_PRIORITY )
 80012b4:	2000      	movs	r0, #0
 80012b6:	f004 fa5b 	bl	8005770 <uxTaskPriorityGet>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d002      	beq.n	80012c6 <prvTakeTwoMutexesReturnInSameOrder+0x3a>
	{
		xErrorDetected = pdTRUE;
 80012c0:	4b32      	ldr	r3, [pc, #200]	; (800138c <prvTakeTwoMutexesReturnInSameOrder+0x100>)
 80012c2:	2201      	movs	r2, #1
 80012c4:	601a      	str	r2, [r3, #0]
	}

	/* Now unsuspend the high priority task.  This will attempt to take the
	mutex, and block when it finds it cannot obtain it. */
	vTaskResume( xHighPriorityMutexTask );
 80012c6:	4b33      	ldr	r3, [pc, #204]	; (8001394 <prvTakeTwoMutexesReturnInSameOrder+0x108>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f004 fbec 	bl	8005aa8 <vTaskResume>
	}
	#endif /* INCLUDE_eTaskGetState */

	/* The priority of the high priority task should now have been inherited
	as by now it will have attempted to get the mutex. */
	if( uxTaskPriorityGet( NULL ) != genqMUTEX_HIGH_PRIORITY )
 80012d0:	2000      	movs	r0, #0
 80012d2:	f004 fa4d 	bl	8005770 <uxTaskPriorityGet>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b03      	cmp	r3, #3
 80012da:	d002      	beq.n	80012e2 <prvTakeTwoMutexesReturnInSameOrder+0x56>
	{
		xErrorDetected = pdTRUE;
 80012dc:	4b2b      	ldr	r3, [pc, #172]	; (800138c <prvTakeTwoMutexesReturnInSameOrder+0x100>)
 80012de:	2201      	movs	r2, #1
 80012e0:	601a      	str	r2, [r3, #0]
	}

	/* Now unsuspend the medium priority task.  This should not run as the
	inherited priority of this task is above that of the medium priority
	task. */
	vTaskResume( xMediumPriorityMutexTask );
 80012e2:	4b2d      	ldr	r3, [pc, #180]	; (8001398 <prvTakeTwoMutexesReturnInSameOrder+0x10c>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f004 fbde 	bl	8005aa8 <vTaskResume>

	/* If the medium priority task did run then it will have incremented the
	guarded variable. */
	if( ulGuardedVariable != 0 )
 80012ec:	4b28      	ldr	r3, [pc, #160]	; (8001390 <prvTakeTwoMutexesReturnInSameOrder+0x104>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d002      	beq.n	80012fa <prvTakeTwoMutexesReturnInSameOrder+0x6e>
	{
		xErrorDetected = pdTRUE;
 80012f4:	4b25      	ldr	r3, [pc, #148]	; (800138c <prvTakeTwoMutexesReturnInSameOrder+0x100>)
 80012f6:	2201      	movs	r2, #1
 80012f8:	601a      	str	r2, [r3, #0]
	}

	/* Take the local mutex too, so two mutexes are now held. */
	if( xSemaphoreTake( xLocalMutex, intsemNO_BLOCK ) != pdPASS )
 80012fa:	2300      	movs	r3, #0
 80012fc:	2200      	movs	r2, #0
 80012fe:	2100      	movs	r1, #0
 8001300:	6838      	ldr	r0, [r7, #0]
 8001302:	f003 fbe3 	bl	8004acc <xQueueGenericReceive>
 8001306:	4603      	mov	r3, r0
 8001308:	2b01      	cmp	r3, #1
 800130a:	d002      	beq.n	8001312 <prvTakeTwoMutexesReturnInSameOrder+0x86>
	{
		xErrorDetected = pdTRUE;
 800130c:	4b1f      	ldr	r3, [pc, #124]	; (800138c <prvTakeTwoMutexesReturnInSameOrder+0x100>)
 800130e:	2201      	movs	r2, #1
 8001310:	601a      	str	r2, [r3, #0]
	not	yet be disinherited because the shared mutex is still held.  This is a
	simplification to allow FreeRTOS to be integrated with middleware that
	attempts to hold multiple mutexes without bloating the code with complex
	algorithms.  It is possible that the high priority mutex task will
	execute as it shares a priority with this task. */
	if( xSemaphoreGive( xLocalMutex ) != pdPASS )
 8001312:	2300      	movs	r3, #0
 8001314:	2200      	movs	r2, #0
 8001316:	2100      	movs	r1, #0
 8001318:	6838      	ldr	r0, [r7, #0]
 800131a:	f003 f873 	bl	8004404 <xQueueGenericSend>
 800131e:	4603      	mov	r3, r0
 8001320:	2b01      	cmp	r3, #1
 8001322:	d002      	beq.n	800132a <prvTakeTwoMutexesReturnInSameOrder+0x9e>
	{
		xErrorDetected = pdTRUE;
 8001324:	4b19      	ldr	r3, [pc, #100]	; (800138c <prvTakeTwoMutexesReturnInSameOrder+0x100>)
 8001326:	2201      	movs	r2, #1
 8001328:	601a      	str	r2, [r3, #0]
	#endif

	/* The guarded variable is only incremented by the medium priority task,
	which still should not have executed as this task should remain at the
	higher priority, ensure this is the case. */
	if( ulGuardedVariable != 0 )
 800132a:	4b19      	ldr	r3, [pc, #100]	; (8001390 <prvTakeTwoMutexesReturnInSameOrder+0x104>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d002      	beq.n	8001338 <prvTakeTwoMutexesReturnInSameOrder+0xac>
	{
		xErrorDetected = pdTRUE;
 8001332:	4b16      	ldr	r3, [pc, #88]	; (800138c <prvTakeTwoMutexesReturnInSameOrder+0x100>)
 8001334:	2201      	movs	r2, #1
 8001336:	601a      	str	r2, [r3, #0]
	}

	if( uxTaskPriorityGet( NULL ) != genqMUTEX_HIGH_PRIORITY )
 8001338:	2000      	movs	r0, #0
 800133a:	f004 fa19 	bl	8005770 <uxTaskPriorityGet>
 800133e:	4603      	mov	r3, r0
 8001340:	2b03      	cmp	r3, #3
 8001342:	d002      	beq.n	800134a <prvTakeTwoMutexesReturnInSameOrder+0xbe>
	{
		xErrorDetected = pdTRUE;
 8001344:	4b11      	ldr	r3, [pc, #68]	; (800138c <prvTakeTwoMutexesReturnInSameOrder+0x100>)
 8001346:	2201      	movs	r2, #1
 8001348:	601a      	str	r2, [r3, #0]
	/* Now also give back the shared mutex, taking the held count back to 0.
	This time the priority of this task should be disinherited back to the
	priority at which it was created.  This means the medium priority task
	should execute and increment the guarded variable.  When this task next runs
	both the high and medium priority tasks will have been suspended again. */
	if( xSemaphoreGive( xMutex ) != pdPASS )
 800134a:	2300      	movs	r3, #0
 800134c:	2200      	movs	r2, #0
 800134e:	2100      	movs	r1, #0
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f003 f857 	bl	8004404 <xQueueGenericSend>
 8001356:	4603      	mov	r3, r0
 8001358:	2b01      	cmp	r3, #1
 800135a:	d002      	beq.n	8001362 <prvTakeTwoMutexesReturnInSameOrder+0xd6>
	{
		xErrorDetected = pdTRUE;
 800135c:	4b0b      	ldr	r3, [pc, #44]	; (800138c <prvTakeTwoMutexesReturnInSameOrder+0x100>)
 800135e:	2201      	movs	r2, #1
 8001360:	601a      	str	r2, [r3, #0]
	#if configUSE_PREEMPTION == 0
		taskYIELD();
	#endif

	/* Check the guarded variable did indeed increment... */
	if( ulGuardedVariable != 1 )
 8001362:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <prvTakeTwoMutexesReturnInSameOrder+0x104>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2b01      	cmp	r3, #1
 8001368:	d002      	beq.n	8001370 <prvTakeTwoMutexesReturnInSameOrder+0xe4>
	{
		xErrorDetected = pdTRUE;
 800136a:	4b08      	ldr	r3, [pc, #32]	; (800138c <prvTakeTwoMutexesReturnInSameOrder+0x100>)
 800136c:	2201      	movs	r2, #1
 800136e:	601a      	str	r2, [r3, #0]
	}

	/* ... and that the priority of this task has been disinherited to
	genqMUTEX_LOW_PRIORITY. */
	if( uxTaskPriorityGet( NULL ) != genqMUTEX_LOW_PRIORITY )
 8001370:	2000      	movs	r0, #0
 8001372:	f004 f9fd 	bl	8005770 <uxTaskPriorityGet>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d002      	beq.n	8001382 <prvTakeTwoMutexesReturnInSameOrder+0xf6>
	{
		xErrorDetected = pdTRUE;
 800137c:	4b03      	ldr	r3, [pc, #12]	; (800138c <prvTakeTwoMutexesReturnInSameOrder+0x100>)
 800137e:	2201      	movs	r2, #1
 8001380:	601a      	str	r2, [r3, #0]
	}
}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000064 	.word	0x20000064
 8001390:	20000070 	.word	0x20000070
 8001394:	20000074 	.word	0x20000074
 8001398:	20000078 	.word	0x20000078

0800139c <prvLowPriorityMutexTask>:
/*-----------------------------------------------------------*/

static void prvLowPriorityMutexTask( void *pvParameters )
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
SemaphoreHandle_t xMutex = ( SemaphoreHandle_t ) pvParameters, xLocalMutex;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	617b      	str	r3, [r7, #20]
		/* Queue a message for printing to say the task has started. */
		vPrintDisplayMessage( &pcTaskStartMsg );
	#endif

	/* The local mutex is used to check the 'mutexs held' count. */
	xLocalMutex = xSemaphoreCreateMutex();
 80013a8:	2001      	movs	r0, #1
 80013aa:	f002 ff55 	bl	8004258 <xQueueCreateMutex>
 80013ae:	6138      	str	r0, [r7, #16]
	configASSERT( xLocalMutex );
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d109      	bne.n	80013ca <prvLowPriorityMutexTask+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80013b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013ba:	f383 8811 	msr	BASEPRI, r3
 80013be:	f3bf 8f6f 	isb	sy
 80013c2:	f3bf 8f4f 	dsb	sy
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	e7fe      	b.n	80013c8 <prvLowPriorityMutexTask+0x2c>
	for( ;; )
	{
		/* The first tests exercise the priority inheritance when two mutexes
		are taken then returned in a different order to which they were
		taken. */
		prvTakeTwoMutexesReturnInDifferentOrder( xMutex, xLocalMutex );
 80013ca:	6939      	ldr	r1, [r7, #16]
 80013cc:	6978      	ldr	r0, [r7, #20]
 80013ce:	f7ff fec5 	bl	800115c <prvTakeTwoMutexesReturnInDifferentOrder>

		/* Just to show this task is still running. */
		ulLoopCounter2++;
 80013d2:	4b07      	ldr	r3, [pc, #28]	; (80013f0 <prvLowPriorityMutexTask+0x54>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	3301      	adds	r3, #1
 80013d8:	4a05      	ldr	r2, [pc, #20]	; (80013f0 <prvLowPriorityMutexTask+0x54>)
 80013da:	6013      	str	r3, [r2, #0]
			taskYIELD();
		#endif

		/* The second tests exercise the priority inheritance when two mutexes
		are taken then returned in the same order in which they were taken. */
		prvTakeTwoMutexesReturnInSameOrder( xMutex, xLocalMutex );
 80013dc:	6939      	ldr	r1, [r7, #16]
 80013de:	6978      	ldr	r0, [r7, #20]
 80013e0:	f7ff ff54 	bl	800128c <prvTakeTwoMutexesReturnInSameOrder>

		/* Just to show this task is still running. */
		ulLoopCounter2++;
 80013e4:	4b02      	ldr	r3, [pc, #8]	; (80013f0 <prvLowPriorityMutexTask+0x54>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	3301      	adds	r3, #1
 80013ea:	4a01      	ldr	r2, [pc, #4]	; (80013f0 <prvLowPriorityMutexTask+0x54>)
 80013ec:	6013      	str	r3, [r2, #0]
		prvTakeTwoMutexesReturnInDifferentOrder( xMutex, xLocalMutex );
 80013ee:	e7ec      	b.n	80013ca <prvLowPriorityMutexTask+0x2e>
 80013f0:	2000006c 	.word	0x2000006c

080013f4 <prvMediumPriorityMutexTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvMediumPriorityMutexTask( void *pvParameters )
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* The medium priority task starts by suspending itself.  The low
		priority task will unsuspend this task when required. */
		vTaskSuspend( NULL );
 80013fc:	2000      	movs	r0, #0
 80013fe:	f004 fa8d 	bl	800591c <vTaskSuspend>

		/* When this task unsuspends all it does is increment the guarded
		variable, this is so the low priority task knows that it has
		executed. */
		ulGuardedVariable++;
 8001402:	4b03      	ldr	r3, [pc, #12]	; (8001410 <prvMediumPriorityMutexTask+0x1c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	3301      	adds	r3, #1
 8001408:	4a01      	ldr	r2, [pc, #4]	; (8001410 <prvMediumPriorityMutexTask+0x1c>)
 800140a:	6013      	str	r3, [r2, #0]
		vTaskSuspend( NULL );
 800140c:	e7f6      	b.n	80013fc <prvMediumPriorityMutexTask+0x8>
 800140e:	bf00      	nop
 8001410:	20000070 	.word	0x20000070

08001414 <prvHighPriorityMutexTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvHighPriorityMutexTask( void *pvParameters )
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
SemaphoreHandle_t xMutex = ( SemaphoreHandle_t ) pvParameters;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	60fb      	str	r3, [r7, #12]

	for( ;; )
	{
		/* The high priority task starts by suspending itself.  The low
		priority task will unsuspend this task when required. */
		vTaskSuspend( NULL );
 8001420:	2000      	movs	r0, #0
 8001422:	f004 fa7b 	bl	800591c <vTaskSuspend>

		/* When this task unsuspends all it does is attempt to obtain
		the mutex.  It should find the mutex is not available so a
		block time is specified. */
		if( xSemaphoreTake( xMutex, portMAX_DELAY ) != pdPASS )
 8001426:	2300      	movs	r3, #0
 8001428:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800142c:	2100      	movs	r1, #0
 800142e:	68f8      	ldr	r0, [r7, #12]
 8001430:	f003 fb4c 	bl	8004acc <xQueueGenericReceive>
 8001434:	4603      	mov	r3, r0
 8001436:	2b01      	cmp	r3, #1
 8001438:	d002      	beq.n	8001440 <prvHighPriorityMutexTask+0x2c>
		{
			xErrorDetected = pdTRUE;
 800143a:	4b08      	ldr	r3, [pc, #32]	; (800145c <prvHighPriorityMutexTask+0x48>)
 800143c:	2201      	movs	r2, #1
 800143e:	601a      	str	r2, [r3, #0]
		}

		/* When the mutex is eventually obtained it is just given back before
		returning to suspend ready for the next cycle. */
		if( xSemaphoreGive( xMutex ) != pdPASS )
 8001440:	2300      	movs	r3, #0
 8001442:	2200      	movs	r2, #0
 8001444:	2100      	movs	r1, #0
 8001446:	68f8      	ldr	r0, [r7, #12]
 8001448:	f002 ffdc 	bl	8004404 <xQueueGenericSend>
 800144c:	4603      	mov	r3, r0
 800144e:	2b01      	cmp	r3, #1
 8001450:	d0e6      	beq.n	8001420 <prvHighPriorityMutexTask+0xc>
		{
			xErrorDetected = pdTRUE;
 8001452:	4b02      	ldr	r3, [pc, #8]	; (800145c <prvHighPriorityMutexTask+0x48>)
 8001454:	2201      	movs	r2, #1
 8001456:	601a      	str	r2, [r3, #0]
		vTaskSuspend( NULL );
 8001458:	e7e2      	b.n	8001420 <prvHighPriorityMutexTask+0xc>
 800145a:	bf00      	nop
 800145c:	20000064 	.word	0x20000064

08001460 <xAreGenericQueueTasksStillRunning>:
/*-----------------------------------------------------------*/


/* This is called to check that all the created tasks are still running. */
BaseType_t xAreGenericQueueTasksStillRunning( void )
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
static uint32_t ulLastLoopCounter = 0, ulLastLoopCounter2 = 0;

	/* If the demo task is still running then we expect the loop counters to
	have incremented since this function was last called. */
	if( ulLastLoopCounter == ulLoopCounter )
 8001464:	4b12      	ldr	r3, [pc, #72]	; (80014b0 <xAreGenericQueueTasksStillRunning+0x50>)
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <xAreGenericQueueTasksStillRunning+0x54>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	429a      	cmp	r2, r3
 800146e:	d102      	bne.n	8001476 <xAreGenericQueueTasksStillRunning+0x16>
	{
		xErrorDetected = pdTRUE;
 8001470:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <xAreGenericQueueTasksStillRunning+0x58>)
 8001472:	2201      	movs	r2, #1
 8001474:	601a      	str	r2, [r3, #0]
	}

	if( ulLastLoopCounter2 == ulLoopCounter2 )
 8001476:	4b11      	ldr	r3, [pc, #68]	; (80014bc <xAreGenericQueueTasksStillRunning+0x5c>)
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <xAreGenericQueueTasksStillRunning+0x60>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	429a      	cmp	r2, r3
 8001480:	d102      	bne.n	8001488 <xAreGenericQueueTasksStillRunning+0x28>
	{
		xErrorDetected = pdTRUE;
 8001482:	4b0d      	ldr	r3, [pc, #52]	; (80014b8 <xAreGenericQueueTasksStillRunning+0x58>)
 8001484:	2201      	movs	r2, #1
 8001486:	601a      	str	r2, [r3, #0]
	}

	ulLastLoopCounter = ulLoopCounter;
 8001488:	4b0a      	ldr	r3, [pc, #40]	; (80014b4 <xAreGenericQueueTasksStillRunning+0x54>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a08      	ldr	r2, [pc, #32]	; (80014b0 <xAreGenericQueueTasksStillRunning+0x50>)
 800148e:	6013      	str	r3, [r2, #0]
	ulLastLoopCounter2 = ulLoopCounter2;
 8001490:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <xAreGenericQueueTasksStillRunning+0x60>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a09      	ldr	r2, [pc, #36]	; (80014bc <xAreGenericQueueTasksStillRunning+0x5c>)
 8001496:	6013      	str	r3, [r2, #0]

	/* Errors detected in the task itself will have latched xErrorDetected
	to true. */

	return ( BaseType_t ) !xErrorDetected;
 8001498:	4b07      	ldr	r3, [pc, #28]	; (80014b8 <xAreGenericQueueTasksStillRunning+0x58>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2b00      	cmp	r3, #0
 800149e:	bf0c      	ite	eq
 80014a0:	2301      	moveq	r3, #1
 80014a2:	2300      	movne	r3, #0
 80014a4:	b2db      	uxtb	r3, r3
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	2000007c 	.word	0x2000007c
 80014b4:	20000068 	.word	0x20000068
 80014b8:	20000064 	.word	0x20000064
 80014bc:	20000080 	.word	0x20000080
 80014c0:	2000006c 	.word	0x2000006c

080014c4 <vStartPolledQueueTasks>:
/* Variables that are used to check that the tasks are still running with no errors. */
static volatile short sPollingConsumerCount = 0, sPollingProducerCount = 0;
/*-----------------------------------------------------------*/

void vStartPolledQueueTasks( unsigned portBASE_TYPE uxPriority )
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af02      	add	r7, sp, #8
 80014ca:	6078      	str	r0, [r7, #4]
static QueueHandle_t xPolledQueue;
const unsigned portBASE_TYPE uxQueueSize = 10;
 80014cc:	230a      	movs	r3, #10
 80014ce:	60fb      	str	r3, [r7, #12]

	/* Create the queue used by the producer and consumer. */
	xPolledQueue = xQueueCreate( uxQueueSize, ( unsigned portBASE_TYPE ) sizeof( unsigned short ) );
 80014d0:	2200      	movs	r2, #0
 80014d2:	2102      	movs	r1, #2
 80014d4:	68f8      	ldr	r0, [r7, #12]
 80014d6:	f002 fe1b 	bl	8004110 <xQueueGenericCreate>
 80014da:	4602      	mov	r2, r0
 80014dc:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <vStartPolledQueueTasks+0x4c>)
 80014de:	601a      	str	r2, [r3, #0]

	/* Spawn the producer and consumer. */
	xTaskCreate( vPolledQueueConsumer, "QConsNB", pollqSTACK_SIZE, ( void * ) &xPolledQueue, uxPriority, NULL );
 80014e0:	2300      	movs	r3, #0
 80014e2:	9301      	str	r3, [sp, #4]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	9300      	str	r3, [sp, #0]
 80014e8:	4b09      	ldr	r3, [pc, #36]	; (8001510 <vStartPolledQueueTasks+0x4c>)
 80014ea:	2282      	movs	r2, #130	; 0x82
 80014ec:	4909      	ldr	r1, [pc, #36]	; (8001514 <vStartPolledQueueTasks+0x50>)
 80014ee:	480a      	ldr	r0, [pc, #40]	; (8001518 <vStartPolledQueueTasks+0x54>)
 80014f0:	f003 fe8e 	bl	8005210 <xTaskCreate>
	xTaskCreate( vPolledQueueProducer, "QProdNB", pollqSTACK_SIZE, ( void * ) &xPolledQueue, uxPriority, NULL );
 80014f4:	2300      	movs	r3, #0
 80014f6:	9301      	str	r3, [sp, #4]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	9300      	str	r3, [sp, #0]
 80014fc:	4b04      	ldr	r3, [pc, #16]	; (8001510 <vStartPolledQueueTasks+0x4c>)
 80014fe:	2282      	movs	r2, #130	; 0x82
 8001500:	4906      	ldr	r1, [pc, #24]	; (800151c <vStartPolledQueueTasks+0x58>)
 8001502:	4807      	ldr	r0, [pc, #28]	; (8001520 <vStartPolledQueueTasks+0x5c>)
 8001504:	f003 fe84 	bl	8005210 <xTaskCreate>
}
 8001508:	bf00      	nop
 800150a:	3710      	adds	r7, #16
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20000088 	.word	0x20000088
 8001514:	080093f0 	.word	0x080093f0
 8001518:	080015c5 	.word	0x080015c5
 800151c:	080093f8 	.word	0x080093f8
 8001520:	08001525 	.word	0x08001525

08001524 <vPolledQueueProducer>:
/*-----------------------------------------------------------*/

static void vPolledQueueProducer( void *pvParameters )
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b08a      	sub	sp, #40	; 0x28
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
unsigned short usValue = 0, usLoop;
 800152c:	2300      	movs	r3, #0
 800152e:	82fb      	strh	r3, [r7, #22]
QueueHandle_t *pxQueue;
const TickType_t xDelay = ( TickType_t ) 200 / portTICK_PERIOD_MS;
 8001530:	23c8      	movs	r3, #200	; 0xc8
 8001532:	623b      	str	r3, [r7, #32]
const unsigned short usNumToProduce = 3;
 8001534:	2303      	movs	r3, #3
 8001536:	83fb      	strh	r3, [r7, #30]
const char * const pcTaskStartMsg = "Polled queue producer started.\r\n";
 8001538:	4b1f      	ldr	r3, [pc, #124]	; (80015b8 <vPolledQueueProducer+0x94>)
 800153a:	613b      	str	r3, [r7, #16]
const char * const pcTaskErrorMsg = "Could not post on polled queue.\r\n";
 800153c:	4b1f      	ldr	r3, [pc, #124]	; (80015bc <vPolledQueueProducer+0x98>)
 800153e:	60fb      	str	r3, [r7, #12]
short sError = pdFALSE;
 8001540:	2300      	movs	r3, #0
 8001542:	84bb      	strh	r3, [r7, #36]	; 0x24

	/* Queue a message for printing to say the task has started. */
	vPrintDisplayMessage( &pcTaskStartMsg );
 8001544:	f107 0310 	add.w	r3, r7, #16
 8001548:	4618      	mov	r0, r3
 800154a:	f001 fdb3 	bl	80030b4 <vPrintDisplayMessage>

	/* The queue being used is passed in as the parameter. */
	pxQueue = ( QueueHandle_t * ) pvParameters;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	61bb      	str	r3, [r7, #24]

	for( ;; )
	{		
		for( usLoop = 0; usLoop < usNumToProduce; ++usLoop )
 8001552:	2300      	movs	r3, #0
 8001554:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001556:	e026      	b.n	80015a6 <vPolledQueueProducer+0x82>
		{
			/* Send an incrementing number on the queue without blocking. */
			if( xQueueSendToBack( *pxQueue, ( void * ) &usValue, ( TickType_t ) 0 ) != pdPASS )
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	6818      	ldr	r0, [r3, #0]
 800155c:	f107 0116 	add.w	r1, r7, #22
 8001560:	2300      	movs	r3, #0
 8001562:	2200      	movs	r2, #0
 8001564:	f002 ff4e 	bl	8004404 <xQueueGenericSend>
 8001568:	4603      	mov	r3, r0
 800156a:	2b01      	cmp	r3, #1
 800156c:	d007      	beq.n	800157e <vPolledQueueProducer+0x5a>
			{
				/* We should never find the queue full - this is an error. */
				vPrintDisplayMessage( &pcTaskErrorMsg );
 800156e:	f107 030c 	add.w	r3, r7, #12
 8001572:	4618      	mov	r0, r3
 8001574:	f001 fd9e 	bl	80030b4 <vPrintDisplayMessage>
				sError = pdTRUE;
 8001578:	2301      	movs	r3, #1
 800157a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800157c:	e010      	b.n	80015a0 <vPolledQueueProducer+0x7c>
			}
			else
			{
				if( sError == pdFALSE )
 800157e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001582:	2b00      	cmp	r3, #0
 8001584:	d108      	bne.n	8001598 <vPolledQueueProducer+0x74>
				{
					/* If an error has ever been recorded we stop incrementing the 
					check variable. */
					++sPollingProducerCount;
 8001586:	4b0e      	ldr	r3, [pc, #56]	; (80015c0 <vPolledQueueProducer+0x9c>)
 8001588:	881b      	ldrh	r3, [r3, #0]
 800158a:	b21b      	sxth	r3, r3
 800158c:	b29b      	uxth	r3, r3
 800158e:	3301      	adds	r3, #1
 8001590:	b29b      	uxth	r3, r3
 8001592:	b21a      	sxth	r2, r3
 8001594:	4b0a      	ldr	r3, [pc, #40]	; (80015c0 <vPolledQueueProducer+0x9c>)
 8001596:	801a      	strh	r2, [r3, #0]
				}

				/* Update the value we are going to post next time around. */
				++usValue;
 8001598:	8afb      	ldrh	r3, [r7, #22]
 800159a:	3301      	adds	r3, #1
 800159c:	b29b      	uxth	r3, r3
 800159e:	82fb      	strh	r3, [r7, #22]
		for( usLoop = 0; usLoop < usNumToProduce; ++usLoop )
 80015a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015a2:	3301      	adds	r3, #1
 80015a4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80015a6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80015a8:	8bfb      	ldrh	r3, [r7, #30]
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d3d4      	bcc.n	8001558 <vPolledQueueProducer+0x34>
			}
		}

		/* Wait before we start posting again to ensure the consumer runs and 
		empties the queue. */
		vTaskDelay( xDelay );
 80015ae:	6a38      	ldr	r0, [r7, #32]
 80015b0:	f004 f8a6 	bl	8005700 <vTaskDelay>
		for( usLoop = 0; usLoop < usNumToProduce; ++usLoop )
 80015b4:	e7cd      	b.n	8001552 <vPolledQueueProducer+0x2e>
 80015b6:	bf00      	nop
 80015b8:	08009400 	.word	0x08009400
 80015bc:	08009424 	.word	0x08009424
 80015c0:	20000086 	.word	0x20000086

080015c4 <vPolledQueueConsumer>:
	}
}
/*-----------------------------------------------------------*/

static void vPolledQueueConsumer( void *pvParameters )
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b088      	sub	sp, #32
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
unsigned short usData, usExpectedValue = 0;
 80015cc:	2300      	movs	r3, #0
 80015ce:	83fb      	strh	r3, [r7, #30]
QueueHandle_t *pxQueue;
const TickType_t xDelay = ( TickType_t ) 200 / portTICK_PERIOD_MS;
 80015d0:	23c8      	movs	r3, #200	; 0xc8
 80015d2:	61bb      	str	r3, [r7, #24]
const char * const pcTaskStartMsg = "Polled queue consumer started.\r\n";
 80015d4:	4b21      	ldr	r3, [pc, #132]	; (800165c <vPolledQueueConsumer+0x98>)
 80015d6:	60fb      	str	r3, [r7, #12]
const char * const pcTaskErrorMsg = "Incorrect value received on polled queue.\r\n";
 80015d8:	4b21      	ldr	r3, [pc, #132]	; (8001660 <vPolledQueueConsumer+0x9c>)
 80015da:	60bb      	str	r3, [r7, #8]
short sError = pdFALSE;
 80015dc:	2300      	movs	r3, #0
 80015de:	83bb      	strh	r3, [r7, #28]

	/* Queue a message for printing to say the task has started. */
	vPrintDisplayMessage( &pcTaskStartMsg );
 80015e0:	f107 030c 	add.w	r3, r7, #12
 80015e4:	4618      	mov	r0, r3
 80015e6:	f001 fd65 	bl	80030b4 <vPrintDisplayMessage>

	/* The queue being used is passed in as the parameter. */
	pxQueue = ( QueueHandle_t * ) pvParameters;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	617b      	str	r3, [r7, #20]

	for( ;; )
	{		
		/* Loop until the queue is empty. */
		while( uxQueueMessagesWaiting( *pxQueue ) )
 80015ee:	e028      	b.n	8001642 <vPolledQueueConsumer+0x7e>
		{
			if( xQueueReceive( *pxQueue, &usData, ( TickType_t ) 0 ) == pdPASS )
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	6818      	ldr	r0, [r3, #0]
 80015f4:	f107 0112 	add.w	r1, r7, #18
 80015f8:	2300      	movs	r3, #0
 80015fa:	2200      	movs	r2, #0
 80015fc:	f003 fa66 	bl	8004acc <xQueueGenericReceive>
 8001600:	4603      	mov	r3, r0
 8001602:	2b01      	cmp	r3, #1
 8001604:	d11d      	bne.n	8001642 <vPolledQueueConsumer+0x7e>
			{
				if( usData != usExpectedValue )
 8001606:	8a7b      	ldrh	r3, [r7, #18]
 8001608:	8bfa      	ldrh	r2, [r7, #30]
 800160a:	429a      	cmp	r2, r3
 800160c:	d009      	beq.n	8001622 <vPolledQueueConsumer+0x5e>
				{
					/* This is not what we expected to receive so an error has 
					occurred. */
					vPrintDisplayMessage( &pcTaskErrorMsg );
 800160e:	f107 0308 	add.w	r3, r7, #8
 8001612:	4618      	mov	r0, r3
 8001614:	f001 fd4e 	bl	80030b4 <vPrintDisplayMessage>
					sError = pdTRUE;
 8001618:	2301      	movs	r3, #1
 800161a:	83bb      	strh	r3, [r7, #28]
					/* Catch-up to the value we received so our next expected value 
					should again be correct. */
					usExpectedValue = usData;
 800161c:	8a7b      	ldrh	r3, [r7, #18]
 800161e:	83fb      	strh	r3, [r7, #30]
 8001620:	e00c      	b.n	800163c <vPolledQueueConsumer+0x78>
				}
				else
				{
					if( sError == pdFALSE )
 8001622:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d108      	bne.n	800163c <vPolledQueueConsumer+0x78>
					{
						/* Only increment the check variable if no errors have 
						occurred. */
						++sPollingConsumerCount;
 800162a:	4b0e      	ldr	r3, [pc, #56]	; (8001664 <vPolledQueueConsumer+0xa0>)
 800162c:	881b      	ldrh	r3, [r3, #0]
 800162e:	b21b      	sxth	r3, r3
 8001630:	b29b      	uxth	r3, r3
 8001632:	3301      	adds	r3, #1
 8001634:	b29b      	uxth	r3, r3
 8001636:	b21a      	sxth	r2, r3
 8001638:	4b0a      	ldr	r3, [pc, #40]	; (8001664 <vPolledQueueConsumer+0xa0>)
 800163a:	801a      	strh	r2, [r3, #0]
					}
				}
				++usExpectedValue;
 800163c:	8bfb      	ldrh	r3, [r7, #30]
 800163e:	3301      	adds	r3, #1
 8001640:	83fb      	strh	r3, [r7, #30]
		while( uxQueueMessagesWaiting( *pxQueue ) )
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4618      	mov	r0, r3
 8001648:	f003 fc50 	bl	8004eec <uxQueueMessagesWaiting>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1ce      	bne.n	80015f0 <vPolledQueueConsumer+0x2c>
			}
		}

		/* Now the queue is empty we block, allowing the producer to place more 
		items in the queue. */
		vTaskDelay( xDelay );
 8001652:	69b8      	ldr	r0, [r7, #24]
 8001654:	f004 f854 	bl	8005700 <vTaskDelay>
		while( uxQueueMessagesWaiting( *pxQueue ) )
 8001658:	e7f3      	b.n	8001642 <vPolledQueueConsumer+0x7e>
 800165a:	bf00      	nop
 800165c:	08009448 	.word	0x08009448
 8001660:	0800946c 	.word	0x0800946c
 8001664:	20000084 	.word	0x20000084

08001668 <xArePollingQueuesStillRunning>:
}
/*-----------------------------------------------------------*/

/* This is called to check that all the created tasks are still running with no errors. */
portBASE_TYPE xArePollingQueuesStillRunning( void )
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
static short sLastPollingConsumerCount = 0, sLastPollingProducerCount = 0;
portBASE_TYPE xReturn;

	if( ( sLastPollingConsumerCount == sPollingConsumerCount ) ||
 800166e:	4b13      	ldr	r3, [pc, #76]	; (80016bc <xArePollingQueuesStillRunning+0x54>)
 8001670:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001674:	4b12      	ldr	r3, [pc, #72]	; (80016c0 <xArePollingQueuesStillRunning+0x58>)
 8001676:	881b      	ldrh	r3, [r3, #0]
 8001678:	b21b      	sxth	r3, r3
 800167a:	429a      	cmp	r2, r3
 800167c:	d007      	beq.n	800168e <xArePollingQueuesStillRunning+0x26>
		( sLastPollingProducerCount == sPollingProducerCount ) 
 800167e:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <xArePollingQueuesStillRunning+0x5c>)
 8001680:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001684:	4b10      	ldr	r3, [pc, #64]	; (80016c8 <xArePollingQueuesStillRunning+0x60>)
 8001686:	881b      	ldrh	r3, [r3, #0]
 8001688:	b21b      	sxth	r3, r3
	if( ( sLastPollingConsumerCount == sPollingConsumerCount ) ||
 800168a:	429a      	cmp	r2, r3
 800168c:	d102      	bne.n	8001694 <xArePollingQueuesStillRunning+0x2c>
	  )
	{
		xReturn = pdFALSE;
 800168e:	2300      	movs	r3, #0
 8001690:	607b      	str	r3, [r7, #4]
 8001692:	e001      	b.n	8001698 <xArePollingQueuesStillRunning+0x30>
	}
	else
	{
		xReturn = pdTRUE;
 8001694:	2301      	movs	r3, #1
 8001696:	607b      	str	r3, [r7, #4]
	}

	sLastPollingConsumerCount = sPollingConsumerCount;
 8001698:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <xArePollingQueuesStillRunning+0x58>)
 800169a:	881b      	ldrh	r3, [r3, #0]
 800169c:	b21a      	sxth	r2, r3
 800169e:	4b07      	ldr	r3, [pc, #28]	; (80016bc <xArePollingQueuesStillRunning+0x54>)
 80016a0:	801a      	strh	r2, [r3, #0]
	sLastPollingProducerCount = sPollingProducerCount;
 80016a2:	4b09      	ldr	r3, [pc, #36]	; (80016c8 <xArePollingQueuesStillRunning+0x60>)
 80016a4:	881b      	ldrh	r3, [r3, #0]
 80016a6:	b21a      	sxth	r2, r3
 80016a8:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <xArePollingQueuesStillRunning+0x5c>)
 80016aa:	801a      	strh	r2, [r3, #0]

	return xReturn;
 80016ac:	687b      	ldr	r3, [r7, #4]
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	2000008c 	.word	0x2000008c
 80016c0:	20000084 	.word	0x20000084
 80016c4:	2000008e 	.word	0x2000008e
 80016c8:	20000086 	.word	0x20000086

080016cc <vCreateBlockTimeTasks>:
static volatile UBaseType_t xRunIndicator;

/*-----------------------------------------------------------*/

void vCreateBlockTimeTasks( void )
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af02      	add	r7, sp, #8
	/* Create the queue on which the two tasks block. */
	xTestQueue = xQueueCreate( bktQUEUE_LENGTH, sizeof( BaseType_t ) );
 80016d2:	2200      	movs	r2, #0
 80016d4:	2104      	movs	r1, #4
 80016d6:	2005      	movs	r0, #5
 80016d8:	f002 fd1a 	bl	8004110 <xQueueGenericCreate>
 80016dc:	4602      	mov	r2, r0
 80016de:	4b11      	ldr	r3, [pc, #68]	; (8001724 <vCreateBlockTimeTasks+0x58>)
 80016e0:	601a      	str	r2, [r3, #0]

	if( xTestQueue != NULL )
 80016e2:	4b10      	ldr	r3, [pc, #64]	; (8001724 <vCreateBlockTimeTasks+0x58>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d019      	beq.n	800171e <vCreateBlockTimeTasks+0x52>
		is in use.  The queue registry is provided as a means for kernel aware
		debuggers to locate queues and has no purpose if a kernel aware
		debugger is not being used.  The call to vQueueAddToRegistry() will be
		removed by the pre-processor if configQUEUE_REGISTRY_SIZE is not
		defined or is defined to be less than 1. */
		vQueueAddToRegistry( xTestQueue, "Block_Time_Queue" );
 80016ea:	4b0e      	ldr	r3, [pc, #56]	; (8001724 <vCreateBlockTimeTasks+0x58>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	490e      	ldr	r1, [pc, #56]	; (8001728 <vCreateBlockTimeTasks+0x5c>)
 80016f0:	4618      	mov	r0, r3
 80016f2:	f003 fd29 	bl	8005148 <vQueueAddToRegistry>

		/* Create the two test tasks. */
		xTaskCreate( vPrimaryBlockTimeTestTask, "BTest1", configMINIMAL_STACK_SIZE, NULL, bktPRIMARY_PRIORITY, NULL );
 80016f6:	2300      	movs	r3, #0
 80016f8:	9301      	str	r3, [sp, #4]
 80016fa:	2302      	movs	r3, #2
 80016fc:	9300      	str	r3, [sp, #0]
 80016fe:	2300      	movs	r3, #0
 8001700:	2282      	movs	r2, #130	; 0x82
 8001702:	490a      	ldr	r1, [pc, #40]	; (800172c <vCreateBlockTimeTasks+0x60>)
 8001704:	480a      	ldr	r0, [pc, #40]	; (8001730 <vCreateBlockTimeTasks+0x64>)
 8001706:	f003 fd83 	bl	8005210 <xTaskCreate>
		xTaskCreate( vSecondaryBlockTimeTestTask, "BTest2", configMINIMAL_STACK_SIZE, NULL, bktSECONDARY_PRIORITY, &xSecondary );
 800170a:	4b0a      	ldr	r3, [pc, #40]	; (8001734 <vCreateBlockTimeTasks+0x68>)
 800170c:	9301      	str	r3, [sp, #4]
 800170e:	2301      	movs	r3, #1
 8001710:	9300      	str	r3, [sp, #0]
 8001712:	2300      	movs	r3, #0
 8001714:	2282      	movs	r2, #130	; 0x82
 8001716:	4908      	ldr	r1, [pc, #32]	; (8001738 <vCreateBlockTimeTasks+0x6c>)
 8001718:	4808      	ldr	r0, [pc, #32]	; (800173c <vCreateBlockTimeTasks+0x70>)
 800171a:	f003 fd79 	bl	8005210 <xTaskCreate>
	}
}
 800171e:	bf00      	nop
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	20000090 	.word	0x20000090
 8001728:	08009498 	.word	0x08009498
 800172c:	080094ac 	.word	0x080094ac
 8001730:	08001741 	.word	0x08001741
 8001734:	20000094 	.word	0x20000094
 8001738:	080094b4 	.word	0x080094b4
 800173c:	08001a1d 	.word	0x08001a1d

08001740 <vPrimaryBlockTimeTestTask>:
/*-----------------------------------------------------------*/

static void vPrimaryBlockTimeTestTask( void *pvParameters )
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b088      	sub	sp, #32
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
	{
		/*********************************************************************
		Test 0

		Basic vTaskDelay() and vTaskDelayUntil() tests. */
		prvBasicDelayTests();
 8001748:	f000 f9d4 	bl	8001af4 <prvBasicDelayTests>

		/*********************************************************************
		Test 1

		Simple block time wakeup test on queue receives. */
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 800174c:	2300      	movs	r3, #0
 800174e:	613b      	str	r3, [r7, #16]
 8001750:	e02e      	b.n	80017b0 <vPrimaryBlockTimeTestTask+0x70>
		{
			/* The queue is empty. Attempt to read from the queue using a block
			time.  When we wake, ensure the delta in time is as expected. */
			xTimeToBlock = ( TickType_t ) ( bktPRIMARY_BLOCK_TIME << xItem );
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	220a      	movs	r2, #10
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	61fb      	str	r3, [r7, #28]

			xTimeWhenBlocking = xTaskGetTickCount();
 800175c:	f004 fb04 	bl	8005d68 <xTaskGetTickCount>
 8001760:	61b8      	str	r0, [r7, #24]

			/* We should unblock after xTimeToBlock having not received
			anything on the queue. */
			if( xQueueReceive( xTestQueue, &xData, xTimeToBlock ) != errQUEUE_EMPTY )
 8001762:	4ba9      	ldr	r3, [pc, #676]	; (8001a08 <vPrimaryBlockTimeTestTask+0x2c8>)
 8001764:	6818      	ldr	r0, [r3, #0]
 8001766:	f107 010c 	add.w	r1, r7, #12
 800176a:	2300      	movs	r3, #0
 800176c:	69fa      	ldr	r2, [r7, #28]
 800176e:	f003 f9ad 	bl	8004acc <xQueueGenericReceive>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d002      	beq.n	800177e <vPrimaryBlockTimeTestTask+0x3e>
			{
				xErrorOccurred = pdTRUE;
 8001778:	4ba4      	ldr	r3, [pc, #656]	; (8001a0c <vPrimaryBlockTimeTestTask+0x2cc>)
 800177a:	2201      	movs	r2, #1
 800177c:	601a      	str	r2, [r3, #0]
			}

			/* How long were we blocked for? */
			xBlockedTime = xTaskGetTickCount() - xTimeWhenBlocking;
 800177e:	f004 faf3 	bl	8005d68 <xTaskGetTickCount>
 8001782:	4602      	mov	r2, r0
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	617b      	str	r3, [r7, #20]

			if( xBlockedTime < xTimeToBlock )
 800178a:	697a      	ldr	r2, [r7, #20]
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	429a      	cmp	r2, r3
 8001790:	d202      	bcs.n	8001798 <vPrimaryBlockTimeTestTask+0x58>
			{
				/* Should not have blocked for less than we requested. */
				xErrorOccurred = pdTRUE;
 8001792:	4b9e      	ldr	r3, [pc, #632]	; (8001a0c <vPrimaryBlockTimeTestTask+0x2cc>)
 8001794:	2201      	movs	r2, #1
 8001796:	601a      	str	r2, [r3, #0]
			}

			if( xBlockedTime > ( xTimeToBlock + bktALLOWABLE_MARGIN ) )
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	f103 020f 	add.w	r2, r3, #15
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d202      	bcs.n	80017aa <vPrimaryBlockTimeTestTask+0x6a>
			{
				/* Should not have blocked for longer than we requested,
				although we would not necessarily run as soon as we were
				unblocked so a margin is allowed. */
				xErrorOccurred = pdTRUE;
 80017a4:	4b99      	ldr	r3, [pc, #612]	; (8001a0c <vPrimaryBlockTimeTestTask+0x2cc>)
 80017a6:	2201      	movs	r2, #1
 80017a8:	601a      	str	r2, [r3, #0]
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	3301      	adds	r3, #1
 80017ae:	613b      	str	r3, [r7, #16]
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	2b04      	cmp	r3, #4
 80017b4:	ddcd      	ble.n	8001752 <vPrimaryBlockTimeTestTask+0x12>
		Test 2

		Simple block time wakeup test on queue sends.

		First fill the queue.  It should be empty so all sends should pass. */
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 80017b6:	2300      	movs	r3, #0
 80017b8:	613b      	str	r3, [r7, #16]
 80017ba:	e010      	b.n	80017de <vPrimaryBlockTimeTestTask+0x9e>
		{
			if( xQueueSend( xTestQueue, &xItem, bktDONT_BLOCK ) != pdPASS )
 80017bc:	4b92      	ldr	r3, [pc, #584]	; (8001a08 <vPrimaryBlockTimeTestTask+0x2c8>)
 80017be:	6818      	ldr	r0, [r3, #0]
 80017c0:	f107 0110 	add.w	r1, r7, #16
 80017c4:	2300      	movs	r3, #0
 80017c6:	2200      	movs	r2, #0
 80017c8:	f002 fe1c 	bl	8004404 <xQueueGenericSend>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d002      	beq.n	80017d8 <vPrimaryBlockTimeTestTask+0x98>
			{
				xErrorOccurred = pdTRUE;
 80017d2:	4b8e      	ldr	r3, [pc, #568]	; (8001a0c <vPrimaryBlockTimeTestTask+0x2cc>)
 80017d4:	2201      	movs	r2, #1
 80017d6:	601a      	str	r2, [r3, #0]
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	3301      	adds	r3, #1
 80017dc:	613b      	str	r3, [r7, #16]
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	2b04      	cmp	r3, #4
 80017e2:	ddeb      	ble.n	80017bc <vPrimaryBlockTimeTestTask+0x7c>
			#if configUSE_PREEMPTION == 0
				taskYIELD();
			#endif
		}

		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 80017e4:	2300      	movs	r3, #0
 80017e6:	613b      	str	r3, [r7, #16]
 80017e8:	e02e      	b.n	8001848 <vPrimaryBlockTimeTestTask+0x108>
		{
			/* The queue is full. Attempt to write to the queue using a block
			time.  When we wake, ensure the delta in time is as expected. */
			xTimeToBlock = ( TickType_t ) ( bktPRIMARY_BLOCK_TIME << xItem );
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	220a      	movs	r2, #10
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	61fb      	str	r3, [r7, #28]

			xTimeWhenBlocking = xTaskGetTickCount();
 80017f4:	f004 fab8 	bl	8005d68 <xTaskGetTickCount>
 80017f8:	61b8      	str	r0, [r7, #24]

			/* We should unblock after xTimeToBlock having not received
			anything on the queue. */
			if( xQueueSend( xTestQueue, &xItem, xTimeToBlock ) != errQUEUE_FULL )
 80017fa:	4b83      	ldr	r3, [pc, #524]	; (8001a08 <vPrimaryBlockTimeTestTask+0x2c8>)
 80017fc:	6818      	ldr	r0, [r3, #0]
 80017fe:	f107 0110 	add.w	r1, r7, #16
 8001802:	2300      	movs	r3, #0
 8001804:	69fa      	ldr	r2, [r7, #28]
 8001806:	f002 fdfd 	bl	8004404 <xQueueGenericSend>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d002      	beq.n	8001816 <vPrimaryBlockTimeTestTask+0xd6>
			{
				xErrorOccurred = pdTRUE;
 8001810:	4b7e      	ldr	r3, [pc, #504]	; (8001a0c <vPrimaryBlockTimeTestTask+0x2cc>)
 8001812:	2201      	movs	r2, #1
 8001814:	601a      	str	r2, [r3, #0]
			}

			/* How long were we blocked for? */
			xBlockedTime = xTaskGetTickCount() - xTimeWhenBlocking;
 8001816:	f004 faa7 	bl	8005d68 <xTaskGetTickCount>
 800181a:	4602      	mov	r2, r0
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	617b      	str	r3, [r7, #20]

			if( xBlockedTime < xTimeToBlock )
 8001822:	697a      	ldr	r2, [r7, #20]
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	429a      	cmp	r2, r3
 8001828:	d202      	bcs.n	8001830 <vPrimaryBlockTimeTestTask+0xf0>
			{
				/* Should not have blocked for less than we requested. */
				xErrorOccurred = pdTRUE;
 800182a:	4b78      	ldr	r3, [pc, #480]	; (8001a0c <vPrimaryBlockTimeTestTask+0x2cc>)
 800182c:	2201      	movs	r2, #1
 800182e:	601a      	str	r2, [r3, #0]
			}

			if( xBlockedTime > ( xTimeToBlock + bktALLOWABLE_MARGIN ) )
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	f103 020f 	add.w	r2, r3, #15
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	429a      	cmp	r2, r3
 800183a:	d202      	bcs.n	8001842 <vPrimaryBlockTimeTestTask+0x102>
			{
				/* Should not have blocked for longer than we requested,
				although we would not necessarily run as soon as we were
				unblocked so a margin is allowed. */
				xErrorOccurred = pdTRUE;
 800183c:	4b73      	ldr	r3, [pc, #460]	; (8001a0c <vPrimaryBlockTimeTestTask+0x2cc>)
 800183e:	2201      	movs	r2, #1
 8001840:	601a      	str	r2, [r3, #0]
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	3301      	adds	r3, #1
 8001846:	613b      	str	r3, [r7, #16]
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	2b04      	cmp	r3, #4
 800184c:	ddcd      	ble.n	80017ea <vPrimaryBlockTimeTestTask+0xaa>
		recognise that its block time has not expired and return to block for
		the remains of its block time.

		Wake the other task so it blocks attempting to post to the already
		full queue. */
		xRunIndicator = 0;
 800184e:	4b70      	ldr	r3, [pc, #448]	; (8001a10 <vPrimaryBlockTimeTestTask+0x2d0>)
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
		vTaskResume( xSecondary );
 8001854:	4b6f      	ldr	r3, [pc, #444]	; (8001a14 <vPrimaryBlockTimeTestTask+0x2d4>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4618      	mov	r0, r3
 800185a:	f004 f925 	bl	8005aa8 <vTaskResume>

		/* We need to wait a little to ensure the other task executes. */
		while( xRunIndicator != bktRUN_INDICATOR )
 800185e:	e002      	b.n	8001866 <vPrimaryBlockTimeTestTask+0x126>
		{
			/* The other task has not yet executed. */
			vTaskDelay( bktSHORT_WAIT );
 8001860:	2014      	movs	r0, #20
 8001862:	f003 ff4d 	bl	8005700 <vTaskDelay>
		while( xRunIndicator != bktRUN_INDICATOR )
 8001866:	4b6a      	ldr	r3, [pc, #424]	; (8001a10 <vPrimaryBlockTimeTestTask+0x2d0>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2b55      	cmp	r3, #85	; 0x55
 800186c:	d1f8      	bne.n	8001860 <vPrimaryBlockTimeTestTask+0x120>
		}
		/* Make sure the other task is blocked on the queue. */
		vTaskDelay( bktSHORT_WAIT );
 800186e:	2014      	movs	r0, #20
 8001870:	f003 ff46 	bl	8005700 <vTaskDelay>
		xRunIndicator = 0;
 8001874:	4b66      	ldr	r3, [pc, #408]	; (8001a10 <vPrimaryBlockTimeTestTask+0x2d0>)
 8001876:	2200      	movs	r2, #0
 8001878:	601a      	str	r2, [r3, #0]

		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 800187a:	2300      	movs	r3, #0
 800187c:	613b      	str	r3, [r7, #16]
 800187e:	e038      	b.n	80018f2 <vPrimaryBlockTimeTestTask+0x1b2>
		{
			/* Now when we make space on the queue the other task should wake
			but not execute as this task has higher priority. */
			if( xQueueReceive( xTestQueue, &xData, bktDONT_BLOCK ) != pdPASS )
 8001880:	4b61      	ldr	r3, [pc, #388]	; (8001a08 <vPrimaryBlockTimeTestTask+0x2c8>)
 8001882:	6818      	ldr	r0, [r3, #0]
 8001884:	f107 010c 	add.w	r1, r7, #12
 8001888:	2300      	movs	r3, #0
 800188a:	2200      	movs	r2, #0
 800188c:	f003 f91e 	bl	8004acc <xQueueGenericReceive>
 8001890:	4603      	mov	r3, r0
 8001892:	2b01      	cmp	r3, #1
 8001894:	d002      	beq.n	800189c <vPrimaryBlockTimeTestTask+0x15c>
			{
				xErrorOccurred = pdTRUE;
 8001896:	4b5d      	ldr	r3, [pc, #372]	; (8001a0c <vPrimaryBlockTimeTestTask+0x2cc>)
 8001898:	2201      	movs	r2, #1
 800189a:	601a      	str	r2, [r3, #0]
			}

			/* Now fill the queue again before the other task gets a chance to
			execute.  If the other task had executed we would find the queue
			full ourselves, and the other task have set xRunIndicator. */
			if( xQueueSend( xTestQueue, &xItem, bktDONT_BLOCK ) != pdPASS )
 800189c:	4b5a      	ldr	r3, [pc, #360]	; (8001a08 <vPrimaryBlockTimeTestTask+0x2c8>)
 800189e:	6818      	ldr	r0, [r3, #0]
 80018a0:	f107 0110 	add.w	r1, r7, #16
 80018a4:	2300      	movs	r3, #0
 80018a6:	2200      	movs	r2, #0
 80018a8:	f002 fdac 	bl	8004404 <xQueueGenericSend>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d002      	beq.n	80018b8 <vPrimaryBlockTimeTestTask+0x178>
			{
				xErrorOccurred = pdTRUE;
 80018b2:	4b56      	ldr	r3, [pc, #344]	; (8001a0c <vPrimaryBlockTimeTestTask+0x2cc>)
 80018b4:	2201      	movs	r2, #1
 80018b6:	601a      	str	r2, [r3, #0]
			}

			if( xRunIndicator == bktRUN_INDICATOR )
 80018b8:	4b55      	ldr	r3, [pc, #340]	; (8001a10 <vPrimaryBlockTimeTestTask+0x2d0>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2b55      	cmp	r3, #85	; 0x55
 80018be:	d102      	bne.n	80018c6 <vPrimaryBlockTimeTestTask+0x186>
			{
				/* The other task should not have executed. */
				xErrorOccurred = pdTRUE;
 80018c0:	4b52      	ldr	r3, [pc, #328]	; (8001a0c <vPrimaryBlockTimeTestTask+0x2cc>)
 80018c2:	2201      	movs	r2, #1
 80018c4:	601a      	str	r2, [r3, #0]
			}

			/* Raise the priority of the other task so it executes and blocks
			on the queue again. */
			vTaskPrioritySet( xSecondary, bktPRIMARY_PRIORITY + 2 );
 80018c6:	4b53      	ldr	r3, [pc, #332]	; (8001a14 <vPrimaryBlockTimeTestTask+0x2d4>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2104      	movs	r1, #4
 80018cc:	4618      	mov	r0, r3
 80018ce:	f003 ff69 	bl	80057a4 <vTaskPrioritySet>

			/* The other task should now have re-blocked without exiting the
			queue function. */
			if( xRunIndicator == bktRUN_INDICATOR )
 80018d2:	4b4f      	ldr	r3, [pc, #316]	; (8001a10 <vPrimaryBlockTimeTestTask+0x2d0>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2b55      	cmp	r3, #85	; 0x55
 80018d8:	d102      	bne.n	80018e0 <vPrimaryBlockTimeTestTask+0x1a0>
			{
				/* The other task should not have executed outside of the
				queue function. */
				xErrorOccurred = pdTRUE;
 80018da:	4b4c      	ldr	r3, [pc, #304]	; (8001a0c <vPrimaryBlockTimeTestTask+0x2cc>)
 80018dc:	2201      	movs	r2, #1
 80018de:	601a      	str	r2, [r3, #0]
			}

			/* Set the priority back down. */
			vTaskPrioritySet( xSecondary, bktSECONDARY_PRIORITY );
 80018e0:	4b4c      	ldr	r3, [pc, #304]	; (8001a14 <vPrimaryBlockTimeTestTask+0x2d4>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2101      	movs	r1, #1
 80018e6:	4618      	mov	r0, r3
 80018e8:	f003 ff5c 	bl	80057a4 <vTaskPrioritySet>
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	3301      	adds	r3, #1
 80018f0:	613b      	str	r3, [r7, #16]
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	2b04      	cmp	r3, #4
 80018f6:	ddc3      	ble.n	8001880 <vPrimaryBlockTimeTestTask+0x140>
		}

		/* Let the other task timeout.  When it unblockes it will check that it
		unblocked at the correct time, then suspend itself. */
		while( xRunIndicator != bktRUN_INDICATOR )
 80018f8:	e002      	b.n	8001900 <vPrimaryBlockTimeTestTask+0x1c0>
		{
			vTaskDelay( bktSHORT_WAIT );
 80018fa:	2014      	movs	r0, #20
 80018fc:	f003 ff00 	bl	8005700 <vTaskDelay>
		while( xRunIndicator != bktRUN_INDICATOR )
 8001900:	4b43      	ldr	r3, [pc, #268]	; (8001a10 <vPrimaryBlockTimeTestTask+0x2d0>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2b55      	cmp	r3, #85	; 0x55
 8001906:	d1f8      	bne.n	80018fa <vPrimaryBlockTimeTestTask+0x1ba>
		}
		vTaskDelay( bktSHORT_WAIT );
 8001908:	2014      	movs	r0, #20
 800190a:	f003 fef9 	bl	8005700 <vTaskDelay>
		xRunIndicator = 0;
 800190e:	4b40      	ldr	r3, [pc, #256]	; (8001a10 <vPrimaryBlockTimeTestTask+0x2d0>)
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]

		As per test 3 - but with the send and receive the other way around.
		The other task blocks attempting to read from the queue.

		Empty the queue.  We should find that it is full. */
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 8001914:	2300      	movs	r3, #0
 8001916:	613b      	str	r3, [r7, #16]
 8001918:	e010      	b.n	800193c <vPrimaryBlockTimeTestTask+0x1fc>
		{
			if( xQueueReceive( xTestQueue, &xData, bktDONT_BLOCK ) != pdPASS )
 800191a:	4b3b      	ldr	r3, [pc, #236]	; (8001a08 <vPrimaryBlockTimeTestTask+0x2c8>)
 800191c:	6818      	ldr	r0, [r3, #0]
 800191e:	f107 010c 	add.w	r1, r7, #12
 8001922:	2300      	movs	r3, #0
 8001924:	2200      	movs	r2, #0
 8001926:	f003 f8d1 	bl	8004acc <xQueueGenericReceive>
 800192a:	4603      	mov	r3, r0
 800192c:	2b01      	cmp	r3, #1
 800192e:	d002      	beq.n	8001936 <vPrimaryBlockTimeTestTask+0x1f6>
			{
				xErrorOccurred = pdTRUE;
 8001930:	4b36      	ldr	r3, [pc, #216]	; (8001a0c <vPrimaryBlockTimeTestTask+0x2cc>)
 8001932:	2201      	movs	r2, #1
 8001934:	601a      	str	r2, [r3, #0]
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	3301      	adds	r3, #1
 800193a:	613b      	str	r3, [r7, #16]
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	2b04      	cmp	r3, #4
 8001940:	ddeb      	ble.n	800191a <vPrimaryBlockTimeTestTask+0x1da>
			}
		}

		/* Wake the other task so it blocks attempting to read from  the
		already	empty queue. */
		vTaskResume( xSecondary );
 8001942:	4b34      	ldr	r3, [pc, #208]	; (8001a14 <vPrimaryBlockTimeTestTask+0x2d4>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4618      	mov	r0, r3
 8001948:	f004 f8ae 	bl	8005aa8 <vTaskResume>

		/* We need to wait a little to ensure the other task executes. */
		while( xRunIndicator != bktRUN_INDICATOR )
 800194c:	e002      	b.n	8001954 <vPrimaryBlockTimeTestTask+0x214>
		{
			vTaskDelay( bktSHORT_WAIT );
 800194e:	2014      	movs	r0, #20
 8001950:	f003 fed6 	bl	8005700 <vTaskDelay>
		while( xRunIndicator != bktRUN_INDICATOR )
 8001954:	4b2e      	ldr	r3, [pc, #184]	; (8001a10 <vPrimaryBlockTimeTestTask+0x2d0>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2b55      	cmp	r3, #85	; 0x55
 800195a:	d1f8      	bne.n	800194e <vPrimaryBlockTimeTestTask+0x20e>
		}
		vTaskDelay( bktSHORT_WAIT );
 800195c:	2014      	movs	r0, #20
 800195e:	f003 fecf 	bl	8005700 <vTaskDelay>
		xRunIndicator = 0;
 8001962:	4b2b      	ldr	r3, [pc, #172]	; (8001a10 <vPrimaryBlockTimeTestTask+0x2d0>)
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]

		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 8001968:	2300      	movs	r3, #0
 800196a:	613b      	str	r3, [r7, #16]
 800196c:	e038      	b.n	80019e0 <vPrimaryBlockTimeTestTask+0x2a0>
		{
			/* Now when we place an item on the queue the other task should
			wake but not execute as this task has higher priority. */
			if( xQueueSend( xTestQueue, &xItem, bktDONT_BLOCK ) != pdPASS )
 800196e:	4b26      	ldr	r3, [pc, #152]	; (8001a08 <vPrimaryBlockTimeTestTask+0x2c8>)
 8001970:	6818      	ldr	r0, [r3, #0]
 8001972:	f107 0110 	add.w	r1, r7, #16
 8001976:	2300      	movs	r3, #0
 8001978:	2200      	movs	r2, #0
 800197a:	f002 fd43 	bl	8004404 <xQueueGenericSend>
 800197e:	4603      	mov	r3, r0
 8001980:	2b01      	cmp	r3, #1
 8001982:	d002      	beq.n	800198a <vPrimaryBlockTimeTestTask+0x24a>
			{
				xErrorOccurred = pdTRUE;
 8001984:	4b21      	ldr	r3, [pc, #132]	; (8001a0c <vPrimaryBlockTimeTestTask+0x2cc>)
 8001986:	2201      	movs	r2, #1
 8001988:	601a      	str	r2, [r3, #0]
			}

			/* Now empty the queue again before the other task gets a chance to
			execute.  If the other task had executed we would find the queue
			empty ourselves, and the other task would be suspended. */
			if( xQueueReceive( xTestQueue, &xData, bktDONT_BLOCK ) != pdPASS )
 800198a:	4b1f      	ldr	r3, [pc, #124]	; (8001a08 <vPrimaryBlockTimeTestTask+0x2c8>)
 800198c:	6818      	ldr	r0, [r3, #0]
 800198e:	f107 010c 	add.w	r1, r7, #12
 8001992:	2300      	movs	r3, #0
 8001994:	2200      	movs	r2, #0
 8001996:	f003 f899 	bl	8004acc <xQueueGenericReceive>
 800199a:	4603      	mov	r3, r0
 800199c:	2b01      	cmp	r3, #1
 800199e:	d002      	beq.n	80019a6 <vPrimaryBlockTimeTestTask+0x266>
			{
				xErrorOccurred = pdTRUE;
 80019a0:	4b1a      	ldr	r3, [pc, #104]	; (8001a0c <vPrimaryBlockTimeTestTask+0x2cc>)
 80019a2:	2201      	movs	r2, #1
 80019a4:	601a      	str	r2, [r3, #0]
			}

			if( xRunIndicator == bktRUN_INDICATOR )
 80019a6:	4b1a      	ldr	r3, [pc, #104]	; (8001a10 <vPrimaryBlockTimeTestTask+0x2d0>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2b55      	cmp	r3, #85	; 0x55
 80019ac:	d102      	bne.n	80019b4 <vPrimaryBlockTimeTestTask+0x274>
			{
				/* The other task should not have executed. */
				xErrorOccurred = pdTRUE;
 80019ae:	4b17      	ldr	r3, [pc, #92]	; (8001a0c <vPrimaryBlockTimeTestTask+0x2cc>)
 80019b0:	2201      	movs	r2, #1
 80019b2:	601a      	str	r2, [r3, #0]
			}

			/* Raise the priority of the other task so it executes and blocks
			on the queue again. */
			vTaskPrioritySet( xSecondary, bktPRIMARY_PRIORITY + 2 );
 80019b4:	4b17      	ldr	r3, [pc, #92]	; (8001a14 <vPrimaryBlockTimeTestTask+0x2d4>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2104      	movs	r1, #4
 80019ba:	4618      	mov	r0, r3
 80019bc:	f003 fef2 	bl	80057a4 <vTaskPrioritySet>

			/* The other task should now have re-blocked without exiting the
			queue function. */
			if( xRunIndicator == bktRUN_INDICATOR )
 80019c0:	4b13      	ldr	r3, [pc, #76]	; (8001a10 <vPrimaryBlockTimeTestTask+0x2d0>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2b55      	cmp	r3, #85	; 0x55
 80019c6:	d102      	bne.n	80019ce <vPrimaryBlockTimeTestTask+0x28e>
			{
				/* The other task should not have executed outside of the
				queue function. */
				xErrorOccurred = pdTRUE;
 80019c8:	4b10      	ldr	r3, [pc, #64]	; (8001a0c <vPrimaryBlockTimeTestTask+0x2cc>)
 80019ca:	2201      	movs	r2, #1
 80019cc:	601a      	str	r2, [r3, #0]
			}
			vTaskPrioritySet( xSecondary, bktSECONDARY_PRIORITY );
 80019ce:	4b11      	ldr	r3, [pc, #68]	; (8001a14 <vPrimaryBlockTimeTestTask+0x2d4>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2101      	movs	r1, #1
 80019d4:	4618      	mov	r0, r3
 80019d6:	f003 fee5 	bl	80057a4 <vTaskPrioritySet>
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	3301      	adds	r3, #1
 80019de:	613b      	str	r3, [r7, #16]
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	2b04      	cmp	r3, #4
 80019e4:	ddc3      	ble.n	800196e <vPrimaryBlockTimeTestTask+0x22e>
		}

		/* Let the other task timeout.  When it unblockes it will check that it
		unblocked at the correct time, then suspend itself. */
		while( xRunIndicator != bktRUN_INDICATOR )
 80019e6:	e002      	b.n	80019ee <vPrimaryBlockTimeTestTask+0x2ae>
		{
			vTaskDelay( bktSHORT_WAIT );
 80019e8:	2014      	movs	r0, #20
 80019ea:	f003 fe89 	bl	8005700 <vTaskDelay>
		while( xRunIndicator != bktRUN_INDICATOR )
 80019ee:	4b08      	ldr	r3, [pc, #32]	; (8001a10 <vPrimaryBlockTimeTestTask+0x2d0>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2b55      	cmp	r3, #85	; 0x55
 80019f4:	d1f8      	bne.n	80019e8 <vPrimaryBlockTimeTestTask+0x2a8>
		}
		vTaskDelay( bktSHORT_WAIT );
 80019f6:	2014      	movs	r0, #20
 80019f8:	f003 fe82 	bl	8005700 <vTaskDelay>

		xPrimaryCycles++;
 80019fc:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <vPrimaryBlockTimeTestTask+0x2d8>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	3301      	adds	r3, #1
 8001a02:	4a05      	ldr	r2, [pc, #20]	; (8001a18 <vPrimaryBlockTimeTestTask+0x2d8>)
 8001a04:	6013      	str	r3, [r2, #0]
		prvBasicDelayTests();
 8001a06:	e69f      	b.n	8001748 <vPrimaryBlockTimeTestTask+0x8>
 8001a08:	20000090 	.word	0x20000090
 8001a0c:	200000a0 	.word	0x200000a0
 8001a10:	200000a4 	.word	0x200000a4
 8001a14:	20000094 	.word	0x20000094
 8001a18:	20000098 	.word	0x20000098

08001a1c <vSecondaryBlockTimeTestTask>:
	}
}
/*-----------------------------------------------------------*/

static void vSecondaryBlockTimeTestTask( void *pvParameters )
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
	{
		/*********************************************************************
		Test 0, 1 and 2

		This task does not participate in these tests. */
		vTaskSuspend( NULL );
 8001a24:	2000      	movs	r0, #0
 8001a26:	f003 ff79 	bl	800591c <vTaskSuspend>
		Test 3

		The first thing we do is attempt to read from the queue.  It should be
		full so we block.  Note the time before we block so we can check the
		wake time is as per that expected. */
		xTimeWhenBlocking = xTaskGetTickCount();
 8001a2a:	f004 f99d 	bl	8005d68 <xTaskGetTickCount>
 8001a2e:	6178      	str	r0, [r7, #20]

		/* We should unblock after bktTIME_TO_BLOCK having not sent anything to
		the queue. */
		xData = 0;
 8001a30:	2300      	movs	r3, #0
 8001a32:	60fb      	str	r3, [r7, #12]
		xRunIndicator = bktRUN_INDICATOR;
 8001a34:	4b2b      	ldr	r3, [pc, #172]	; (8001ae4 <vSecondaryBlockTimeTestTask+0xc8>)
 8001a36:	2255      	movs	r2, #85	; 0x55
 8001a38:	601a      	str	r2, [r3, #0]
		if( xQueueSend( xTestQueue, &xData, bktTIME_TO_BLOCK ) != errQUEUE_FULL )
 8001a3a:	4b2b      	ldr	r3, [pc, #172]	; (8001ae8 <vSecondaryBlockTimeTestTask+0xcc>)
 8001a3c:	6818      	ldr	r0, [r3, #0]
 8001a3e:	f107 010c 	add.w	r1, r7, #12
 8001a42:	2300      	movs	r3, #0
 8001a44:	22af      	movs	r2, #175	; 0xaf
 8001a46:	f002 fcdd 	bl	8004404 <xQueueGenericSend>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d002      	beq.n	8001a56 <vSecondaryBlockTimeTestTask+0x3a>
		{
			xErrorOccurred = pdTRUE;
 8001a50:	4b26      	ldr	r3, [pc, #152]	; (8001aec <vSecondaryBlockTimeTestTask+0xd0>)
 8001a52:	2201      	movs	r2, #1
 8001a54:	601a      	str	r2, [r3, #0]
		}

		/* How long were we inside the send function? */
		xBlockedTime = xTaskGetTickCount() - xTimeWhenBlocking;
 8001a56:	f004 f987 	bl	8005d68 <xTaskGetTickCount>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	613b      	str	r3, [r7, #16]

		/* We should not have blocked for less time than bktTIME_TO_BLOCK. */
		if( xBlockedTime < bktTIME_TO_BLOCK )
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	2bae      	cmp	r3, #174	; 0xae
 8001a66:	d802      	bhi.n	8001a6e <vSecondaryBlockTimeTestTask+0x52>
		{
			xErrorOccurred = pdTRUE;
 8001a68:	4b20      	ldr	r3, [pc, #128]	; (8001aec <vSecondaryBlockTimeTestTask+0xd0>)
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	601a      	str	r2, [r3, #0]
		}

		/* We should of not blocked for much longer than bktALLOWABLE_MARGIN
		either.  A margin is permitted as we would not necessarily run as
		soon as we unblocked. */
		if( xBlockedTime > ( bktTIME_TO_BLOCK + bktALLOWABLE_MARGIN ) )
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	2bbe      	cmp	r3, #190	; 0xbe
 8001a72:	d902      	bls.n	8001a7a <vSecondaryBlockTimeTestTask+0x5e>
		{
			xErrorOccurred = pdTRUE;
 8001a74:	4b1d      	ldr	r3, [pc, #116]	; (8001aec <vSecondaryBlockTimeTestTask+0xd0>)
 8001a76:	2201      	movs	r2, #1
 8001a78:	601a      	str	r2, [r3, #0]
		}

		/* Suspend ready for test 3. */
		xRunIndicator = bktRUN_INDICATOR;
 8001a7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ae4 <vSecondaryBlockTimeTestTask+0xc8>)
 8001a7c:	2255      	movs	r2, #85	; 0x55
 8001a7e:	601a      	str	r2, [r3, #0]
		vTaskSuspend( NULL );
 8001a80:	2000      	movs	r0, #0
 8001a82:	f003 ff4b 	bl	800591c <vTaskSuspend>

		/*********************************************************************
        Test 4

		As per test three, but with the send and receive reversed. */
		xTimeWhenBlocking = xTaskGetTickCount();
 8001a86:	f004 f96f 	bl	8005d68 <xTaskGetTickCount>
 8001a8a:	6178      	str	r0, [r7, #20]

		/* We should unblock after bktTIME_TO_BLOCK having not received
		anything on the queue. */
		xRunIndicator = bktRUN_INDICATOR;
 8001a8c:	4b15      	ldr	r3, [pc, #84]	; (8001ae4 <vSecondaryBlockTimeTestTask+0xc8>)
 8001a8e:	2255      	movs	r2, #85	; 0x55
 8001a90:	601a      	str	r2, [r3, #0]
		if( xQueueReceive( xTestQueue, &xData, bktTIME_TO_BLOCK ) != errQUEUE_EMPTY )
 8001a92:	4b15      	ldr	r3, [pc, #84]	; (8001ae8 <vSecondaryBlockTimeTestTask+0xcc>)
 8001a94:	6818      	ldr	r0, [r3, #0]
 8001a96:	f107 010c 	add.w	r1, r7, #12
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	22af      	movs	r2, #175	; 0xaf
 8001a9e:	f003 f815 	bl	8004acc <xQueueGenericReceive>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d002      	beq.n	8001aae <vSecondaryBlockTimeTestTask+0x92>
		{
			xErrorOccurred = pdTRUE;
 8001aa8:	4b10      	ldr	r3, [pc, #64]	; (8001aec <vSecondaryBlockTimeTestTask+0xd0>)
 8001aaa:	2201      	movs	r2, #1
 8001aac:	601a      	str	r2, [r3, #0]
		}

		xBlockedTime = xTaskGetTickCount() - xTimeWhenBlocking;
 8001aae:	f004 f95b 	bl	8005d68 <xTaskGetTickCount>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	613b      	str	r3, [r7, #16]

		/* We should not have blocked for less time than bktTIME_TO_BLOCK. */
		if( xBlockedTime < bktTIME_TO_BLOCK )
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	2bae      	cmp	r3, #174	; 0xae
 8001abe:	d802      	bhi.n	8001ac6 <vSecondaryBlockTimeTestTask+0xaa>
		{
			xErrorOccurred = pdTRUE;
 8001ac0:	4b0a      	ldr	r3, [pc, #40]	; (8001aec <vSecondaryBlockTimeTestTask+0xd0>)
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	601a      	str	r2, [r3, #0]
		}

		/* We should of not blocked for much longer than bktALLOWABLE_MARGIN
		either.  A margin is permitted as we would not necessarily run as soon
		as we unblocked. */
		if( xBlockedTime > ( bktTIME_TO_BLOCK + bktALLOWABLE_MARGIN ) )
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	2bbe      	cmp	r3, #190	; 0xbe
 8001aca:	d902      	bls.n	8001ad2 <vSecondaryBlockTimeTestTask+0xb6>
		{
			xErrorOccurred = pdTRUE;
 8001acc:	4b07      	ldr	r3, [pc, #28]	; (8001aec <vSecondaryBlockTimeTestTask+0xd0>)
 8001ace:	2201      	movs	r2, #1
 8001ad0:	601a      	str	r2, [r3, #0]
		}

		xRunIndicator = bktRUN_INDICATOR;
 8001ad2:	4b04      	ldr	r3, [pc, #16]	; (8001ae4 <vSecondaryBlockTimeTestTask+0xc8>)
 8001ad4:	2255      	movs	r2, #85	; 0x55
 8001ad6:	601a      	str	r2, [r3, #0]

		xSecondaryCycles++;
 8001ad8:	4b05      	ldr	r3, [pc, #20]	; (8001af0 <vSecondaryBlockTimeTestTask+0xd4>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	3301      	adds	r3, #1
 8001ade:	4a04      	ldr	r2, [pc, #16]	; (8001af0 <vSecondaryBlockTimeTestTask+0xd4>)
 8001ae0:	6013      	str	r3, [r2, #0]
		vTaskSuspend( NULL );
 8001ae2:	e79f      	b.n	8001a24 <vSecondaryBlockTimeTestTask+0x8>
 8001ae4:	200000a4 	.word	0x200000a4
 8001ae8:	20000090 	.word	0x20000090
 8001aec:	200000a0 	.word	0x200000a0
 8001af0:	2000009c 	.word	0x2000009c

08001af4 <prvBasicDelayTests>:
	}
}
/*-----------------------------------------------------------*/

static void prvBasicDelayTests( void )
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b088      	sub	sp, #32
 8001af8:	af00      	add	r7, sp, #0
TickType_t xPreTime, xPostTime, x, xLastUnblockTime, xExpectedUnblockTime;
const TickType_t xPeriod = 75, xCycles = 5, xAllowableMargin = ( bktALLOWABLE_MARGIN >> 1 );
 8001afa:	234b      	movs	r3, #75	; 0x4b
 8001afc:	61bb      	str	r3, [r7, #24]
 8001afe:	2305      	movs	r3, #5
 8001b00:	617b      	str	r3, [r7, #20]
 8001b02:	2307      	movs	r3, #7
 8001b04:	613b      	str	r3, [r7, #16]

	/* Temporarily increase priority so the timing is more accurate, but not so
	high as to disrupt the timer tests. */
	vTaskPrioritySet( NULL, configTIMER_TASK_PRIORITY - 1 );
 8001b06:	2101      	movs	r1, #1
 8001b08:	2000      	movs	r0, #0
 8001b0a:	f003 fe4b 	bl	80057a4 <vTaskPrioritySet>

	/* Crude check to too that vTaskDelay() blocks for the expected period. */
	xPreTime = xTaskGetTickCount();
 8001b0e:	f004 f92b 	bl	8005d68 <xTaskGetTickCount>
 8001b12:	60f8      	str	r0, [r7, #12]
	vTaskDelay( bktTIME_TO_BLOCK );
 8001b14:	20af      	movs	r0, #175	; 0xaf
 8001b16:	f003 fdf3 	bl	8005700 <vTaskDelay>
	xPostTime = xTaskGetTickCount();
 8001b1a:	f004 f925 	bl	8005d68 <xTaskGetTickCount>
 8001b1e:	60b8      	str	r0, [r7, #8]

	/* The priority is higher, so the allowable margin is halved when compared
	to the other tests in this file. */
	if( ( xPostTime - xPreTime ) > ( bktTIME_TO_BLOCK + xAllowableMargin ) )
 8001b20:	68ba      	ldr	r2, [r7, #8]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	1ad2      	subs	r2, r2, r3
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	33af      	adds	r3, #175	; 0xaf
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d902      	bls.n	8001b34 <prvBasicDelayTests+0x40>
	{
		xErrorOccurred = pdTRUE;
 8001b2e:	4b1b      	ldr	r3, [pc, #108]	; (8001b9c <prvBasicDelayTests+0xa8>)
 8001b30:	2201      	movs	r2, #1
 8001b32:	601a      	str	r2, [r3, #0]
	}

	/* Now crude tests to check the vTaskDelayUntil() functionality. */
	xPostTime = xTaskGetTickCount();
 8001b34:	f004 f918 	bl	8005d68 <xTaskGetTickCount>
 8001b38:	60b8      	str	r0, [r7, #8]
	xLastUnblockTime = xPostTime;
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	603b      	str	r3, [r7, #0]

	for( x = 0; x < xCycles; x++ )
 8001b3e:	2300      	movs	r3, #0
 8001b40:	61fb      	str	r3, [r7, #28]
 8001b42:	e01f      	b.n	8001b84 <prvBasicDelayTests+0x90>
	{
		/* Calculate the next expected unblock time from the time taken before
		this loop was entered. */
		xExpectedUnblockTime = xPostTime + ( x * xPeriod );
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	fb02 f203 	mul.w	r2, r2, r3
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	4413      	add	r3, r2
 8001b50:	607b      	str	r3, [r7, #4]

		vTaskDelayUntil( &xLastUnblockTime, xPeriod );
 8001b52:	463b      	mov	r3, r7
 8001b54:	69b9      	ldr	r1, [r7, #24]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f003 fd54 	bl	8005604 <vTaskDelayUntil>

		if( ( xTaskGetTickCount() - xExpectedUnblockTime ) > ( bktTIME_TO_BLOCK + xAllowableMargin ) )
 8001b5c:	f004 f904 	bl	8005d68 <xTaskGetTickCount>
 8001b60:	4602      	mov	r2, r0
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	1ad2      	subs	r2, r2, r3
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	33af      	adds	r3, #175	; 0xaf
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d902      	bls.n	8001b74 <prvBasicDelayTests+0x80>
		{
			xErrorOccurred = pdTRUE;
 8001b6e:	4b0b      	ldr	r3, [pc, #44]	; (8001b9c <prvBasicDelayTests+0xa8>)
 8001b70:	2201      	movs	r2, #1
 8001b72:	601a      	str	r2, [r3, #0]
		}

		xPrimaryCycles++;
 8001b74:	4b0a      	ldr	r3, [pc, #40]	; (8001ba0 <prvBasicDelayTests+0xac>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	4a09      	ldr	r2, [pc, #36]	; (8001ba0 <prvBasicDelayTests+0xac>)
 8001b7c:	6013      	str	r3, [r2, #0]
	for( x = 0; x < xCycles; x++ )
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	3301      	adds	r3, #1
 8001b82:	61fb      	str	r3, [r7, #28]
 8001b84:	69fa      	ldr	r2, [r7, #28]
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d3db      	bcc.n	8001b44 <prvBasicDelayTests+0x50>
	}

	/* Reset to the original task priority ready for the other tests. */
	vTaskPrioritySet( NULL, bktPRIMARY_PRIORITY );
 8001b8c:	2102      	movs	r1, #2
 8001b8e:	2000      	movs	r0, #0
 8001b90:	f003 fe08 	bl	80057a4 <vTaskPrioritySet>
}
 8001b94:	bf00      	nop
 8001b96:	3720      	adds	r7, #32
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	200000a0 	.word	0x200000a0
 8001ba0:	20000098 	.word	0x20000098

08001ba4 <xAreBlockTimeTestTasksStillRunning>:
/*-----------------------------------------------------------*/

BaseType_t xAreBlockTimeTestTasksStillRunning( void )
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
static BaseType_t xLastPrimaryCycleCount = 0, xLastSecondaryCycleCount = 0;
BaseType_t xReturn = pdPASS;
 8001baa:	2301      	movs	r3, #1
 8001bac:	607b      	str	r3, [r7, #4]

	/* Have both tasks performed at least one cycle since this function was
	last called? */
	if( xPrimaryCycles == xLastPrimaryCycleCount )
 8001bae:	4b12      	ldr	r3, [pc, #72]	; (8001bf8 <xAreBlockTimeTestTasksStillRunning+0x54>)
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	4b12      	ldr	r3, [pc, #72]	; (8001bfc <xAreBlockTimeTestTasksStillRunning+0x58>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d101      	bne.n	8001bbe <xAreBlockTimeTestTasksStillRunning+0x1a>
	{
		xReturn = pdFAIL;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	607b      	str	r3, [r7, #4]
	}

	if( xSecondaryCycles == xLastSecondaryCycleCount )
 8001bbe:	4b10      	ldr	r3, [pc, #64]	; (8001c00 <xAreBlockTimeTestTasksStillRunning+0x5c>)
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	4b10      	ldr	r3, [pc, #64]	; (8001c04 <xAreBlockTimeTestTasksStillRunning+0x60>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d101      	bne.n	8001bce <xAreBlockTimeTestTasksStillRunning+0x2a>
	{
		xReturn = pdFAIL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	607b      	str	r3, [r7, #4]
	}

	if( xErrorOccurred == pdTRUE )
 8001bce:	4b0e      	ldr	r3, [pc, #56]	; (8001c08 <xAreBlockTimeTestTasksStillRunning+0x64>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d101      	bne.n	8001bda <xAreBlockTimeTestTasksStillRunning+0x36>
	{
		xReturn = pdFAIL;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	607b      	str	r3, [r7, #4]
	}

	xLastSecondaryCycleCount = xSecondaryCycles;
 8001bda:	4b09      	ldr	r3, [pc, #36]	; (8001c00 <xAreBlockTimeTestTasksStillRunning+0x5c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a09      	ldr	r2, [pc, #36]	; (8001c04 <xAreBlockTimeTestTasksStillRunning+0x60>)
 8001be0:	6013      	str	r3, [r2, #0]
	xLastPrimaryCycleCount = xPrimaryCycles;
 8001be2:	4b05      	ldr	r3, [pc, #20]	; (8001bf8 <xAreBlockTimeTestTasksStillRunning+0x54>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a05      	ldr	r2, [pc, #20]	; (8001bfc <xAreBlockTimeTestTasksStillRunning+0x58>)
 8001be8:	6013      	str	r3, [r2, #0]

	return xReturn;
 8001bea:	687b      	ldr	r3, [r7, #4]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr
 8001bf8:	20000098 	.word	0x20000098
 8001bfc:	200000a8 	.word	0x200000a8
 8001c00:	2000009c 	.word	0x2000009c
 8001c04:	200000ac 	.word	0x200000ac
 8001c08:	200000a0 	.word	0x200000a0

08001c0c <vStartCountingSemaphoreTasks>:
static volatile xCountSemStruct xParameters[ countNUM_TEST_TASKS ];

/*-----------------------------------------------------------*/

void vStartCountingSemaphoreTasks( void )
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af02      	add	r7, sp, #8
	/* Create the semaphores that we are going to use for the test/demo.  The
	first should be created such that it starts at its maximum count value,
	the second should be created such that it starts with a count value of zero. */
	xParameters[ 0 ].xSemaphore = xSemaphoreCreateCounting( countMAX_COUNT_VALUE, countMAX_COUNT_VALUE );
 8001c12:	21c8      	movs	r1, #200	; 0xc8
 8001c14:	20c8      	movs	r0, #200	; 0xc8
 8001c16:	f002 fbb8 	bl	800438a <xQueueCreateCountingSemaphore>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	4b1f      	ldr	r3, [pc, #124]	; (8001c9c <vStartCountingSemaphoreTasks+0x90>)
 8001c1e:	601a      	str	r2, [r3, #0]
	xParameters[ 0 ].uxExpectedStartCount = countSTART_AT_MAX_COUNT;
 8001c20:	4b1e      	ldr	r3, [pc, #120]	; (8001c9c <vStartCountingSemaphoreTasks+0x90>)
 8001c22:	22aa      	movs	r2, #170	; 0xaa
 8001c24:	605a      	str	r2, [r3, #4]
	xParameters[ 0 ].uxLoopCounter = 0;
 8001c26:	4b1d      	ldr	r3, [pc, #116]	; (8001c9c <vStartCountingSemaphoreTasks+0x90>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	609a      	str	r2, [r3, #8]

	xParameters[ 1 ].xSemaphore = xSemaphoreCreateCounting( countMAX_COUNT_VALUE, 0 );
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	20c8      	movs	r0, #200	; 0xc8
 8001c30:	f002 fbab 	bl	800438a <xQueueCreateCountingSemaphore>
 8001c34:	4602      	mov	r2, r0
 8001c36:	4b19      	ldr	r3, [pc, #100]	; (8001c9c <vStartCountingSemaphoreTasks+0x90>)
 8001c38:	60da      	str	r2, [r3, #12]
	xParameters[ 1 ].uxExpectedStartCount = 0;
 8001c3a:	4b18      	ldr	r3, [pc, #96]	; (8001c9c <vStartCountingSemaphoreTasks+0x90>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	611a      	str	r2, [r3, #16]
	xParameters[ 1 ].uxLoopCounter = 0;
 8001c40:	4b16      	ldr	r3, [pc, #88]	; (8001c9c <vStartCountingSemaphoreTasks+0x90>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	615a      	str	r2, [r3, #20]

	/* Were the semaphores created? */
	if( ( xParameters[ 0 ].xSemaphore != NULL ) || ( xParameters[ 1 ].xSemaphore != NULL ) )
 8001c46:	4b15      	ldr	r3, [pc, #84]	; (8001c9c <vStartCountingSemaphoreTasks+0x90>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d103      	bne.n	8001c56 <vStartCountingSemaphoreTasks+0x4a>
 8001c4e:	4b13      	ldr	r3, [pc, #76]	; (8001c9c <vStartCountingSemaphoreTasks+0x90>)
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d01f      	beq.n	8001c96 <vStartCountingSemaphoreTasks+0x8a>
		in use.  The registry is provided as a means for kernel aware
		debuggers to locate semaphores and has no purpose if a kernel aware
		debugger is not being used.  The call to vQueueAddToRegistry() will be
		removed by the pre-processor if configQUEUE_REGISTRY_SIZE is not
		defined or is defined to be less than 1. */
		vQueueAddToRegistry( ( QueueHandle_t ) xParameters[ 0 ].xSemaphore, "Counting_Sem_1" );
 8001c56:	4b11      	ldr	r3, [pc, #68]	; (8001c9c <vStartCountingSemaphoreTasks+0x90>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4911      	ldr	r1, [pc, #68]	; (8001ca0 <vStartCountingSemaphoreTasks+0x94>)
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f003 fa73 	bl	8005148 <vQueueAddToRegistry>
		vQueueAddToRegistry( ( QueueHandle_t ) xParameters[ 1 ].xSemaphore, "Counting_Sem_2" );
 8001c62:	4b0e      	ldr	r3, [pc, #56]	; (8001c9c <vStartCountingSemaphoreTasks+0x90>)
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	490f      	ldr	r1, [pc, #60]	; (8001ca4 <vStartCountingSemaphoreTasks+0x98>)
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f003 fa6d 	bl	8005148 <vQueueAddToRegistry>

		/* Create the demo tasks, passing in the semaphore to use as the parameter. */
		xTaskCreate( prvCountingSemaphoreTask, "CNT1", configMINIMAL_STACK_SIZE, ( void * ) &( xParameters[ 0 ] ), tskIDLE_PRIORITY, NULL );
 8001c6e:	2300      	movs	r3, #0
 8001c70:	9301      	str	r3, [sp, #4]
 8001c72:	2300      	movs	r3, #0
 8001c74:	9300      	str	r3, [sp, #0]
 8001c76:	4b09      	ldr	r3, [pc, #36]	; (8001c9c <vStartCountingSemaphoreTasks+0x90>)
 8001c78:	2282      	movs	r2, #130	; 0x82
 8001c7a:	490b      	ldr	r1, [pc, #44]	; (8001ca8 <vStartCountingSemaphoreTasks+0x9c>)
 8001c7c:	480b      	ldr	r0, [pc, #44]	; (8001cac <vStartCountingSemaphoreTasks+0xa0>)
 8001c7e:	f003 fac7 	bl	8005210 <xTaskCreate>
		xTaskCreate( prvCountingSemaphoreTask, "CNT2", configMINIMAL_STACK_SIZE, ( void * ) &( xParameters[ 1 ] ), tskIDLE_PRIORITY, NULL );
 8001c82:	2300      	movs	r3, #0
 8001c84:	9301      	str	r3, [sp, #4]
 8001c86:	2300      	movs	r3, #0
 8001c88:	9300      	str	r3, [sp, #0]
 8001c8a:	4b09      	ldr	r3, [pc, #36]	; (8001cb0 <vStartCountingSemaphoreTasks+0xa4>)
 8001c8c:	2282      	movs	r2, #130	; 0x82
 8001c8e:	4909      	ldr	r1, [pc, #36]	; (8001cb4 <vStartCountingSemaphoreTasks+0xa8>)
 8001c90:	4806      	ldr	r0, [pc, #24]	; (8001cac <vStartCountingSemaphoreTasks+0xa0>)
 8001c92:	f003 fabd 	bl	8005210 <xTaskCreate>
	}
}
 8001c96:	bf00      	nop
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	200000b4 	.word	0x200000b4
 8001ca0:	080094bc 	.word	0x080094bc
 8001ca4:	080094cc 	.word	0x080094cc
 8001ca8:	080094dc 	.word	0x080094dc
 8001cac:	08001e15 	.word	0x08001e15
 8001cb0:	200000c0 	.word	0x200000c0
 8001cb4:	080094e4 	.word	0x080094e4

08001cb8 <prvDecrementSemaphoreCount>:
/*-----------------------------------------------------------*/

static void prvDecrementSemaphoreCount( SemaphoreHandle_t xSemaphore, UBaseType_t *puxLoopCounter )
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
UBaseType_t ux;

	/* If the semaphore count is at its maximum then we should not be able to
	'give' the semaphore. */
	if( xSemaphoreGive( xSemaphore ) == pdPASS )
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f002 fb9b 	bl	8004404 <xQueueGenericSend>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d102      	bne.n	8001cda <prvDecrementSemaphoreCount+0x22>
	{
		xErrorDetected = pdTRUE;
 8001cd4:	4b27      	ldr	r3, [pc, #156]	; (8001d74 <prvDecrementSemaphoreCount+0xbc>)
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	601a      	str	r2, [r3, #0]
	}

	/* We should be able to 'take' the semaphore countMAX_COUNT_VALUE times. */
	for( ux = 0; ux < countMAX_COUNT_VALUE; ux++ )
 8001cda:	2300      	movs	r3, #0
 8001cdc:	617b      	str	r3, [r7, #20]
 8001cde:	e026      	b.n	8001d2e <prvDecrementSemaphoreCount+0x76>
	{
		configASSERT( uxSemaphoreGetCount( xSemaphore ) == ( countMAX_COUNT_VALUE - ux ) );
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f003 f903 	bl	8004eec <uxQueueMessagesWaiting>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d009      	beq.n	8001d06 <prvDecrementSemaphoreCount+0x4e>
 8001cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cf6:	f383 8811 	msr	BASEPRI, r3
 8001cfa:	f3bf 8f6f 	isb	sy
 8001cfe:	f3bf 8f4f 	dsb	sy
 8001d02:	613b      	str	r3, [r7, #16]
 8001d04:	e7fe      	b.n	8001d04 <prvDecrementSemaphoreCount+0x4c>

		if( xSemaphoreTake( xSemaphore, countDONT_BLOCK ) != pdPASS )
 8001d06:	2300      	movs	r3, #0
 8001d08:	2200      	movs	r2, #0
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f002 fedd 	bl	8004acc <xQueueGenericReceive>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d002      	beq.n	8001d1e <prvDecrementSemaphoreCount+0x66>
		{
			/* We expected to be able to take the semaphore. */
			xErrorDetected = pdTRUE;
 8001d18:	4b16      	ldr	r3, [pc, #88]	; (8001d74 <prvDecrementSemaphoreCount+0xbc>)
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	601a      	str	r2, [r3, #0]
		}

		( *puxLoopCounter )++;
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	1c5a      	adds	r2, r3, #1
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	601a      	str	r2, [r3, #0]
	for( ux = 0; ux < countMAX_COUNT_VALUE; ux++ )
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	617b      	str	r3, [r7, #20]
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	2bc7      	cmp	r3, #199	; 0xc7
 8001d32:	d9d5      	bls.n	8001ce0 <prvDecrementSemaphoreCount+0x28>
		taskYIELD();
	#endif

	/* If the semaphore count is zero then we should not be able to	'take'
	the semaphore. */
	configASSERT( uxSemaphoreGetCount( xSemaphore ) == 0 );
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f003 f8d9 	bl	8004eec <uxQueueMessagesWaiting>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d009      	beq.n	8001d54 <prvDecrementSemaphoreCount+0x9c>
 8001d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d44:	f383 8811 	msr	BASEPRI, r3
 8001d48:	f3bf 8f6f 	isb	sy
 8001d4c:	f3bf 8f4f 	dsb	sy
 8001d50:	60fb      	str	r3, [r7, #12]
 8001d52:	e7fe      	b.n	8001d52 <prvDecrementSemaphoreCount+0x9a>
	if( xSemaphoreTake( xSemaphore, countDONT_BLOCK ) == pdPASS )
 8001d54:	2300      	movs	r3, #0
 8001d56:	2200      	movs	r2, #0
 8001d58:	2100      	movs	r1, #0
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f002 feb6 	bl	8004acc <xQueueGenericReceive>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d102      	bne.n	8001d6c <prvDecrementSemaphoreCount+0xb4>
	{
		xErrorDetected = pdTRUE;
 8001d66:	4b03      	ldr	r3, [pc, #12]	; (8001d74 <prvDecrementSemaphoreCount+0xbc>)
 8001d68:	2201      	movs	r2, #1
 8001d6a:	601a      	str	r2, [r3, #0]
	}
}
 8001d6c:	bf00      	nop
 8001d6e:	3718      	adds	r7, #24
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	200000b0 	.word	0x200000b0

08001d78 <prvIncrementSemaphoreCount>:
/*-----------------------------------------------------------*/

static void prvIncrementSemaphoreCount( SemaphoreHandle_t xSemaphore, UBaseType_t *puxLoopCounter )
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
UBaseType_t ux;

	/* If the semaphore count is zero then we should not be able to	'take'
	the semaphore. */
	if( xSemaphoreTake( xSemaphore, countDONT_BLOCK ) == pdPASS )
 8001d82:	2300      	movs	r3, #0
 8001d84:	2200      	movs	r2, #0
 8001d86:	2100      	movs	r1, #0
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f002 fe9f 	bl	8004acc <xQueueGenericReceive>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d102      	bne.n	8001d9a <prvIncrementSemaphoreCount+0x22>
	{
		xErrorDetected = pdTRUE;
 8001d94:	4b1e      	ldr	r3, [pc, #120]	; (8001e10 <prvIncrementSemaphoreCount+0x98>)
 8001d96:	2201      	movs	r2, #1
 8001d98:	601a      	str	r2, [r3, #0]
	}

	/* We should be able to 'give' the semaphore countMAX_COUNT_VALUE times. */
	for( ux = 0; ux < countMAX_COUNT_VALUE; ux++ )
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	e024      	b.n	8001dea <prvIncrementSemaphoreCount+0x72>
	{
		configASSERT( uxSemaphoreGetCount( xSemaphore ) == ux );
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f003 f8a3 	bl	8004eec <uxQueueMessagesWaiting>
 8001da6:	4602      	mov	r2, r0
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d009      	beq.n	8001dc2 <prvIncrementSemaphoreCount+0x4a>
 8001dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001db2:	f383 8811 	msr	BASEPRI, r3
 8001db6:	f3bf 8f6f 	isb	sy
 8001dba:	f3bf 8f4f 	dsb	sy
 8001dbe:	60bb      	str	r3, [r7, #8]
 8001dc0:	e7fe      	b.n	8001dc0 <prvIncrementSemaphoreCount+0x48>

		if( xSemaphoreGive( xSemaphore ) != pdPASS )
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f002 fb1b 	bl	8004404 <xQueueGenericSend>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d002      	beq.n	8001dda <prvIncrementSemaphoreCount+0x62>
		{
			/* We expected to be able to take the semaphore. */
			xErrorDetected = pdTRUE;
 8001dd4:	4b0e      	ldr	r3, [pc, #56]	; (8001e10 <prvIncrementSemaphoreCount+0x98>)
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	601a      	str	r2, [r3, #0]
		}

		( *puxLoopCounter )++;
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	1c5a      	adds	r2, r3, #1
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	601a      	str	r2, [r3, #0]
	for( ux = 0; ux < countMAX_COUNT_VALUE; ux++ )
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	3301      	adds	r3, #1
 8001de8:	60fb      	str	r3, [r7, #12]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2bc7      	cmp	r3, #199	; 0xc7
 8001dee:	d9d7      	bls.n	8001da0 <prvIncrementSemaphoreCount+0x28>
		taskYIELD();
	#endif

	/* If the semaphore count is at its maximum then we should not be able to
	'give' the semaphore. */
	if( xSemaphoreGive( xSemaphore ) == pdPASS )
 8001df0:	2300      	movs	r3, #0
 8001df2:	2200      	movs	r2, #0
 8001df4:	2100      	movs	r1, #0
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f002 fb04 	bl	8004404 <xQueueGenericSend>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d102      	bne.n	8001e08 <prvIncrementSemaphoreCount+0x90>
	{
		xErrorDetected = pdTRUE;
 8001e02:	4b03      	ldr	r3, [pc, #12]	; (8001e10 <prvIncrementSemaphoreCount+0x98>)
 8001e04:	2201      	movs	r2, #1
 8001e06:	601a      	str	r2, [r3, #0]
	}
}
 8001e08:	bf00      	nop
 8001e0a:	3710      	adds	r7, #16
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	200000b0 	.word	0x200000b0

08001e14 <prvCountingSemaphoreTask>:
/*-----------------------------------------------------------*/

static void prvCountingSemaphoreTask( void *pvParameters )
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
		/* Queue a message for printing to say the task has started. */
		vPrintDisplayMessage( &pcTaskStartMsg );
	#endif

	/* The semaphore to be used was passed as the parameter. */
	pxParameter = ( xCountSemStruct * ) pvParameters;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	60fb      	str	r3, [r7, #12]

	/* Did we expect to find the semaphore already at its max count value, or
	at zero? */
	if( pxParameter->uxExpectedStartCount == countSTART_AT_MAX_COUNT )
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	2baa      	cmp	r3, #170	; 0xaa
 8001e26:	d107      	bne.n	8001e38 <prvCountingSemaphoreTask+0x24>
	{
		prvDecrementSemaphoreCount( pxParameter->xSemaphore, &( pxParameter->uxLoopCounter ) );
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	3308      	adds	r3, #8
 8001e30:	4619      	mov	r1, r3
 8001e32:	4610      	mov	r0, r2
 8001e34:	f7ff ff40 	bl	8001cb8 <prvDecrementSemaphoreCount>
	}

	/* Now we expect the semaphore count to be 0, so this time there is an
	error if we can take the semaphore. */
	if( xSemaphoreTake( pxParameter->xSemaphore, 0 ) == pdPASS )
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6818      	ldr	r0, [r3, #0]
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	2200      	movs	r2, #0
 8001e40:	2100      	movs	r1, #0
 8001e42:	f002 fe43 	bl	8004acc <xQueueGenericReceive>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d102      	bne.n	8001e52 <prvCountingSemaphoreTask+0x3e>
	{
		xErrorDetected = pdTRUE;
 8001e4c:	4b09      	ldr	r3, [pc, #36]	; (8001e74 <prvCountingSemaphoreTask+0x60>)
 8001e4e:	2201      	movs	r2, #1
 8001e50:	601a      	str	r2, [r3, #0]
	}

	for( ;; )
	{
		prvIncrementSemaphoreCount( pxParameter->xSemaphore, &( pxParameter->uxLoopCounter ) );
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	3308      	adds	r3, #8
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4610      	mov	r0, r2
 8001e5e:	f7ff ff8b 	bl	8001d78 <prvIncrementSemaphoreCount>
		prvDecrementSemaphoreCount( pxParameter->xSemaphore, &( pxParameter->uxLoopCounter ) );
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	3308      	adds	r3, #8
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4610      	mov	r0, r2
 8001e6e:	f7ff ff23 	bl	8001cb8 <prvDecrementSemaphoreCount>
		prvIncrementSemaphoreCount( pxParameter->xSemaphore, &( pxParameter->uxLoopCounter ) );
 8001e72:	e7ee      	b.n	8001e52 <prvCountingSemaphoreTask+0x3e>
 8001e74:	200000b0 	.word	0x200000b0

08001e78 <vCreateSuicidalTasks>:
TaskHandle_t xCreatedTask1, xCreatedTask2;

/*-----------------------------------------------------------*/

void vCreateSuicidalTasks( unsigned portBASE_TYPE uxPriority )
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af02      	add	r7, sp, #8
 8001e7e:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE *puxPriority;

	/* Create the Creator tasks - passing in as a parameter the priority at which 
	the suicidal tasks should be created. */
	puxPriority = ( unsigned portBASE_TYPE * ) pvPortMalloc( sizeof( unsigned portBASE_TYPE ) );
 8001e80:	2004      	movs	r0, #4
 8001e82:	f001 fef5 	bl	8003c70 <pvPortMalloc>
 8001e86:	60f8      	str	r0, [r7, #12]
	*puxPriority = uxPriority;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	601a      	str	r2, [r3, #0]

	xTaskCreate( vCreateTasks, "CREATOR", deathSTACK_SIZE, ( void * ) puxPriority, uxPriority, NULL );
 8001e8e:	2300      	movs	r3, #0
 8001e90:	9301      	str	r3, [sp, #4]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	9300      	str	r3, [sp, #0]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e9c:	4906      	ldr	r1, [pc, #24]	; (8001eb8 <vCreateSuicidalTasks+0x40>)
 8001e9e:	4807      	ldr	r0, [pc, #28]	; (8001ebc <vCreateSuicidalTasks+0x44>)
 8001ea0:	f003 f9b6 	bl	8005210 <xTaskCreate>

	/* Record the number of tasks that are running now so we know if any of the 
	suicidal tasks have failed to be killed. */
	uxTasksRunningAtStart = uxTaskGetNumberOfTasks();
 8001ea4:	f003 ff70 	bl	8005d88 <uxTaskGetNumberOfTasks>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	4b05      	ldr	r3, [pc, #20]	; (8001ec0 <vCreateSuicidalTasks+0x48>)
 8001eac:	601a      	str	r2, [r3, #0]
}
 8001eae:	bf00      	nop
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	080094ec 	.word	0x080094ec
 8001ebc:	08001f41 	.word	0x08001f41
 8001ec0:	200000d0 	.word	0x200000d0
 8001ec4:	00000000 	.word	0x00000000

08001ec8 <vSuicidalTask>:
/*-----------------------------------------------------------*/

static void vSuicidalTask( void *pvParameters )
{
 8001ec8:	b590      	push	{r4, r7, lr}
 8001eca:	b089      	sub	sp, #36	; 0x24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
portDOUBLE d1, d2;
TaskHandle_t xTaskToKill;
const TickType_t xDelay = ( TickType_t ) 500 / portTICK_PERIOD_MS;
 8001ed0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001ed4:	61bb      	str	r3, [r7, #24]

	if( pvParameters != NULL )
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d003      	beq.n	8001ee4 <vSuicidalTask+0x1c>
	{
		/* This task is periodically created four times.  Tow created tasks are 
		passed a handle to the other task so it can kill it before killing itself.  
		The other task is passed in null. */
		xTaskToKill = *( TaskHandle_t* )pvParameters;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	61fb      	str	r3, [r7, #28]
 8001ee2:	e001      	b.n	8001ee8 <vSuicidalTask+0x20>
	}
	else
	{
		xTaskToKill = NULL;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	61fb      	str	r3, [r7, #28]
	}

	for( ;; )
	{
		/* Do something random just to use some stack and registers. */
		d1 = 2.4;
 8001ee8:	a411      	add	r4, pc, #68	; (adr r4, 8001f30 <vSuicidalTask+0x68>)
 8001eea:	cc18      	ldmia	r4, {r3, r4}
 8001eec:	e9c7 3404 	strd	r3, r4, [r7, #16]
		d2 = 89.2;
 8001ef0:	a411      	add	r4, pc, #68	; (adr r4, 8001f38 <vSuicidalTask+0x70>)
 8001ef2:	cc18      	ldmia	r4, {r3, r4}
 8001ef4:	e9c7 3402 	strd	r3, r4, [r7, #8]
		d2 *= d1;
 8001ef8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001efc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f00:	f7fe fb1e 	bl	8000540 <__aeabi_dmul>
 8001f04:	4603      	mov	r3, r0
 8001f06:	460c      	mov	r4, r1
 8001f08:	e9c7 3402 	strd	r3, r4, [r7, #8]
		vTaskDelay( xDelay );
 8001f0c:	69b8      	ldr	r0, [r7, #24]
 8001f0e:	f003 fbf7 	bl	8005700 <vTaskDelay>

		if( xTaskToKill != NULL )
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d0e7      	beq.n	8001ee8 <vSuicidalTask+0x20>
		{
			/* Make sure the other task has a go before we delete it. */
			vTaskDelay( ( TickType_t ) 0 );
 8001f18:	2000      	movs	r0, #0
 8001f1a:	f003 fbf1 	bl	8005700 <vTaskDelay>
			/* Kill the other task that was created by vCreateTasks(). */
			vTaskDelete( xTaskToKill );
 8001f1e:	69f8      	ldr	r0, [r7, #28]
 8001f20:	f003 fad0 	bl	80054c4 <vTaskDelete>
			/* Kill ourselves. */
			vTaskDelete( NULL );
 8001f24:	2000      	movs	r0, #0
 8001f26:	f003 facd 	bl	80054c4 <vTaskDelete>
		d1 = 2.4;
 8001f2a:	e7dd      	b.n	8001ee8 <vSuicidalTask+0x20>
 8001f2c:	f3af 8000 	nop.w
 8001f30:	33333333 	.word	0x33333333
 8001f34:	40033333 	.word	0x40033333
 8001f38:	cccccccd 	.word	0xcccccccd
 8001f3c:	40564ccc 	.word	0x40564ccc

08001f40 <vCreateTasks>:
	}
}/*lint !e818 !e550 Function prototype must be as per standard for task functions. */
/*-----------------------------------------------------------*/

static void vCreateTasks( void *pvParameters )
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b088      	sub	sp, #32
 8001f44:	af02      	add	r7, sp, #8
 8001f46:	6078      	str	r0, [r7, #4]
const TickType_t xDelay = ( TickType_t ) 1000 / portTICK_PERIOD_MS;
 8001f48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f4c:	617b      	str	r3, [r7, #20]
unsigned portBASE_TYPE uxPriority;
const char * const pcTaskStartMsg = "Create task started.\r\n";
 8001f4e:	4b23      	ldr	r3, [pc, #140]	; (8001fdc <vCreateTasks+0x9c>)
 8001f50:	60fb      	str	r3, [r7, #12]

	/* Queue a message for printing to say the task has started. */
	vPrintDisplayMessage( &pcTaskStartMsg );
 8001f52:	f107 030c 	add.w	r3, r7, #12
 8001f56:	4618      	mov	r0, r3
 8001f58:	f001 f8ac 	bl	80030b4 <vPrintDisplayMessage>

	uxPriority = *( unsigned portBASE_TYPE * ) pvParameters;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	613b      	str	r3, [r7, #16]
	vPortFree( pvParameters );
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f001 ff50 	bl	8003e08 <vPortFree>

	for( ;; )
	{
		/* Just loop round, delaying then creating the four suicidal tasks. */
		vTaskDelay( xDelay );
 8001f68:	6978      	ldr	r0, [r7, #20]
 8001f6a:	f003 fbc9 	bl	8005700 <vTaskDelay>

		xTaskCreate( vSuicidalTask, "SUICIDE1", deathSTACK_SIZE, NULL, uxPriority, &xCreatedTask1 );
 8001f6e:	4b1c      	ldr	r3, [pc, #112]	; (8001fe0 <vCreateTasks+0xa0>)
 8001f70:	9301      	str	r3, [sp, #4]
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	9300      	str	r3, [sp, #0]
 8001f76:	2300      	movs	r3, #0
 8001f78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f7c:	4919      	ldr	r1, [pc, #100]	; (8001fe4 <vCreateTasks+0xa4>)
 8001f7e:	481a      	ldr	r0, [pc, #104]	; (8001fe8 <vCreateTasks+0xa8>)
 8001f80:	f003 f946 	bl	8005210 <xTaskCreate>
		xTaskCreate( vSuicidalTask, "SUICIDE2", deathSTACK_SIZE, &xCreatedTask1, uxPriority, NULL );
 8001f84:	2300      	movs	r3, #0
 8001f86:	9301      	str	r3, [sp, #4]
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	9300      	str	r3, [sp, #0]
 8001f8c:	4b14      	ldr	r3, [pc, #80]	; (8001fe0 <vCreateTasks+0xa0>)
 8001f8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f92:	4916      	ldr	r1, [pc, #88]	; (8001fec <vCreateTasks+0xac>)
 8001f94:	4814      	ldr	r0, [pc, #80]	; (8001fe8 <vCreateTasks+0xa8>)
 8001f96:	f003 f93b 	bl	8005210 <xTaskCreate>

		xTaskCreate( vSuicidalTask, "SUICIDE1", deathSTACK_SIZE, NULL, uxPriority, &xCreatedTask2 );
 8001f9a:	4b15      	ldr	r3, [pc, #84]	; (8001ff0 <vCreateTasks+0xb0>)
 8001f9c:	9301      	str	r3, [sp, #4]
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	9300      	str	r3, [sp, #0]
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fa8:	490e      	ldr	r1, [pc, #56]	; (8001fe4 <vCreateTasks+0xa4>)
 8001faa:	480f      	ldr	r0, [pc, #60]	; (8001fe8 <vCreateTasks+0xa8>)
 8001fac:	f003 f930 	bl	8005210 <xTaskCreate>
		xTaskCreate( vSuicidalTask, "SUICIDE2", deathSTACK_SIZE, &xCreatedTask2, uxPriority, NULL );
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	9301      	str	r3, [sp, #4]
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	9300      	str	r3, [sp, #0]
 8001fb8:	4b0d      	ldr	r3, [pc, #52]	; (8001ff0 <vCreateTasks+0xb0>)
 8001fba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fbe:	490b      	ldr	r1, [pc, #44]	; (8001fec <vCreateTasks+0xac>)
 8001fc0:	4809      	ldr	r0, [pc, #36]	; (8001fe8 <vCreateTasks+0xa8>)
 8001fc2:	f003 f925 	bl	8005210 <xTaskCreate>

		++sCreationCount;
 8001fc6:	4b0b      	ldr	r3, [pc, #44]	; (8001ff4 <vCreateTasks+0xb4>)
 8001fc8:	881b      	ldrh	r3, [r3, #0]
 8001fca:	b21b      	sxth	r3, r3
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	3301      	adds	r3, #1
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	b21a      	sxth	r2, r3
 8001fd4:	4b07      	ldr	r3, [pc, #28]	; (8001ff4 <vCreateTasks+0xb4>)
 8001fd6:	801a      	strh	r2, [r3, #0]
		vTaskDelay( xDelay );
 8001fd8:	e7c6      	b.n	8001f68 <vCreateTasks+0x28>
 8001fda:	bf00      	nop
 8001fdc:	080094f4 	.word	0x080094f4
 8001fe0:	20014a0c 	.word	0x20014a0c
 8001fe4:	0800950c 	.word	0x0800950c
 8001fe8:	08001ec9 	.word	0x08001ec9
 8001fec:	08009518 	.word	0x08009518
 8001ff0:	20014a10 	.word	0x20014a10
 8001ff4:	200000cc 	.word	0x200000cc

08001ff8 <xIsCreateTaskStillRunning>:
/*-----------------------------------------------------------*/

/* This is called to check that the creator task is still running and that there 
are not any more than four extra tasks. */
portBASE_TYPE xIsCreateTaskStillRunning( void )
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
static short sLastCreationCount = 0;
short sReturn = pdTRUE;
 8001ffe:	2301      	movs	r3, #1
 8002000:	80fb      	strh	r3, [r7, #6]
unsigned portBASE_TYPE uxTasksRunningNow;

	if( sLastCreationCount == sCreationCount )
 8002002:	4b12      	ldr	r3, [pc, #72]	; (800204c <xIsCreateTaskStillRunning+0x54>)
 8002004:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002008:	4b11      	ldr	r3, [pc, #68]	; (8002050 <xIsCreateTaskStillRunning+0x58>)
 800200a:	881b      	ldrh	r3, [r3, #0]
 800200c:	b21b      	sxth	r3, r3
 800200e:	429a      	cmp	r2, r3
 8002010:	d101      	bne.n	8002016 <xIsCreateTaskStillRunning+0x1e>
	{
		sReturn = pdFALSE;
 8002012:	2300      	movs	r3, #0
 8002014:	80fb      	strh	r3, [r7, #6]
	}
	
	uxTasksRunningNow = uxTaskGetNumberOfTasks();
 8002016:	f003 feb7 	bl	8005d88 <uxTaskGetNumberOfTasks>
 800201a:	6038      	str	r0, [r7, #0]

	if( uxTasksRunningNow < uxTasksRunningAtStart )
 800201c:	4b0d      	ldr	r3, [pc, #52]	; (8002054 <xIsCreateTaskStillRunning+0x5c>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	429a      	cmp	r2, r3
 8002024:	d202      	bcs.n	800202c <xIsCreateTaskStillRunning+0x34>
	{
		sReturn = pdFALSE;
 8002026:	2300      	movs	r3, #0
 8002028:	80fb      	strh	r3, [r7, #6]
 800202a:	e008      	b.n	800203e <xIsCreateTaskStillRunning+0x46>
	}
	else if( ( uxTasksRunningNow - uxTasksRunningAtStart ) > uxMaxNumberOfExtraTasksRunning )
 800202c:	4b09      	ldr	r3, [pc, #36]	; (8002054 <xIsCreateTaskStillRunning+0x5c>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	2205      	movs	r2, #5
 8002036:	4293      	cmp	r3, r2
 8002038:	d901      	bls.n	800203e <xIsCreateTaskStillRunning+0x46>
	{
		sReturn = pdFALSE;
 800203a:	2300      	movs	r3, #0
 800203c:	80fb      	strh	r3, [r7, #6]
	else
	{
		/* Everything is okay. */
	}

	return sReturn;
 800203e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8002042:	4618      	mov	r0, r3
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	200000d4 	.word	0x200000d4
 8002050:	200000cc 	.word	0x200000cc
 8002054:	200000d0 	.word	0x200000d0

08002058 <vStartDynamicPriorityTasks>:
/*
 * Start the seven tasks as described at the top of the file.
 * Note that the limited count task is given a higher priority.
 */
void vStartDynamicPriorityTasks( void )
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af02      	add	r7, sp, #8
	xSuspendedTestQueue = xQueueCreate( priSUSPENDED_QUEUE_LENGTH, sizeof( unsigned long ) );
 800205e:	2200      	movs	r2, #0
 8002060:	2104      	movs	r1, #4
 8002062:	2001      	movs	r0, #1
 8002064:	f002 f854 	bl	8004110 <xQueueGenericCreate>
 8002068:	4602      	mov	r2, r0
 800206a:	4b25      	ldr	r3, [pc, #148]	; (8002100 <vStartDynamicPriorityTasks+0xa8>)
 800206c:	601a      	str	r2, [r3, #0]
	xTaskCreate( vContinuousIncrementTask, "CONT_INC", priSTACK_SIZE, ( void * ) &ulCounter, tskIDLE_PRIORITY, &xContinuousIncrementHandle );
 800206e:	4b25      	ldr	r3, [pc, #148]	; (8002104 <vStartDynamicPriorityTasks+0xac>)
 8002070:	9301      	str	r3, [sp, #4]
 8002072:	2300      	movs	r3, #0
 8002074:	9300      	str	r3, [sp, #0]
 8002076:	4b24      	ldr	r3, [pc, #144]	; (8002108 <vStartDynamicPriorityTasks+0xb0>)
 8002078:	2282      	movs	r2, #130	; 0x82
 800207a:	4924      	ldr	r1, [pc, #144]	; (800210c <vStartDynamicPriorityTasks+0xb4>)
 800207c:	4824      	ldr	r0, [pc, #144]	; (8002110 <vStartDynamicPriorityTasks+0xb8>)
 800207e:	f003 f8c7 	bl	8005210 <xTaskCreate>
	xTaskCreate( vLimitedIncrementTask, "LIM_INC", priSTACK_SIZE, ( void * ) &ulCounter, tskIDLE_PRIORITY + 1, &xLimitedIncrementHandle );
 8002082:	4b24      	ldr	r3, [pc, #144]	; (8002114 <vStartDynamicPriorityTasks+0xbc>)
 8002084:	9301      	str	r3, [sp, #4]
 8002086:	2301      	movs	r3, #1
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	4b1f      	ldr	r3, [pc, #124]	; (8002108 <vStartDynamicPriorityTasks+0xb0>)
 800208c:	2282      	movs	r2, #130	; 0x82
 800208e:	4922      	ldr	r1, [pc, #136]	; (8002118 <vStartDynamicPriorityTasks+0xc0>)
 8002090:	4822      	ldr	r0, [pc, #136]	; (800211c <vStartDynamicPriorityTasks+0xc4>)
 8002092:	f003 f8bd 	bl	8005210 <xTaskCreate>
	xTaskCreate( vCounterControlTask, "C_CTRL", priSTACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );
 8002096:	2300      	movs	r3, #0
 8002098:	9301      	str	r3, [sp, #4]
 800209a:	2300      	movs	r3, #0
 800209c:	9300      	str	r3, [sp, #0]
 800209e:	2300      	movs	r3, #0
 80020a0:	2282      	movs	r2, #130	; 0x82
 80020a2:	491f      	ldr	r1, [pc, #124]	; (8002120 <vStartDynamicPriorityTasks+0xc8>)
 80020a4:	481f      	ldr	r0, [pc, #124]	; (8002124 <vStartDynamicPriorityTasks+0xcc>)
 80020a6:	f003 f8b3 	bl	8005210 <xTaskCreate>
	xTaskCreate( vQueueSendWhenSuspendedTask, "SUSP_SEND", priSTACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );
 80020aa:	2300      	movs	r3, #0
 80020ac:	9301      	str	r3, [sp, #4]
 80020ae:	2300      	movs	r3, #0
 80020b0:	9300      	str	r3, [sp, #0]
 80020b2:	2300      	movs	r3, #0
 80020b4:	2282      	movs	r2, #130	; 0x82
 80020b6:	491c      	ldr	r1, [pc, #112]	; (8002128 <vStartDynamicPriorityTasks+0xd0>)
 80020b8:	481c      	ldr	r0, [pc, #112]	; (800212c <vStartDynamicPriorityTasks+0xd4>)
 80020ba:	f003 f8a9 	bl	8005210 <xTaskCreate>
	xTaskCreate( vQueueReceiveWhenSuspendedTask, "SUSP_RECV", priSTACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );
 80020be:	2300      	movs	r3, #0
 80020c0:	9301      	str	r3, [sp, #4]
 80020c2:	2300      	movs	r3, #0
 80020c4:	9300      	str	r3, [sp, #0]
 80020c6:	2300      	movs	r3, #0
 80020c8:	2282      	movs	r2, #130	; 0x82
 80020ca:	4919      	ldr	r1, [pc, #100]	; (8002130 <vStartDynamicPriorityTasks+0xd8>)
 80020cc:	4819      	ldr	r0, [pc, #100]	; (8002134 <vStartDynamicPriorityTasks+0xdc>)
 80020ce:	f003 f89f 	bl	8005210 <xTaskCreate>
	xTaskCreate( prvChangePriorityWhenSuspendedTask, "1st_P_CHANGE", priSTACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL );
 80020d2:	2300      	movs	r3, #0
 80020d4:	9301      	str	r3, [sp, #4]
 80020d6:	2301      	movs	r3, #1
 80020d8:	9300      	str	r3, [sp, #0]
 80020da:	2300      	movs	r3, #0
 80020dc:	2282      	movs	r2, #130	; 0x82
 80020de:	4916      	ldr	r1, [pc, #88]	; (8002138 <vStartDynamicPriorityTasks+0xe0>)
 80020e0:	4816      	ldr	r0, [pc, #88]	; (800213c <vStartDynamicPriorityTasks+0xe4>)
 80020e2:	f003 f895 	bl	8005210 <xTaskCreate>
	xTaskCreate( prvChangePriorityHelperTask, "2nd_P_CHANGE", priSTACK_SIZE, NULL, tskIDLE_PRIORITY, &xChangePriorityWhenSuspendedHandle );
 80020e6:	4b16      	ldr	r3, [pc, #88]	; (8002140 <vStartDynamicPriorityTasks+0xe8>)
 80020e8:	9301      	str	r3, [sp, #4]
 80020ea:	2300      	movs	r3, #0
 80020ec:	9300      	str	r3, [sp, #0]
 80020ee:	2300      	movs	r3, #0
 80020f0:	2282      	movs	r2, #130	; 0x82
 80020f2:	4914      	ldr	r1, [pc, #80]	; (8002144 <vStartDynamicPriorityTasks+0xec>)
 80020f4:	4814      	ldr	r0, [pc, #80]	; (8002148 <vStartDynamicPriorityTasks+0xf0>)
 80020f6:	f003 f88b 	bl	8005210 <xTaskCreate>
}
 80020fa:	bf00      	nop
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	20014a14 	.word	0x20014a14
 8002104:	200000d8 	.word	0x200000d8
 8002108:	200000e4 	.word	0x200000e4
 800210c:	08009524 	.word	0x08009524
 8002110:	08002179 	.word	0x08002179
 8002114:	200000dc 	.word	0x200000dc
 8002118:	08009530 	.word	0x08009530
 800211c:	0800214d 	.word	0x0800214d
 8002120:	08009538 	.word	0x08009538
 8002124:	080021ad 	.word	0x080021ad
 8002128:	08009540 	.word	0x08009540
 800212c:	080022ad 	.word	0x080022ad
 8002130:	0800954c 	.word	0x0800954c
 8002134:	08002329 	.word	0x08002329
 8002138:	08009558 	.word	0x08009558
 800213c:	080023bd 	.word	0x080023bd
 8002140:	200000e0 	.word	0x200000e0
 8002144:	08009568 	.word	0x08009568
 8002148:	0800248d 	.word	0x0800248d

0800214c <vLimitedIncrementTask>:
/*
 * Just loops around incrementing the shared variable until the limit has been
 * reached.  Once the limit has been reached it suspends itself. 
 */
static void vLimitedIncrementTask( void * pvParameters )
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
unsigned long *pulCounter;

	/* Take a pointer to the shared variable from the parameters passed into
	the task. */
	pulCounter = ( unsigned long * ) pvParameters;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	60fb      	str	r3, [r7, #12]

	/* This will run before the control task, so the first thing it does is
	suspend - the control task will resume it when ready. */
	vTaskSuspend( NULL );
 8002158:	2000      	movs	r0, #0
 800215a:	f003 fbdf 	bl	800591c <vTaskSuspend>

	for( ;; )
	{
		/* Just count up to a value then suspend. */
		( *pulCounter )++;	
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	1c5a      	adds	r2, r3, #1
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	601a      	str	r2, [r3, #0]
		
		if( *pulCounter >= priMAX_COUNT )
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2bfe      	cmp	r3, #254	; 0xfe
 800216e:	d9f6      	bls.n	800215e <vLimitedIncrementTask+0x12>
		{
			vTaskSuspend( NULL );
 8002170:	2000      	movs	r0, #0
 8002172:	f003 fbd3 	bl	800591c <vTaskSuspend>
		( *pulCounter )++;	
 8002176:	e7f2      	b.n	800215e <vLimitedIncrementTask+0x12>

08002178 <vContinuousIncrementTask>:
/*
 * Just keep counting the shared variable up.  The control task will suspend
 * this task when it wants.
 */
static void vContinuousIncrementTask( void * pvParameters )
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
unsigned long *pulCounter;
unsigned portBASE_TYPE uxOurPriority;

	/* Take a pointer to the shared variable from the parameters passed into
	the task. */
	pulCounter = ( unsigned long * ) pvParameters;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	60fb      	str	r3, [r7, #12]

	/* Query our priority so we can raise it when exclusive access to the 
	shared variable is required. */
	uxOurPriority = uxTaskPriorityGet( NULL );
 8002184:	2000      	movs	r0, #0
 8002186:	f003 faf3 	bl	8005770 <uxTaskPriorityGet>
 800218a:	60b8      	str	r0, [r7, #8]

	for( ;; )
	{
		/* Raise our priority above the controller task to ensure a context
		switch does not occur while we are accessing this variable. */
		vTaskPrioritySet( NULL, uxOurPriority + 1 );
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	3301      	adds	r3, #1
 8002190:	4619      	mov	r1, r3
 8002192:	2000      	movs	r0, #0
 8002194:	f003 fb06 	bl	80057a4 <vTaskPrioritySet>
			( *pulCounter )++;		
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	1c5a      	adds	r2, r3, #1
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	601a      	str	r2, [r3, #0]
		vTaskPrioritySet( NULL, uxOurPriority );
 80021a2:	68b9      	ldr	r1, [r7, #8]
 80021a4:	2000      	movs	r0, #0
 80021a6:	f003 fafd 	bl	80057a4 <vTaskPrioritySet>
		vTaskPrioritySet( NULL, uxOurPriority + 1 );
 80021aa:	e7ef      	b.n	800218c <vContinuousIncrementTask+0x14>

080021ac <vCounterControlTask>:

/*
 * Controller task as described above.
 */
static void vCounterControlTask( void * pvParameters )
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
unsigned long ulLastCounter;
short sLoops;
short sError = pdFALSE;
 80021b4:	2300      	movs	r3, #0
 80021b6:	82bb      	strh	r3, [r7, #20]
const char * const pcTaskStartMsg = "Priority manipulation tasks started.\r\n";
 80021b8:	4b36      	ldr	r3, [pc, #216]	; (8002294 <vCounterControlTask+0xe8>)
 80021ba:	60fb      	str	r3, [r7, #12]
const char * const pcTaskFailMsg = "Priority manipulation Task Failed\r\n";
 80021bc:	4b36      	ldr	r3, [pc, #216]	; (8002298 <vCounterControlTask+0xec>)
 80021be:	60bb      	str	r3, [r7, #8]

	/* Just to stop warning messages. */
	( void ) pvParameters;

	/* Queue a message for printing to say the task has started. */
	vPrintDisplayMessage( &pcTaskStartMsg );
 80021c0:	f107 030c 	add.w	r3, r7, #12
 80021c4:	4618      	mov	r0, r3
 80021c6:	f000 ff75 	bl	80030b4 <vPrintDisplayMessage>

	for( ;; )
	{
		/* Start with the counter at zero. */
		ulCounter = ( unsigned long ) 0;
 80021ca:	4b34      	ldr	r3, [pc, #208]	; (800229c <vCounterControlTask+0xf0>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]

		/* First section : */

		/* Check the continuous count task is running. */
		for( sLoops = 0; sLoops < priLOOPS; sLoops++ )
 80021d0:	2300      	movs	r3, #0
 80021d2:	82fb      	strh	r3, [r7, #22]
 80021d4:	e029      	b.n	800222a <vCounterControlTask+0x7e>
		{
			/* Suspend the continuous count task so we can take a mirror of the
			shared variable without risk of corruption. */
			vTaskSuspend( xContinuousIncrementHandle );
 80021d6:	4b32      	ldr	r3, [pc, #200]	; (80022a0 <vCounterControlTask+0xf4>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4618      	mov	r0, r3
 80021dc:	f003 fb9e 	bl	800591c <vTaskSuspend>
				ulLastCounter = ulCounter;
 80021e0:	4b2e      	ldr	r3, [pc, #184]	; (800229c <vCounterControlTask+0xf0>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	613b      	str	r3, [r7, #16]
			vTaskResume( xContinuousIncrementHandle );
 80021e6:	4b2e      	ldr	r3, [pc, #184]	; (80022a0 <vCounterControlTask+0xf4>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f003 fc5c 	bl	8005aa8 <vTaskResume>
			
			/* Now delay to ensure the other task has processor time. */
			vTaskDelay( priSLEEP_TIME );
 80021f0:	2032      	movs	r0, #50	; 0x32
 80021f2:	f003 fa85 	bl	8005700 <vTaskDelay>

			/* Check the shared variable again.  This time to ensure mutual 
			exclusion the whole scheduler will be locked.  This is just for
			demo purposes! */
			vTaskSuspendAll();
 80021f6:	f003 fd09 	bl	8005c0c <vTaskSuspendAll>
			{
				if( ulLastCounter == ulCounter )
 80021fa:	4b28      	ldr	r3, [pc, #160]	; (800229c <vCounterControlTask+0xf0>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	693a      	ldr	r2, [r7, #16]
 8002200:	429a      	cmp	r2, r3
 8002202:	d10a      	bne.n	800221a <vCounterControlTask+0x6e>
				{
					/* The shared variable has not changed.  There is a problem
					with the continuous count task so flag an error. */
					sError = pdTRUE;
 8002204:	2301      	movs	r3, #1
 8002206:	82bb      	strh	r3, [r7, #20]
					xTaskResumeAll();
 8002208:	f003 fd0e 	bl	8005c28 <xTaskResumeAll>
						vPrintDisplayMessage( &pcTaskFailMsg );
 800220c:	f107 0308 	add.w	r3, r7, #8
 8002210:	4618      	mov	r0, r3
 8002212:	f000 ff4f 	bl	80030b4 <vPrintDisplayMessage>
					vTaskSuspendAll();
 8002216:	f003 fcf9 	bl	8005c0c <vTaskSuspendAll>
				}
			}
			xTaskResumeAll();
 800221a:	f003 fd05 	bl	8005c28 <xTaskResumeAll>
		for( sLoops = 0; sLoops < priLOOPS; sLoops++ )
 800221e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002222:	b29b      	uxth	r3, r3
 8002224:	3301      	adds	r3, #1
 8002226:	b29b      	uxth	r3, r3
 8002228:	82fb      	strh	r3, [r7, #22]
 800222a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800222e:	2b04      	cmp	r3, #4
 8002230:	ddd1      	ble.n	80021d6 <vCounterControlTask+0x2a>


		/* Second section: */

		/* Suspend the continuous counter task so it stops accessing the shared variable. */
		vTaskSuspend( xContinuousIncrementHandle );
 8002232:	4b1b      	ldr	r3, [pc, #108]	; (80022a0 <vCounterControlTask+0xf4>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4618      	mov	r0, r3
 8002238:	f003 fb70 	bl	800591c <vTaskSuspend>

		/* Reset the variable. */
		ulCounter = ( unsigned long ) 0;
 800223c:	4b17      	ldr	r3, [pc, #92]	; (800229c <vCounterControlTask+0xf0>)
 800223e:	2200      	movs	r2, #0
 8002240:	601a      	str	r2, [r3, #0]
		/* Resume the limited count task which has a higher priority than us.
		We should therefore not return from this call until the limited count
		task has suspended itself with a known value in the counter variable. 
		The scheduler suspension is not necessary but is included for test
		purposes. */
		vTaskSuspendAll();
 8002242:	f003 fce3 	bl	8005c0c <vTaskSuspendAll>
			vTaskResume( xLimitedIncrementHandle );
 8002246:	4b17      	ldr	r3, [pc, #92]	; (80022a4 <vCounterControlTask+0xf8>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4618      	mov	r0, r3
 800224c:	f003 fc2c 	bl	8005aa8 <vTaskResume>
		xTaskResumeAll();
 8002250:	f003 fcea 	bl	8005c28 <xTaskResumeAll>

		/* Does the counter variable have the expected value? */
		if( ulCounter != priMAX_COUNT )
 8002254:	4b11      	ldr	r3, [pc, #68]	; (800229c <vCounterControlTask+0xf0>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2bff      	cmp	r3, #255	; 0xff
 800225a:	d006      	beq.n	800226a <vCounterControlTask+0xbe>
		{
			sError = pdTRUE;
 800225c:	2301      	movs	r3, #1
 800225e:	82bb      	strh	r3, [r7, #20]
			vPrintDisplayMessage( &pcTaskFailMsg );
 8002260:	f107 0308 	add.w	r3, r7, #8
 8002264:	4618      	mov	r0, r3
 8002266:	f000 ff25 	bl	80030b4 <vPrintDisplayMessage>
		}

		if( sError == pdFALSE )
 800226a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d109      	bne.n	8002286 <vCounterControlTask+0xda>
		{
			/* If no errors have occurred then increment the check variable. */
			portENTER_CRITICAL();
 8002272:	f001 fbed 	bl	8003a50 <vPortEnterCritical>
				usCheckVariable++;
 8002276:	4b0c      	ldr	r3, [pc, #48]	; (80022a8 <vCounterControlTask+0xfc>)
 8002278:	881b      	ldrh	r3, [r3, #0]
 800227a:	3301      	adds	r3, #1
 800227c:	b29a      	uxth	r2, r3
 800227e:	4b0a      	ldr	r3, [pc, #40]	; (80022a8 <vCounterControlTask+0xfc>)
 8002280:	801a      	strh	r2, [r3, #0]
			portEXIT_CRITICAL();
 8002282:	f001 fc13 	bl	8003aac <vPortExitCritical>
		#if configUSE_PREEMPTION == 0
			taskYIELD();
		#endif

		/* Resume the continuous count task and do it all again. */
		vTaskResume( xContinuousIncrementHandle );
 8002286:	4b06      	ldr	r3, [pc, #24]	; (80022a0 <vCounterControlTask+0xf4>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4618      	mov	r0, r3
 800228c:	f003 fc0c 	bl	8005aa8 <vTaskResume>
		ulCounter = ( unsigned long ) 0;
 8002290:	e79b      	b.n	80021ca <vCounterControlTask+0x1e>
 8002292:	bf00      	nop
 8002294:	08009578 	.word	0x08009578
 8002298:	080095a0 	.word	0x080095a0
 800229c:	200000e4 	.word	0x200000e4
 80022a0:	200000d8 	.word	0x200000d8
 80022a4:	200000dc 	.word	0x200000dc
 80022a8:	200000ec 	.word	0x200000ec

080022ac <vQueueSendWhenSuspendedTask>:
	}
}
/*-----------------------------------------------------------*/

static void vQueueSendWhenSuspendedTask( void *pvParameters )
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
static unsigned long ulValueToSend = ( unsigned long ) 0;
const char * const pcTaskStartMsg = "Queue send while suspended task started.\r\n";
 80022b4:	4b17      	ldr	r3, [pc, #92]	; (8002314 <vQueueSendWhenSuspendedTask+0x68>)
 80022b6:	60fb      	str	r3, [r7, #12]
const char * const pcTaskFailMsg = "Queue send while suspended failed.\r\n";
 80022b8:	4b17      	ldr	r3, [pc, #92]	; (8002318 <vQueueSendWhenSuspendedTask+0x6c>)
 80022ba:	60bb      	str	r3, [r7, #8]

	/* Just to stop warning messages. */
	( void ) pvParameters;

	/* Queue a message for printing to say the task has started. */
	vPrintDisplayMessage( &pcTaskStartMsg );
 80022bc:	f107 030c 	add.w	r3, r7, #12
 80022c0:	4618      	mov	r0, r3
 80022c2:	f000 fef7 	bl	80030b4 <vPrintDisplayMessage>

	for( ;; )
	{
		vTaskSuspendAll();
 80022c6:	f003 fca1 	bl	8005c0c <vTaskSuspendAll>
		{
			/* We must not block while the scheduler is suspended! */
			if( xQueueSend( xSuspendedTestQueue, ( void * ) &ulValueToSend, priNO_BLOCK ) != pdTRUE )
 80022ca:	4b14      	ldr	r3, [pc, #80]	; (800231c <vQueueSendWhenSuspendedTask+0x70>)
 80022cc:	6818      	ldr	r0, [r3, #0]
 80022ce:	2300      	movs	r3, #0
 80022d0:	2200      	movs	r2, #0
 80022d2:	4913      	ldr	r1, [pc, #76]	; (8002320 <vQueueSendWhenSuspendedTask+0x74>)
 80022d4:	f002 f896 	bl	8004404 <xQueueGenericSend>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d00f      	beq.n	80022fe <vQueueSendWhenSuspendedTask+0x52>
			{
				if( xSuspendedQueueSendError == pdFALSE )
 80022de:	4b11      	ldr	r3, [pc, #68]	; (8002324 <vQueueSendWhenSuspendedTask+0x78>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d108      	bne.n	80022f8 <vQueueSendWhenSuspendedTask+0x4c>
				{
					xTaskResumeAll();
 80022e6:	f003 fc9f 	bl	8005c28 <xTaskResumeAll>
						vPrintDisplayMessage( &pcTaskFailMsg );
 80022ea:	f107 0308 	add.w	r3, r7, #8
 80022ee:	4618      	mov	r0, r3
 80022f0:	f000 fee0 	bl	80030b4 <vPrintDisplayMessage>
					vTaskSuspendAll();
 80022f4:	f003 fc8a 	bl	8005c0c <vTaskSuspendAll>
				}

				xSuspendedQueueSendError = pdTRUE;
 80022f8:	4b0a      	ldr	r3, [pc, #40]	; (8002324 <vQueueSendWhenSuspendedTask+0x78>)
 80022fa:	2201      	movs	r2, #1
 80022fc:	601a      	str	r2, [r3, #0]
			}
		}
		xTaskResumeAll();
 80022fe:	f003 fc93 	bl	8005c28 <xTaskResumeAll>

		vTaskDelay( priSLEEP_TIME );
 8002302:	2032      	movs	r0, #50	; 0x32
 8002304:	f003 f9fc 	bl	8005700 <vTaskDelay>

		++ulValueToSend;
 8002308:	4b05      	ldr	r3, [pc, #20]	; (8002320 <vQueueSendWhenSuspendedTask+0x74>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	3301      	adds	r3, #1
 800230e:	4a04      	ldr	r2, [pc, #16]	; (8002320 <vQueueSendWhenSuspendedTask+0x74>)
 8002310:	6013      	str	r3, [r2, #0]
		vTaskSuspendAll();
 8002312:	e7d8      	b.n	80022c6 <vQueueSendWhenSuspendedTask+0x1a>
 8002314:	080095c4 	.word	0x080095c4
 8002318:	080095f0 	.word	0x080095f0
 800231c:	20014a14 	.word	0x20014a14
 8002320:	200000fc 	.word	0x200000fc
 8002324:	200000f0 	.word	0x200000f0

08002328 <vQueueReceiveWhenSuspendedTask>:
	}
}
/*-----------------------------------------------------------*/

static void vQueueReceiveWhenSuspendedTask( void *pvParameters )
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
static unsigned long ulExpectedValue = ( unsigned long ) 0, ulReceivedValue;
const char * const pcTaskStartMsg = "Queue receive while suspended task started.\r\n";
 8002330:	4b1c      	ldr	r3, [pc, #112]	; (80023a4 <vQueueReceiveWhenSuspendedTask+0x7c>)
 8002332:	613b      	str	r3, [r7, #16]
const char * const pcTaskFailMsg = "Queue receive while suspended failed.\r\n";
 8002334:	4b1c      	ldr	r3, [pc, #112]	; (80023a8 <vQueueReceiveWhenSuspendedTask+0x80>)
 8002336:	60fb      	str	r3, [r7, #12]

	/* Just to stop warning messages. */
	( void ) pvParameters;

	/* Queue a message for printing to say the task has started. */
	vPrintDisplayMessage( &pcTaskStartMsg );
 8002338:	f107 0310 	add.w	r3, r7, #16
 800233c:	4618      	mov	r0, r3
 800233e:	f000 feb9 	bl	80030b4 <vPrintDisplayMessage>
			/* Suspending the scheduler here is fairly pointless and 
			undesirable for a normal application.  It is done here purely
			to test the scheduler.  The inner xTaskResumeAll() should
			never return pdTRUE as the scheduler is still locked by the
			outer call. */
			vTaskSuspendAll();
 8002342:	f003 fc63 	bl	8005c0c <vTaskSuspendAll>
			{
				vTaskSuspendAll();
 8002346:	f003 fc61 	bl	8005c0c <vTaskSuspendAll>
				{
					xGotValue = xQueueReceive( xSuspendedTestQueue, ( void * ) &ulReceivedValue, priNO_BLOCK );
 800234a:	4b18      	ldr	r3, [pc, #96]	; (80023ac <vQueueReceiveWhenSuspendedTask+0x84>)
 800234c:	6818      	ldr	r0, [r3, #0]
 800234e:	2300      	movs	r3, #0
 8002350:	2200      	movs	r2, #0
 8002352:	4917      	ldr	r1, [pc, #92]	; (80023b0 <vQueueReceiveWhenSuspendedTask+0x88>)
 8002354:	f002 fbba 	bl	8004acc <xQueueGenericReceive>
 8002358:	6178      	str	r0, [r7, #20]
				}
				if( xTaskResumeAll() )
 800235a:	f003 fc65 	bl	8005c28 <xTaskResumeAll>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d002      	beq.n	800236a <vQueueReceiveWhenSuspendedTask+0x42>
				{
					xSuspendedQueueReceiveError = pdTRUE;
 8002364:	4b13      	ldr	r3, [pc, #76]	; (80023b4 <vQueueReceiveWhenSuspendedTask+0x8c>)
 8002366:	2201      	movs	r2, #1
 8002368:	601a      	str	r2, [r3, #0]
				}
			}
			xTaskResumeAll();
 800236a:	f003 fc5d 	bl	8005c28 <xTaskResumeAll>

			#if configUSE_PREEMPTION == 0
				taskYIELD();
			#endif

		} while( xGotValue == pdFALSE );
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d0e6      	beq.n	8002342 <vQueueReceiveWhenSuspendedTask+0x1a>

		if( ulReceivedValue != ulExpectedValue )
 8002374:	4b0e      	ldr	r3, [pc, #56]	; (80023b0 <vQueueReceiveWhenSuspendedTask+0x88>)
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	4b0f      	ldr	r3, [pc, #60]	; (80023b8 <vQueueReceiveWhenSuspendedTask+0x90>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	429a      	cmp	r2, r3
 800237e:	d00b      	beq.n	8002398 <vQueueReceiveWhenSuspendedTask+0x70>
		{
			if( xSuspendedQueueReceiveError == pdFALSE )
 8002380:	4b0c      	ldr	r3, [pc, #48]	; (80023b4 <vQueueReceiveWhenSuspendedTask+0x8c>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d104      	bne.n	8002392 <vQueueReceiveWhenSuspendedTask+0x6a>
			{
				vPrintDisplayMessage( &pcTaskFailMsg );
 8002388:	f107 030c 	add.w	r3, r7, #12
 800238c:	4618      	mov	r0, r3
 800238e:	f000 fe91 	bl	80030b4 <vPrintDisplayMessage>
			}
			xSuspendedQueueReceiveError = pdTRUE;
 8002392:	4b08      	ldr	r3, [pc, #32]	; (80023b4 <vQueueReceiveWhenSuspendedTask+0x8c>)
 8002394:	2201      	movs	r2, #1
 8002396:	601a      	str	r2, [r3, #0]
		}

		++ulExpectedValue;
 8002398:	4b07      	ldr	r3, [pc, #28]	; (80023b8 <vQueueReceiveWhenSuspendedTask+0x90>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	3301      	adds	r3, #1
 800239e:	4a06      	ldr	r2, [pc, #24]	; (80023b8 <vQueueReceiveWhenSuspendedTask+0x90>)
 80023a0:	6013      	str	r3, [r2, #0]
	for( ;; )
 80023a2:	e7ce      	b.n	8002342 <vQueueReceiveWhenSuspendedTask+0x1a>
 80023a4:	08009618 	.word	0x08009618
 80023a8:	08009648 	.word	0x08009648
 80023ac:	20014a14 	.word	0x20014a14
 80023b0:	20000100 	.word	0x20000100
 80023b4:	200000f4 	.word	0x200000f4
 80023b8:	20000104 	.word	0x20000104

080023bc <prvChangePriorityWhenSuspendedTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvChangePriorityWhenSuspendedTask( void *pvParameters )
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
const char * const pcTaskStartMsg = "Priority change when suspended task started.\r\n";
 80023c4:	4b2c      	ldr	r3, [pc, #176]	; (8002478 <prvChangePriorityWhenSuspendedTask+0xbc>)
 80023c6:	60fb      	str	r3, [r7, #12]
const char * const pcTaskFailMsg = "Priority change when suspended task failed.\r\n";
 80023c8:	4b2c      	ldr	r3, [pc, #176]	; (800247c <prvChangePriorityWhenSuspendedTask+0xc0>)
 80023ca:	60bb      	str	r3, [r7, #8]

	/* Just to stop warning messages. */
	( void ) pvParameters;

	/* Queue a message for printing to say the task has started. */
	vPrintDisplayMessage( &pcTaskStartMsg );	
 80023cc:	f107 030c 	add.w	r3, r7, #12
 80023d0:	4618      	mov	r0, r3
 80023d2:	f000 fe6f 	bl	80030b4 <vPrintDisplayMessage>
	
	for( ;; )
	{
		/* Start with the counter at 0 so we know what the counter should be
		when we check it next. */
		ulPrioritySetCounter = ( unsigned long ) 0;
 80023d6:	4b2a      	ldr	r3, [pc, #168]	; (8002480 <prvChangePriorityWhenSuspendedTask+0xc4>)
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]

		/* Resume the helper task.  At this time it has a priority lower than
		ours so no context switch should occur. */
		vTaskResume( xChangePriorityWhenSuspendedHandle );
 80023dc:	4b29      	ldr	r3, [pc, #164]	; (8002484 <prvChangePriorityWhenSuspendedTask+0xc8>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f003 fb61 	bl	8005aa8 <vTaskResume>

		/* Check to ensure the task just resumed has not executed. */
		portENTER_CRITICAL();
 80023e6:	f001 fb33 	bl	8003a50 <vPortEnterCritical>
		{
			if( ulPrioritySetCounter != ( unsigned long ) 0 )
 80023ea:	4b25      	ldr	r3, [pc, #148]	; (8002480 <prvChangePriorityWhenSuspendedTask+0xc4>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d007      	beq.n	8002402 <prvChangePriorityWhenSuspendedTask+0x46>
			{
				xPriorityRaiseWhenSuspendedError = pdTRUE;
 80023f2:	4b25      	ldr	r3, [pc, #148]	; (8002488 <prvChangePriorityWhenSuspendedTask+0xcc>)
 80023f4:	2201      	movs	r2, #1
 80023f6:	601a      	str	r2, [r3, #0]
				vPrintDisplayMessage( &pcTaskFailMsg );
 80023f8:	f107 0308 	add.w	r3, r7, #8
 80023fc:	4618      	mov	r0, r3
 80023fe:	f000 fe59 	bl	80030b4 <vPrintDisplayMessage>
			}
		}
		portEXIT_CRITICAL();
 8002402:	f001 fb53 	bl	8003aac <vPortExitCritical>

		/* Now try raising the priority while the scheduler is suspended. */
		vTaskSuspendAll();
 8002406:	f003 fc01 	bl	8005c0c <vTaskSuspendAll>
		{
			vTaskPrioritySet( xChangePriorityWhenSuspendedHandle, ( configMAX_PRIORITIES - 1 ) );
 800240a:	4b1e      	ldr	r3, [pc, #120]	; (8002484 <prvChangePriorityWhenSuspendedTask+0xc8>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2104      	movs	r1, #4
 8002410:	4618      	mov	r0, r3
 8002412:	f003 f9c7 	bl	80057a4 <vTaskPrioritySet>

			/* Again, even though the helper task has a priority greater than 
			ours, it should not have executed yet because the scheduler is
			suspended. */
			portENTER_CRITICAL();
 8002416:	f001 fb1b 	bl	8003a50 <vPortEnterCritical>
			{
				if( ulPrioritySetCounter != ( unsigned long ) 0 )
 800241a:	4b19      	ldr	r3, [pc, #100]	; (8002480 <prvChangePriorityWhenSuspendedTask+0xc4>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d007      	beq.n	8002432 <prvChangePriorityWhenSuspendedTask+0x76>
				{
					xPriorityRaiseWhenSuspendedError = pdTRUE;
 8002422:	4b19      	ldr	r3, [pc, #100]	; (8002488 <prvChangePriorityWhenSuspendedTask+0xcc>)
 8002424:	2201      	movs	r2, #1
 8002426:	601a      	str	r2, [r3, #0]
					vPrintDisplayMessage( &pcTaskFailMsg );
 8002428:	f107 0308 	add.w	r3, r7, #8
 800242c:	4618      	mov	r0, r3
 800242e:	f000 fe41 	bl	80030b4 <vPrintDisplayMessage>
				}
			}
			portEXIT_CRITICAL();
 8002432:	f001 fb3b 	bl	8003aac <vPortExitCritical>
		}
		xTaskResumeAll();
 8002436:	f003 fbf7 	bl	8005c28 <xTaskResumeAll>
		/* Now the scheduler has been resumed the helper task should 
		immediately preempt us and execute.  When it executes it will increment
		the ulPrioritySetCounter exactly once before suspending itself.

		We should now always find the counter set to 1. */
		portENTER_CRITICAL();
 800243a:	f001 fb09 	bl	8003a50 <vPortEnterCritical>
		{
			if( ulPrioritySetCounter != ( unsigned long ) 1 )
 800243e:	4b10      	ldr	r3, [pc, #64]	; (8002480 <prvChangePriorityWhenSuspendedTask+0xc4>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d007      	beq.n	8002456 <prvChangePriorityWhenSuspendedTask+0x9a>
			{
				xPriorityRaiseWhenSuspendedError = pdTRUE;
 8002446:	4b10      	ldr	r3, [pc, #64]	; (8002488 <prvChangePriorityWhenSuspendedTask+0xcc>)
 8002448:	2201      	movs	r2, #1
 800244a:	601a      	str	r2, [r3, #0]
				vPrintDisplayMessage( &pcTaskFailMsg );
 800244c:	f107 0308 	add.w	r3, r7, #8
 8002450:	4618      	mov	r0, r3
 8002452:	f000 fe2f 	bl	80030b4 <vPrintDisplayMessage>
			}
		}
		portEXIT_CRITICAL();
 8002456:	f001 fb29 	bl	8003aac <vPortExitCritical>

		/* Delay until we try this again. */		
		vTaskDelay( priSLEEP_TIME * 2 );
 800245a:	2064      	movs	r0, #100	; 0x64
 800245c:	f003 f950 	bl	8005700 <vTaskDelay>
		
		/* Set the priority of the helper task back ready for the next 
		execution of this task. */
		vTaskSuspendAll();
 8002460:	f003 fbd4 	bl	8005c0c <vTaskSuspendAll>
			vTaskPrioritySet( xChangePriorityWhenSuspendedHandle, tskIDLE_PRIORITY );				
 8002464:	4b07      	ldr	r3, [pc, #28]	; (8002484 <prvChangePriorityWhenSuspendedTask+0xc8>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2100      	movs	r1, #0
 800246a:	4618      	mov	r0, r3
 800246c:	f003 f99a 	bl	80057a4 <vTaskPrioritySet>
		xTaskResumeAll();				
 8002470:	f003 fbda 	bl	8005c28 <xTaskResumeAll>
		ulPrioritySetCounter = ( unsigned long ) 0;
 8002474:	e7af      	b.n	80023d6 <prvChangePriorityWhenSuspendedTask+0x1a>
 8002476:	bf00      	nop
 8002478:	08009670 	.word	0x08009670
 800247c:	080096a0 	.word	0x080096a0
 8002480:	200000e8 	.word	0x200000e8
 8002484:	200000e0 	.word	0x200000e0
 8002488:	200000f8 	.word	0x200000f8

0800248c <prvChangePriorityHelperTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvChangePriorityHelperTask( void *pvParameters )
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
		/* This is the helper task for prvChangePriorityWhenSuspendedTask().
		It has it's priority raised and lowered.  When it runs it simply 
		increments the counter then suspends itself again.  This allows
		prvChangePriorityWhenSuspendedTask() to know how many times it has
		executed. */
		ulPrioritySetCounter++;
 8002494:	4b04      	ldr	r3, [pc, #16]	; (80024a8 <prvChangePriorityHelperTask+0x1c>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	3301      	adds	r3, #1
 800249a:	4a03      	ldr	r2, [pc, #12]	; (80024a8 <prvChangePriorityHelperTask+0x1c>)
 800249c:	6013      	str	r3, [r2, #0]
		vTaskSuspend( NULL );
 800249e:	2000      	movs	r0, #0
 80024a0:	f003 fa3c 	bl	800591c <vTaskSuspend>
		ulPrioritySetCounter++;
 80024a4:	e7f6      	b.n	8002494 <prvChangePriorityHelperTask+0x8>
 80024a6:	bf00      	nop
 80024a8:	200000e8 	.word	0x200000e8

080024ac <xAreDynamicPriorityTasksStillRunning>:
}
/*-----------------------------------------------------------*/

/* Called to check that all the created tasks are still running without error. */
portBASE_TYPE xAreDynamicPriorityTasksStillRunning( void )
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
/* Keep a history of the check variables so we know if it has been incremented 
since the last call. */
static unsigned short usLastTaskCheck = ( unsigned short ) 0;
portBASE_TYPE xReturn = pdTRUE;
 80024b2:	2301      	movs	r3, #1
 80024b4:	607b      	str	r3, [r7, #4]

	/* Check the tasks are still running by ensuring the check variable
	is still incrementing. */

	if( usCheckVariable == usLastTaskCheck )
 80024b6:	4b12      	ldr	r3, [pc, #72]	; (8002500 <xAreDynamicPriorityTasksStillRunning+0x54>)
 80024b8:	881a      	ldrh	r2, [r3, #0]
 80024ba:	4b12      	ldr	r3, [pc, #72]	; (8002504 <xAreDynamicPriorityTasksStillRunning+0x58>)
 80024bc:	881b      	ldrh	r3, [r3, #0]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d101      	bne.n	80024c6 <xAreDynamicPriorityTasksStillRunning+0x1a>
	{
		/* The check has not incremented so an error exists. */
		xReturn = pdFALSE;
 80024c2:	2300      	movs	r3, #0
 80024c4:	607b      	str	r3, [r7, #4]
	}

	if( xSuspendedQueueSendError == pdTRUE )
 80024c6:	4b10      	ldr	r3, [pc, #64]	; (8002508 <xAreDynamicPriorityTasksStillRunning+0x5c>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d101      	bne.n	80024d2 <xAreDynamicPriorityTasksStillRunning+0x26>
	{
		xReturn = pdFALSE;
 80024ce:	2300      	movs	r3, #0
 80024d0:	607b      	str	r3, [r7, #4]
	}

	if( xSuspendedQueueReceiveError == pdTRUE )
 80024d2:	4b0e      	ldr	r3, [pc, #56]	; (800250c <xAreDynamicPriorityTasksStillRunning+0x60>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d101      	bne.n	80024de <xAreDynamicPriorityTasksStillRunning+0x32>
	{
		xReturn = pdFALSE;
 80024da:	2300      	movs	r3, #0
 80024dc:	607b      	str	r3, [r7, #4]
	}

	if( xPriorityRaiseWhenSuspendedError == pdTRUE )
 80024de:	4b0c      	ldr	r3, [pc, #48]	; (8002510 <xAreDynamicPriorityTasksStillRunning+0x64>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d101      	bne.n	80024ea <xAreDynamicPriorityTasksStillRunning+0x3e>
	{
		xReturn = pdFALSE;
 80024e6:	2300      	movs	r3, #0
 80024e8:	607b      	str	r3, [r7, #4]
	}

	usLastTaskCheck = usCheckVariable;
 80024ea:	4b05      	ldr	r3, [pc, #20]	; (8002500 <xAreDynamicPriorityTasksStillRunning+0x54>)
 80024ec:	881a      	ldrh	r2, [r3, #0]
 80024ee:	4b05      	ldr	r3, [pc, #20]	; (8002504 <xAreDynamicPriorityTasksStillRunning+0x58>)
 80024f0:	801a      	strh	r2, [r3, #0]
	return xReturn;
 80024f2:	687b      	ldr	r3, [r7, #4]
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr
 8002500:	200000ec 	.word	0x200000ec
 8002504:	20000108 	.word	0x20000108
 8002508:	200000f0 	.word	0x200000f0
 800250c:	200000f4 	.word	0x200000f4
 8002510:	200000f8 	.word	0x200000f8

08002514 <vStartLEDFlashTasks>:
const char * const pcTaskStartMsg = "LED flash task started.\r\n";

/*-----------------------------------------------------------*/

void vStartLEDFlashTasks( unsigned portBASE_TYPE uxPriority )
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b088      	sub	sp, #32
 8002518:	af02      	add	r7, sp, #8
 800251a:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxLEDTask;
xLEDParameters *pxLEDParameters;
const unsigned portBASE_TYPE uxNumOfLEDs = 8;
 800251c:	2308      	movs	r3, #8
 800251e:	613b      	str	r3, [r7, #16]
const TickType_t xFlashRate = 125;
 8002520:	237d      	movs	r3, #125	; 0x7d
 8002522:	60fb      	str	r3, [r7, #12]

	/* Create the eight tasks. */
	for( uxLEDTask = 0; uxLEDTask < uxNumOfLEDs; ++uxLEDTask )
 8002524:	2300      	movs	r3, #0
 8002526:	617b      	str	r3, [r7, #20]
 8002528:	e01e      	b.n	8002568 <vStartLEDFlashTasks+0x54>
	{
		/* Create and complete the structure used to pass parameters to the next 
		created task. */
		pxLEDParameters = ( xLEDParameters * ) pvPortMalloc( sizeof( xLEDParameters ) );
 800252a:	2008      	movs	r0, #8
 800252c:	f001 fba0 	bl	8003c70 <pvPortMalloc>
 8002530:	60b8      	str	r0, [r7, #8]
		pxLEDParameters->uxLED = uxLEDTask;
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	697a      	ldr	r2, [r7, #20]
 8002536:	601a      	str	r2, [r3, #0]
		pxLEDParameters->xFlashRate = ( xFlashRate + ( xFlashRate * ( TickType_t ) uxLEDTask ) );
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	3301      	adds	r3, #1
 800253c:	68fa      	ldr	r2, [r7, #12]
 800253e:	fb02 f203 	mul.w	r2, r2, r3
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	605a      	str	r2, [r3, #4]
		pxLEDParameters->xFlashRate /= portTICK_PERIOD_MS;
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	685a      	ldr	r2, [r3, #4]
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	605a      	str	r2, [r3, #4]

		/* Spawn the task. */
		xTaskCreate( vLEDFlashTask, "LEDx", ledSTACK_SIZE, ( void * ) pxLEDParameters, uxPriority, ( TaskHandle_t * ) NULL );
 800254e:	2300      	movs	r3, #0
 8002550:	9301      	str	r3, [sp, #4]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	9300      	str	r3, [sp, #0]
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	2282      	movs	r2, #130	; 0x82
 800255a:	4907      	ldr	r1, [pc, #28]	; (8002578 <vStartLEDFlashTasks+0x64>)
 800255c:	4807      	ldr	r0, [pc, #28]	; (800257c <vStartLEDFlashTasks+0x68>)
 800255e:	f002 fe57 	bl	8005210 <xTaskCreate>
	for( uxLEDTask = 0; uxLEDTask < uxNumOfLEDs; ++uxLEDTask )
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	3301      	adds	r3, #1
 8002566:	617b      	str	r3, [r7, #20]
 8002568:	697a      	ldr	r2, [r7, #20]
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	429a      	cmp	r2, r3
 800256e:	d3dc      	bcc.n	800252a <vStartLEDFlashTasks+0x16>
	}
}
 8002570:	bf00      	nop
 8002572:	3718      	adds	r7, #24
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	080096ec 	.word	0x080096ec
 800257c:	08002581 	.word	0x08002581

08002580 <vLEDFlashTask>:
/*-----------------------------------------------------------*/

static void vLEDFlashTask( void *pvParameters )
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
xLEDParameters *pxParameters;

	/* Queue a message for printing to say the task has started. */
	vPrintDisplayMessage( &pcTaskStartMsg );
 8002588:	480d      	ldr	r0, [pc, #52]	; (80025c0 <vLEDFlashTask+0x40>)
 800258a:	f000 fd93 	bl	80030b4 <vPrintDisplayMessage>

	pxParameters = ( xLEDParameters * ) pvParameters;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	60fb      	str	r3, [r7, #12]

	for(;;)
	{
		/* Delay for half the flash period then turn the LED on. */
		vTaskDelay( pxParameters->xFlashRate / ( TickType_t ) 2 );
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	085b      	lsrs	r3, r3, #1
 8002598:	4618      	mov	r0, r3
 800259a:	f003 f8b1 	bl	8005700 <vTaskDelay>
		vParTestToggleLED( pxParameters->uxLED );
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f006 fabc 	bl	8008b20 <vParTestToggleLED>

		/* Delay for half the flash period then turn the LED off. */
		vTaskDelay( pxParameters->xFlashRate / ( TickType_t ) 2 );
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	085b      	lsrs	r3, r3, #1
 80025ae:	4618      	mov	r0, r3
 80025b0:	f003 f8a6 	bl	8005700 <vTaskDelay>
		vParTestToggleLED( pxParameters->uxLED );
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f006 fab1 	bl	8008b20 <vParTestToggleLED>
		vTaskDelay( pxParameters->xFlashRate / ( TickType_t ) 2 );
 80025be:	e7e8      	b.n	8002592 <vLEDFlashTask+0x12>
 80025c0:	08009da4 	.word	0x08009da4

080025c4 <vStartMathTasks>:
static volatile unsigned short usTaskCheck[ mathNUMBER_OF_TASKS ] = { ( unsigned short ) 0 };

/*-----------------------------------------------------------*/

void vStartMathTasks( unsigned portBASE_TYPE uxPriority )
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af02      	add	r7, sp, #8
 80025ca:	6078      	str	r0, [r7, #4]
	xTaskCreate( vCompetingMathTask1, "Math1", mathSTACK_SIZE, ( void * ) &( usTaskCheck[ 0 ] ), uxPriority, NULL );
 80025cc:	2300      	movs	r3, #0
 80025ce:	9301      	str	r3, [sp, #4]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	9300      	str	r3, [sp, #0]
 80025d4:	4b2b      	ldr	r3, [pc, #172]	; (8002684 <vStartMathTasks+0xc0>)
 80025d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025da:	492b      	ldr	r1, [pc, #172]	; (8002688 <vStartMathTasks+0xc4>)
 80025dc:	482b      	ldr	r0, [pc, #172]	; (800268c <vStartMathTasks+0xc8>)
 80025de:	f002 fe17 	bl	8005210 <xTaskCreate>
	xTaskCreate( vCompetingMathTask2, "Math2", mathSTACK_SIZE, ( void * ) &( usTaskCheck[ 1 ] ), uxPriority, NULL );
 80025e2:	2300      	movs	r3, #0
 80025e4:	9301      	str	r3, [sp, #4]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	9300      	str	r3, [sp, #0]
 80025ea:	4b29      	ldr	r3, [pc, #164]	; (8002690 <vStartMathTasks+0xcc>)
 80025ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025f0:	4928      	ldr	r1, [pc, #160]	; (8002694 <vStartMathTasks+0xd0>)
 80025f2:	4829      	ldr	r0, [pc, #164]	; (8002698 <vStartMathTasks+0xd4>)
 80025f4:	f002 fe0c 	bl	8005210 <xTaskCreate>
	xTaskCreate( vCompetingMathTask3, "Math3", mathSTACK_SIZE, ( void * ) &( usTaskCheck[ 2 ] ), uxPriority, NULL );
 80025f8:	2300      	movs	r3, #0
 80025fa:	9301      	str	r3, [sp, #4]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	9300      	str	r3, [sp, #0]
 8002600:	4b26      	ldr	r3, [pc, #152]	; (800269c <vStartMathTasks+0xd8>)
 8002602:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002606:	4926      	ldr	r1, [pc, #152]	; (80026a0 <vStartMathTasks+0xdc>)
 8002608:	4826      	ldr	r0, [pc, #152]	; (80026a4 <vStartMathTasks+0xe0>)
 800260a:	f002 fe01 	bl	8005210 <xTaskCreate>
	xTaskCreate( vCompetingMathTask4, "Math4", mathSTACK_SIZE, ( void * ) &( usTaskCheck[ 3 ] ), uxPriority, NULL );
 800260e:	2300      	movs	r3, #0
 8002610:	9301      	str	r3, [sp, #4]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	4b24      	ldr	r3, [pc, #144]	; (80026a8 <vStartMathTasks+0xe4>)
 8002618:	f44f 7200 	mov.w	r2, #512	; 0x200
 800261c:	4923      	ldr	r1, [pc, #140]	; (80026ac <vStartMathTasks+0xe8>)
 800261e:	4824      	ldr	r0, [pc, #144]	; (80026b0 <vStartMathTasks+0xec>)
 8002620:	f002 fdf6 	bl	8005210 <xTaskCreate>
	xTaskCreate( vCompetingMathTask1, "Math5", mathSTACK_SIZE, ( void * ) &( usTaskCheck[ 4 ] ), uxPriority, NULL );
 8002624:	2300      	movs	r3, #0
 8002626:	9301      	str	r3, [sp, #4]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	9300      	str	r3, [sp, #0]
 800262c:	4b21      	ldr	r3, [pc, #132]	; (80026b4 <vStartMathTasks+0xf0>)
 800262e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002632:	4921      	ldr	r1, [pc, #132]	; (80026b8 <vStartMathTasks+0xf4>)
 8002634:	4815      	ldr	r0, [pc, #84]	; (800268c <vStartMathTasks+0xc8>)
 8002636:	f002 fdeb 	bl	8005210 <xTaskCreate>
	xTaskCreate( vCompetingMathTask2, "Math6", mathSTACK_SIZE, ( void * ) &( usTaskCheck[ 5 ] ), uxPriority, NULL );
 800263a:	2300      	movs	r3, #0
 800263c:	9301      	str	r3, [sp, #4]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	9300      	str	r3, [sp, #0]
 8002642:	4b1e      	ldr	r3, [pc, #120]	; (80026bc <vStartMathTasks+0xf8>)
 8002644:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002648:	491d      	ldr	r1, [pc, #116]	; (80026c0 <vStartMathTasks+0xfc>)
 800264a:	4813      	ldr	r0, [pc, #76]	; (8002698 <vStartMathTasks+0xd4>)
 800264c:	f002 fde0 	bl	8005210 <xTaskCreate>
	xTaskCreate( vCompetingMathTask3, "Math7", mathSTACK_SIZE, ( void * ) &( usTaskCheck[ 6 ] ), uxPriority, NULL );
 8002650:	2300      	movs	r3, #0
 8002652:	9301      	str	r3, [sp, #4]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	9300      	str	r3, [sp, #0]
 8002658:	4b1a      	ldr	r3, [pc, #104]	; (80026c4 <vStartMathTasks+0x100>)
 800265a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800265e:	491a      	ldr	r1, [pc, #104]	; (80026c8 <vStartMathTasks+0x104>)
 8002660:	4810      	ldr	r0, [pc, #64]	; (80026a4 <vStartMathTasks+0xe0>)
 8002662:	f002 fdd5 	bl	8005210 <xTaskCreate>
	xTaskCreate( vCompetingMathTask4, "Math8", mathSTACK_SIZE, ( void * ) &( usTaskCheck[ 7 ] ), uxPriority, NULL );
 8002666:	2300      	movs	r3, #0
 8002668:	9301      	str	r3, [sp, #4]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	9300      	str	r3, [sp, #0]
 800266e:	4b17      	ldr	r3, [pc, #92]	; (80026cc <vStartMathTasks+0x108>)
 8002670:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002674:	4916      	ldr	r1, [pc, #88]	; (80026d0 <vStartMathTasks+0x10c>)
 8002676:	480e      	ldr	r0, [pc, #56]	; (80026b0 <vStartMathTasks+0xec>)
 8002678:	f002 fdca 	bl	8005210 <xTaskCreate>
}
 800267c:	bf00      	nop
 800267e:	3708      	adds	r7, #8
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	2000010c 	.word	0x2000010c
 8002688:	080096f4 	.word	0x080096f4
 800268c:	080026d9 	.word	0x080026d9
 8002690:	2000010e 	.word	0x2000010e
 8002694:	080096fc 	.word	0x080096fc
 8002698:	080027f1 	.word	0x080027f1
 800269c:	20000110 	.word	0x20000110
 80026a0:	08009704 	.word	0x08009704
 80026a4:	08002909 	.word	0x08002909
 80026a8:	20000112 	.word	0x20000112
 80026ac:	0800970c 	.word	0x0800970c
 80026b0:	08002a71 	.word	0x08002a71
 80026b4:	20000114 	.word	0x20000114
 80026b8:	08009714 	.word	0x08009714
 80026bc:	20000116 	.word	0x20000116
 80026c0:	0800971c 	.word	0x0800971c
 80026c4:	20000118 	.word	0x20000118
 80026c8:	08009724 	.word	0x08009724
 80026cc:	2000011a 	.word	0x2000011a
 80026d0:	0800972c 	.word	0x0800972c
 80026d4:	00000000 	.word	0x00000000

080026d8 <vCompetingMathTask1>:
/*-----------------------------------------------------------*/

static void vCompetingMathTask1( void *pvParameters )
{
 80026d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026da:	b093      	sub	sp, #76	; 0x4c
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
portDOUBLE d1, d2, d3, d4;
volatile unsigned short *pusTaskCheckVariable;
const portDOUBLE dAnswer = ( 123.4567 + 2345.6789 ) * -918.222;
 80026e0:	a440      	add	r4, pc, #256	; (adr r4, 80027e4 <vCompetingMathTask1+0x10c>)
 80026e2:	cc18      	ldmia	r4, {r3, r4}
 80026e4:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
const char * const pcTaskStartMsg = "Math task 1 started.\r\n";
 80026e8:	4b3b      	ldr	r3, [pc, #236]	; (80027d8 <vCompetingMathTask1+0x100>)
 80026ea:	60fb      	str	r3, [r7, #12]
const char * const pcTaskFailMsg = "Math task 1 failed.\r\n";
 80026ec:	4b3b      	ldr	r3, [pc, #236]	; (80027dc <vCompetingMathTask1+0x104>)
 80026ee:	60bb      	str	r3, [r7, #8]
short sError = pdFALSE;
 80026f0:	2300      	movs	r3, #0
 80026f2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

	/* Queue a message for printing to say the task has started. */
	vPrintDisplayMessage( &pcTaskStartMsg );
 80026f6:	f107 030c 	add.w	r3, r7, #12
 80026fa:	4618      	mov	r0, r3
 80026fc:	f000 fcda 	bl	80030b4 <vPrintDisplayMessage>

	/* The variable this task increments to show it is still running is passed in 
	as the parameter. */
	pusTaskCheckVariable = ( unsigned short * ) pvParameters;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	637b      	str	r3, [r7, #52]	; 0x34

	/* Keep performing a calculation and checking the result against a constant. */
	for(;;)
	{
		d1 = 123.4567;
 8002704:	a42c      	add	r4, pc, #176	; (adr r4, 80027b8 <vCompetingMathTask1+0xe0>)
 8002706:	cc18      	ldmia	r4, {r3, r4}
 8002708:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		d2 = 2345.6789;
 800270c:	a42c      	add	r4, pc, #176	; (adr r4, 80027c0 <vCompetingMathTask1+0xe8>)
 800270e:	cc18      	ldmia	r4, {r3, r4}
 8002710:	e9c7 3408 	strd	r3, r4, [r7, #32]
		d3 = -918.222;
 8002714:	a42c      	add	r4, pc, #176	; (adr r4, 80027c8 <vCompetingMathTask1+0xf0>)
 8002716:	cc18      	ldmia	r4, {r3, r4}
 8002718:	e9c7 3406 	strd	r3, r4, [r7, #24]

		d4 = ( d1 + d2 ) * d3;
 800271c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002720:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002724:	f7fd fd5a 	bl	80001dc <__adddf3>
 8002728:	4603      	mov	r3, r0
 800272a:	460c      	mov	r4, r1
 800272c:	4618      	mov	r0, r3
 800272e:	4621      	mov	r1, r4
 8002730:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002734:	f7fd ff04 	bl	8000540 <__aeabi_dmul>
 8002738:	4603      	mov	r3, r0
 800273a:	460c      	mov	r4, r1
 800273c:	e9c7 3404 	strd	r3, r4, [r7, #16]

		taskYIELD();
 8002740:	4b27      	ldr	r3, [pc, #156]	; (80027e0 <vCompetingMathTask1+0x108>)
 8002742:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	f3bf 8f4f 	dsb	sy
 800274c:	f3bf 8f6f 	isb	sy

		/* If the calculation does not match the expected constant, stop the 
		increment of the check variable. */
		if( fabs( d4 - dAnswer ) > 0.001 )
 8002750:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002754:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002758:	f7fd fd3e 	bl	80001d8 <__aeabi_dsub>
 800275c:	4603      	mov	r3, r0
 800275e:	460c      	mov	r4, r1
 8002760:	461d      	mov	r5, r3
 8002762:	f024 4600 	bic.w	r6, r4, #2147483648	; 0x80000000
 8002766:	a31a      	add	r3, pc, #104	; (adr r3, 80027d0 <vCompetingMathTask1+0xf8>)
 8002768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800276c:	4628      	mov	r0, r5
 800276e:	4631      	mov	r1, r6
 8002770:	f7fe f976 	bl	8000a60 <__aeabi_dcmpgt>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d007      	beq.n	800278a <vCompetingMathTask1+0xb2>
		{
			vPrintDisplayMessage( &pcTaskFailMsg );
 800277a:	f107 0308 	add.w	r3, r7, #8
 800277e:	4618      	mov	r0, r3
 8002780:	f000 fc98 	bl	80030b4 <vPrintDisplayMessage>
			sError = pdTRUE;
 8002784:	2301      	movs	r3, #1
 8002786:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		}

		if( sError == pdFALSE )
 800278a:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800278e:	2b00      	cmp	r3, #0
 8002790:	d106      	bne.n	80027a0 <vCompetingMathTask1+0xc8>
		{
			/* If the calculation has always been correct, increment the check 
			variable so we know this task is still running okay. */
			( *pusTaskCheckVariable )++;
 8002792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002794:	881b      	ldrh	r3, [r3, #0]
 8002796:	b29b      	uxth	r3, r3
 8002798:	3301      	adds	r3, #1
 800279a:	b29a      	uxth	r2, r3
 800279c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800279e:	801a      	strh	r2, [r3, #0]
		}

		taskYIELD();
 80027a0:	4b0f      	ldr	r3, [pc, #60]	; (80027e0 <vCompetingMathTask1+0x108>)
 80027a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027a6:	601a      	str	r2, [r3, #0]
 80027a8:	f3bf 8f4f 	dsb	sy
 80027ac:	f3bf 8f6f 	isb	sy
		d1 = 123.4567;
 80027b0:	e7a8      	b.n	8002704 <vCompetingMathTask1+0x2c>
 80027b2:	bf00      	nop
 80027b4:	f3af 8000 	nop.w
 80027b8:	92a30553 	.word	0x92a30553
 80027bc:	405edd3a 	.word	0x405edd3a
 80027c0:	98c7e282 	.word	0x98c7e282
 80027c4:	40a2535b 	.word	0x40a2535b
 80027c8:	a7ef9db2 	.word	0xa7ef9db2
 80027cc:	c08cb1c6 	.word	0xc08cb1c6
 80027d0:	d2f1a9fc 	.word	0xd2f1a9fc
 80027d4:	3f50624d 	.word	0x3f50624d
 80027d8:	08009734 	.word	0x08009734
 80027dc:	0800974c 	.word	0x0800974c
 80027e0:	e000ed04 	.word	0xe000ed04
 80027e4:	507fe66a 	.word	0x507fe66a
 80027e8:	c1414c27 	.word	0xc1414c27
 80027ec:	00000000 	.word	0x00000000

080027f0 <vCompetingMathTask2>:
	}
}
/*-----------------------------------------------------------*/

static void vCompetingMathTask2( void *pvParameters )
{
 80027f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027f2:	b093      	sub	sp, #76	; 0x4c
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
portDOUBLE d1, d2, d3, d4;
volatile unsigned short *pusTaskCheckVariable;
const portDOUBLE dAnswer = ( -389.38 / 32498.2 ) * -2.0001;
 80027f8:	a440      	add	r4, pc, #256	; (adr r4, 80028fc <vCompetingMathTask2+0x10c>)
 80027fa:	cc18      	ldmia	r4, {r3, r4}
 80027fc:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
const char * const pcTaskStartMsg = "Math task 2 started.\r\n";
 8002800:	4b3b      	ldr	r3, [pc, #236]	; (80028f0 <vCompetingMathTask2+0x100>)
 8002802:	60fb      	str	r3, [r7, #12]
const char * const pcTaskFailMsg = "Math task 2 failed.\r\n";
 8002804:	4b3b      	ldr	r3, [pc, #236]	; (80028f4 <vCompetingMathTask2+0x104>)
 8002806:	60bb      	str	r3, [r7, #8]
short sError = pdFALSE;
 8002808:	2300      	movs	r3, #0
 800280a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

	/* Queue a message for printing to say the task has started. */
	vPrintDisplayMessage( &pcTaskStartMsg );
 800280e:	f107 030c 	add.w	r3, r7, #12
 8002812:	4618      	mov	r0, r3
 8002814:	f000 fc4e 	bl	80030b4 <vPrintDisplayMessage>

	/* The variable this task increments to show it is still running is passed in 
	as the parameter. */
	pusTaskCheckVariable = ( unsigned short * ) pvParameters;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	637b      	str	r3, [r7, #52]	; 0x34

	/* Keep performing a calculation and checking the result against a constant. */
	for( ;; )
	{
		d1 = -389.38;
 800281c:	a42c      	add	r4, pc, #176	; (adr r4, 80028d0 <vCompetingMathTask2+0xe0>)
 800281e:	cc18      	ldmia	r4, {r3, r4}
 8002820:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		d2 = 32498.2;
 8002824:	a42c      	add	r4, pc, #176	; (adr r4, 80028d8 <vCompetingMathTask2+0xe8>)
 8002826:	cc18      	ldmia	r4, {r3, r4}
 8002828:	e9c7 3408 	strd	r3, r4, [r7, #32]
		d3 = -2.0001;
 800282c:	a42c      	add	r4, pc, #176	; (adr r4, 80028e0 <vCompetingMathTask2+0xf0>)
 800282e:	cc18      	ldmia	r4, {r3, r4}
 8002830:	e9c7 3406 	strd	r3, r4, [r7, #24]

		d4 = ( d1 / d2 ) * d3;
 8002834:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002838:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800283c:	f7fd ffaa 	bl	8000794 <__aeabi_ddiv>
 8002840:	4603      	mov	r3, r0
 8002842:	460c      	mov	r4, r1
 8002844:	4618      	mov	r0, r3
 8002846:	4621      	mov	r1, r4
 8002848:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800284c:	f7fd fe78 	bl	8000540 <__aeabi_dmul>
 8002850:	4603      	mov	r3, r0
 8002852:	460c      	mov	r4, r1
 8002854:	e9c7 3404 	strd	r3, r4, [r7, #16]

		taskYIELD();
 8002858:	4b27      	ldr	r3, [pc, #156]	; (80028f8 <vCompetingMathTask2+0x108>)
 800285a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	f3bf 8f4f 	dsb	sy
 8002864:	f3bf 8f6f 	isb	sy
		
		/* If the calculation does not match the expected constant, stop the 
		increment of the check variable. */
		if( fabs( d4 - dAnswer ) > 0.001 )
 8002868:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800286c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002870:	f7fd fcb2 	bl	80001d8 <__aeabi_dsub>
 8002874:	4603      	mov	r3, r0
 8002876:	460c      	mov	r4, r1
 8002878:	461d      	mov	r5, r3
 800287a:	f024 4600 	bic.w	r6, r4, #2147483648	; 0x80000000
 800287e:	a31a      	add	r3, pc, #104	; (adr r3, 80028e8 <vCompetingMathTask2+0xf8>)
 8002880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002884:	4628      	mov	r0, r5
 8002886:	4631      	mov	r1, r6
 8002888:	f7fe f8ea 	bl	8000a60 <__aeabi_dcmpgt>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d007      	beq.n	80028a2 <vCompetingMathTask2+0xb2>
		{
			vPrintDisplayMessage( &pcTaskFailMsg );
 8002892:	f107 0308 	add.w	r3, r7, #8
 8002896:	4618      	mov	r0, r3
 8002898:	f000 fc0c 	bl	80030b4 <vPrintDisplayMessage>
			sError = pdTRUE;
 800289c:	2301      	movs	r3, #1
 800289e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		}

		if( sError == pdFALSE )
 80028a2:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d106      	bne.n	80028b8 <vCompetingMathTask2+0xc8>
		{
			/* If the calculation has always been correct, increment the check 
			variable so we know
			this task is still running okay. */
			( *pusTaskCheckVariable )++;
 80028aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028ac:	881b      	ldrh	r3, [r3, #0]
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	3301      	adds	r3, #1
 80028b2:	b29a      	uxth	r2, r3
 80028b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028b6:	801a      	strh	r2, [r3, #0]
		}

		taskYIELD();
 80028b8:	4b0f      	ldr	r3, [pc, #60]	; (80028f8 <vCompetingMathTask2+0x108>)
 80028ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	f3bf 8f4f 	dsb	sy
 80028c4:	f3bf 8f6f 	isb	sy
		d1 = -389.38;
 80028c8:	e7a8      	b.n	800281c <vCompetingMathTask2+0x2c>
 80028ca:	bf00      	nop
 80028cc:	f3af 8000 	nop.w
 80028d0:	7ae147ae 	.word	0x7ae147ae
 80028d4:	c0785614 	.word	0xc0785614
 80028d8:	cccccccd 	.word	0xcccccccd
 80028dc:	40dfbc8c 	.word	0x40dfbc8c
 80028e0:	6dc5d639 	.word	0x6dc5d639
 80028e4:	c0000034 	.word	0xc0000034
 80028e8:	d2f1a9fc 	.word	0xd2f1a9fc
 80028ec:	3f50624d 	.word	0x3f50624d
 80028f0:	08009764 	.word	0x08009764
 80028f4:	0800977c 	.word	0x0800977c
 80028f8:	e000ed04 	.word	0xe000ed04
 80028fc:	bf827065 	.word	0xbf827065
 8002900:	3f988a1d 	.word	0x3f988a1d
 8002904:	00000000 	.word	0x00000000

08002908 <vCompetingMathTask3>:
	}
}
/*-----------------------------------------------------------*/

static void vCompetingMathTask3( void *pvParameters )
{
 8002908:	b5f0      	push	{r4, r5, r6, r7, lr}
 800290a:	b08f      	sub	sp, #60	; 0x3c
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
portDOUBLE *pdArray, dTotal1, dTotal2, dDifference;
volatile unsigned short *pusTaskCheckVariable;
const unsigned short usArraySize = 250;
 8002910:	23fa      	movs	r3, #250	; 0xfa
 8002912:	847b      	strh	r3, [r7, #34]	; 0x22
unsigned short usPosition;
const char * const pcTaskStartMsg = "Math task 3 started.\r\n";
 8002914:	4b52      	ldr	r3, [pc, #328]	; (8002a60 <vCompetingMathTask3+0x158>)
 8002916:	60fb      	str	r3, [r7, #12]
const char * const pcTaskFailMsg = "Math task 3 failed.\r\n";
 8002918:	4b52      	ldr	r3, [pc, #328]	; (8002a64 <vCompetingMathTask3+0x15c>)
 800291a:	60bb      	str	r3, [r7, #8]
short sError = pdFALSE;
 800291c:	2300      	movs	r3, #0
 800291e:	84bb      	strh	r3, [r7, #36]	; 0x24

	/* Queue a message for printing to say the task has started. */
	vPrintDisplayMessage( &pcTaskStartMsg );
 8002920:	f107 030c 	add.w	r3, r7, #12
 8002924:	4618      	mov	r0, r3
 8002926:	f000 fbc5 	bl	80030b4 <vPrintDisplayMessage>

	/* The variable this task increments to show it is still running is passed in 
	as the parameter. */
	pusTaskCheckVariable = ( unsigned short * ) pvParameters;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	61fb      	str	r3, [r7, #28]

	pdArray = ( portDOUBLE * ) pvPortMalloc( ( size_t ) 250 * sizeof( portDOUBLE ) );
 800292e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002932:	f001 f99d 	bl	8003c70 <pvPortMalloc>
 8002936:	61b8      	str	r0, [r7, #24]
	/* Keep filling an array, keeping a running total of the values placed in the 
	array.  Then run through the array adding up all the values.  If the two totals 
	do not match, stop the check variable from incrementing. */
	for( ;; )
	{
		dTotal1 = 0.0;
 8002938:	f04f 0200 	mov.w	r2, #0
 800293c:	f04f 0300 	mov.w	r3, #0
 8002940:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		dTotal2 = 0.0;
 8002944:	f04f 0200 	mov.w	r2, #0
 8002948:	f04f 0300 	mov.w	r3, #0
 800294c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

		for( usPosition = 0; usPosition < usArraySize; usPosition++ )
 8002950:	2300      	movs	r3, #0
 8002952:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002954:	e026      	b.n	80029a4 <vCompetingMathTask3+0x9c>
		{
			pdArray[ usPosition ] = ( portDOUBLE ) usPosition + 5.5;
 8002956:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002958:	00db      	lsls	r3, r3, #3
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	18d6      	adds	r6, r2, r3
 800295e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002960:	4618      	mov	r0, r3
 8002962:	f7fd fd77 	bl	8000454 <__aeabi_ui2d>
 8002966:	f04f 0200 	mov.w	r2, #0
 800296a:	4b3f      	ldr	r3, [pc, #252]	; (8002a68 <vCompetingMathTask3+0x160>)
 800296c:	f7fd fc36 	bl	80001dc <__adddf3>
 8002970:	4602      	mov	r2, r0
 8002972:	460b      	mov	r3, r1
 8002974:	e9c6 2300 	strd	r2, r3, [r6]
			dTotal1 += ( portDOUBLE ) usPosition + 5.5;	
 8002978:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800297a:	4618      	mov	r0, r3
 800297c:	f7fd fd6a 	bl	8000454 <__aeabi_ui2d>
 8002980:	f04f 0200 	mov.w	r2, #0
 8002984:	4b38      	ldr	r3, [pc, #224]	; (8002a68 <vCompetingMathTask3+0x160>)
 8002986:	f7fd fc29 	bl	80001dc <__adddf3>
 800298a:	4602      	mov	r2, r0
 800298c:	460b      	mov	r3, r1
 800298e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002992:	f7fd fc23 	bl	80001dc <__adddf3>
 8002996:	4602      	mov	r2, r0
 8002998:	460b      	mov	r3, r1
 800299a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		for( usPosition = 0; usPosition < usArraySize; usPosition++ )
 800299e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80029a0:	3301      	adds	r3, #1
 80029a2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80029a4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80029a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d3d4      	bcc.n	8002956 <vCompetingMathTask3+0x4e>
		}

		taskYIELD();
 80029ac:	4b2f      	ldr	r3, [pc, #188]	; (8002a6c <vCompetingMathTask3+0x164>)
 80029ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	f3bf 8f4f 	dsb	sy
 80029b8:	f3bf 8f6f 	isb	sy

		for( usPosition = 0; usPosition < usArraySize; usPosition++ )
 80029bc:	2300      	movs	r3, #0
 80029be:	84fb      	strh	r3, [r7, #38]	; 0x26
 80029c0:	e010      	b.n	80029e4 <vCompetingMathTask3+0xdc>
		{
			dTotal2 += pdArray[ usPosition ];
 80029c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	4413      	add	r3, r2
 80029ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80029d2:	f7fd fc03 	bl	80001dc <__adddf3>
 80029d6:	4602      	mov	r2, r0
 80029d8:	460b      	mov	r3, r1
 80029da:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		for( usPosition = 0; usPosition < usArraySize; usPosition++ )
 80029de:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80029e0:	3301      	adds	r3, #1
 80029e2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80029e4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80029e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d3ea      	bcc.n	80029c2 <vCompetingMathTask3+0xba>
		}

		dDifference = dTotal1 - dTotal2;
 80029ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80029f0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80029f4:	f7fd fbf0 	bl	80001d8 <__aeabi_dsub>
 80029f8:	4602      	mov	r2, r0
 80029fa:	460b      	mov	r3, r1
 80029fc:	e9c7 2304 	strd	r2, r3, [r7, #16]
		if( fabs( dDifference ) > 0.001 )
 8002a00:	693c      	ldr	r4, [r7, #16]
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8002a08:	a313      	add	r3, pc, #76	; (adr r3, 8002a58 <vCompetingMathTask3+0x150>)
 8002a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a0e:	4620      	mov	r0, r4
 8002a10:	4629      	mov	r1, r5
 8002a12:	f7fe f825 	bl	8000a60 <__aeabi_dcmpgt>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d006      	beq.n	8002a2a <vCompetingMathTask3+0x122>
		{
			vPrintDisplayMessage( &pcTaskFailMsg );
 8002a1c:	f107 0308 	add.w	r3, r7, #8
 8002a20:	4618      	mov	r0, r3
 8002a22:	f000 fb47 	bl	80030b4 <vPrintDisplayMessage>
			sError = pdTRUE;
 8002a26:	2301      	movs	r3, #1
 8002a28:	84bb      	strh	r3, [r7, #36]	; 0x24
		}

		taskYIELD();
 8002a2a:	4b10      	ldr	r3, [pc, #64]	; (8002a6c <vCompetingMathTask3+0x164>)
 8002a2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a30:	601a      	str	r2, [r3, #0]
 8002a32:	f3bf 8f4f 	dsb	sy
 8002a36:	f3bf 8f6f 	isb	sy

		if( sError == pdFALSE )
 8002a3a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f47f af7a 	bne.w	8002938 <vCompetingMathTask3+0x30>
		{
			/* If the calculation has always been correct, increment the check 
			variable so we know	this task is still running okay. */
			( *pusTaskCheckVariable )++;
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	881b      	ldrh	r3, [r3, #0]
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	801a      	strh	r2, [r3, #0]
		dTotal1 = 0.0;
 8002a52:	e771      	b.n	8002938 <vCompetingMathTask3+0x30>
 8002a54:	f3af 8000 	nop.w
 8002a58:	d2f1a9fc 	.word	0xd2f1a9fc
 8002a5c:	3f50624d 	.word	0x3f50624d
 8002a60:	08009794 	.word	0x08009794
 8002a64:	080097ac 	.word	0x080097ac
 8002a68:	40160000 	.word	0x40160000
 8002a6c:	e000ed04 	.word	0xe000ed04

08002a70 <vCompetingMathTask4>:
	}
}
/*-----------------------------------------------------------*/

static void vCompetingMathTask4( void *pvParameters )
{
 8002a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a72:	b08f      	sub	sp, #60	; 0x3c
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
portDOUBLE *pdArray, dTotal1, dTotal2, dDifference;
volatile unsigned short *pusTaskCheckVariable;
const unsigned short usArraySize = 250;
 8002a78:	23fa      	movs	r3, #250	; 0xfa
 8002a7a:	847b      	strh	r3, [r7, #34]	; 0x22
unsigned short usPosition;
const char * const pcTaskStartMsg = "Math task 4 started.\r\n";
 8002a7c:	4b54      	ldr	r3, [pc, #336]	; (8002bd0 <vCompetingMathTask4+0x160>)
 8002a7e:	60fb      	str	r3, [r7, #12]
const char * const pcTaskFailMsg = "Math task 4 failed.\r\n";
 8002a80:	4b54      	ldr	r3, [pc, #336]	; (8002bd4 <vCompetingMathTask4+0x164>)
 8002a82:	60bb      	str	r3, [r7, #8]
short sError = pdFALSE;
 8002a84:	2300      	movs	r3, #0
 8002a86:	84bb      	strh	r3, [r7, #36]	; 0x24

	/* Queue a message for printing to say the task has started. */
	vPrintDisplayMessage( &pcTaskStartMsg );
 8002a88:	f107 030c 	add.w	r3, r7, #12
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f000 fb11 	bl	80030b4 <vPrintDisplayMessage>

	/* The variable this task increments to show it is still running is passed in 
	as the parameter. */
	pusTaskCheckVariable = ( unsigned short * ) pvParameters;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	61fb      	str	r3, [r7, #28]

	pdArray = ( portDOUBLE * ) pvPortMalloc( ( size_t ) 250 * sizeof( portDOUBLE ) );
 8002a96:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002a9a:	f001 f8e9 	bl	8003c70 <pvPortMalloc>
 8002a9e:	61b8      	str	r0, [r7, #24]
	/* Keep filling an array, keeping a running total of the values placed in the 
	array.  Then run through the array adding up all the values.  If the two totals 
	do not match, stop the check variable from incrementing. */
	for( ;; )
	{
		dTotal1 = 0.0;
 8002aa0:	f04f 0200 	mov.w	r2, #0
 8002aa4:	f04f 0300 	mov.w	r3, #0
 8002aa8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		dTotal2 = 0.0;
 8002aac:	f04f 0200 	mov.w	r2, #0
 8002ab0:	f04f 0300 	mov.w	r3, #0
 8002ab4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

		for( usPosition = 0; usPosition < usArraySize; usPosition++ )
 8002ab8:	2300      	movs	r3, #0
 8002aba:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002abc:	e026      	b.n	8002b0c <vCompetingMathTask4+0x9c>
		{
			pdArray[ usPosition ] = ( portDOUBLE ) usPosition * 12.123;
 8002abe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	18d6      	adds	r6, r2, r3
 8002ac6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7fd fcc3 	bl	8000454 <__aeabi_ui2d>
 8002ace:	a33c      	add	r3, pc, #240	; (adr r3, 8002bc0 <vCompetingMathTask4+0x150>)
 8002ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad4:	f7fd fd34 	bl	8000540 <__aeabi_dmul>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	460b      	mov	r3, r1
 8002adc:	e9c6 2300 	strd	r2, r3, [r6]
			dTotal1 += ( portDOUBLE ) usPosition * 12.123;	
 8002ae0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7fd fcb6 	bl	8000454 <__aeabi_ui2d>
 8002ae8:	a335      	add	r3, pc, #212	; (adr r3, 8002bc0 <vCompetingMathTask4+0x150>)
 8002aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aee:	f7fd fd27 	bl	8000540 <__aeabi_dmul>
 8002af2:	4602      	mov	r2, r0
 8002af4:	460b      	mov	r3, r1
 8002af6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002afa:	f7fd fb6f 	bl	80001dc <__adddf3>
 8002afe:	4602      	mov	r2, r0
 8002b00:	460b      	mov	r3, r1
 8002b02:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		for( usPosition = 0; usPosition < usArraySize; usPosition++ )
 8002b06:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002b08:	3301      	adds	r3, #1
 8002b0a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002b0c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002b0e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d3d4      	bcc.n	8002abe <vCompetingMathTask4+0x4e>
		}

		taskYIELD();
 8002b14:	4b30      	ldr	r3, [pc, #192]	; (8002bd8 <vCompetingMathTask4+0x168>)
 8002b16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b1a:	601a      	str	r2, [r3, #0]
 8002b1c:	f3bf 8f4f 	dsb	sy
 8002b20:	f3bf 8f6f 	isb	sy

		for( usPosition = 0; usPosition < usArraySize; usPosition++ )
 8002b24:	2300      	movs	r3, #0
 8002b26:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002b28:	e010      	b.n	8002b4c <vCompetingMathTask4+0xdc>
		{
			dTotal2 += pdArray[ usPosition ];
 8002b2a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	4413      	add	r3, r2
 8002b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b36:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002b3a:	f7fd fb4f 	bl	80001dc <__adddf3>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	460b      	mov	r3, r1
 8002b42:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		for( usPosition = 0; usPosition < usArraySize; usPosition++ )
 8002b46:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002b48:	3301      	adds	r3, #1
 8002b4a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002b4c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002b4e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d3ea      	bcc.n	8002b2a <vCompetingMathTask4+0xba>
		}

		dDifference = dTotal1 - dTotal2;
 8002b54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b58:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002b5c:	f7fd fb3c 	bl	80001d8 <__aeabi_dsub>
 8002b60:	4602      	mov	r2, r0
 8002b62:	460b      	mov	r3, r1
 8002b64:	e9c7 2304 	strd	r2, r3, [r7, #16]
		if( fabs( dDifference ) > 0.001 )
 8002b68:	693c      	ldr	r4, [r7, #16]
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8002b70:	a315      	add	r3, pc, #84	; (adr r3, 8002bc8 <vCompetingMathTask4+0x158>)
 8002b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b76:	4620      	mov	r0, r4
 8002b78:	4629      	mov	r1, r5
 8002b7a:	f7fd ff71 	bl	8000a60 <__aeabi_dcmpgt>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d006      	beq.n	8002b92 <vCompetingMathTask4+0x122>
		{
			vPrintDisplayMessage( &pcTaskFailMsg );
 8002b84:	f107 0308 	add.w	r3, r7, #8
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f000 fa93 	bl	80030b4 <vPrintDisplayMessage>
			sError = pdTRUE;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	84bb      	strh	r3, [r7, #36]	; 0x24
		}

		taskYIELD();
 8002b92:	4b11      	ldr	r3, [pc, #68]	; (8002bd8 <vCompetingMathTask4+0x168>)
 8002b94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b98:	601a      	str	r2, [r3, #0]
 8002b9a:	f3bf 8f4f 	dsb	sy
 8002b9e:	f3bf 8f6f 	isb	sy

		if( sError == pdFALSE )
 8002ba2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	f47f af7a 	bne.w	8002aa0 <vCompetingMathTask4+0x30>
		{
			/* If the calculation has always been correct, increment the check 
			variable so we know	this task is still running okay. */
			( *pusTaskCheckVariable )++;
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	881b      	ldrh	r3, [r3, #0]
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	801a      	strh	r2, [r3, #0]
		dTotal1 = 0.0;
 8002bba:	e771      	b.n	8002aa0 <vCompetingMathTask4+0x30>
 8002bbc:	f3af 8000 	nop.w
 8002bc0:	db22d0e5 	.word	0xdb22d0e5
 8002bc4:	40283ef9 	.word	0x40283ef9
 8002bc8:	d2f1a9fc 	.word	0xd2f1a9fc
 8002bcc:	3f50624d 	.word	0x3f50624d
 8002bd0:	080097c4 	.word	0x080097c4
 8002bd4:	080097dc 	.word	0x080097dc
 8002bd8:	e000ed04 	.word	0xe000ed04

08002bdc <xAreMathsTaskStillRunning>:
}
/*-----------------------------------------------------------*/

/* This is called to check that all the created tasks are still running. */
portBASE_TYPE xAreMathsTaskStillRunning( void )
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
/* Keep a history of the check variables so we know if they have been incremented 
since the last call. */
static unsigned short usLastTaskCheck[ mathNUMBER_OF_TASKS ] = { ( unsigned short ) 0 };
portBASE_TYPE xReturn = pdTRUE, xTask;
 8002be2:	2301      	movs	r3, #1
 8002be4:	607b      	str	r3, [r7, #4]

	/* Check the maths tasks are still running by ensuring their check variables 
	are still incrementing. */
	for( xTask = 0; xTask < mathNUMBER_OF_TASKS; xTask++ )
 8002be6:	2300      	movs	r3, #0
 8002be8:	603b      	str	r3, [r7, #0]
 8002bea:	e018      	b.n	8002c1e <xAreMathsTaskStillRunning+0x42>
	{
		if( usTaskCheck[ xTask ] == usLastTaskCheck[ xTask ] )
 8002bec:	4a11      	ldr	r2, [pc, #68]	; (8002c34 <xAreMathsTaskStillRunning+0x58>)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002bf4:	b29a      	uxth	r2, r3
 8002bf6:	4910      	ldr	r1, [pc, #64]	; (8002c38 <xAreMathsTaskStillRunning+0x5c>)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d101      	bne.n	8002c06 <xAreMathsTaskStillRunning+0x2a>
		{
			/* The check has not incremented so an error exists. */
			xReturn = pdFALSE;
 8002c02:	2300      	movs	r3, #0
 8002c04:	607b      	str	r3, [r7, #4]
		}

		usLastTaskCheck[ xTask ] = usTaskCheck[ xTask ];
 8002c06:	4a0b      	ldr	r2, [pc, #44]	; (8002c34 <xAreMathsTaskStillRunning+0x58>)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c0e:	b299      	uxth	r1, r3
 8002c10:	4a09      	ldr	r2, [pc, #36]	; (8002c38 <xAreMathsTaskStillRunning+0x5c>)
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for( xTask = 0; xTask < mathNUMBER_OF_TASKS; xTask++ )
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	603b      	str	r3, [r7, #0]
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	2b07      	cmp	r3, #7
 8002c22:	dde3      	ble.n	8002bec <xAreMathsTaskStillRunning+0x10>
	}

	return xReturn;
 8002c24:	687b      	ldr	r3, [r7, #4]
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	2000010c 	.word	0x2000010c
 8002c38:	2000011c 	.word	0x2000011c

08002c3c <vStartIntegerMathTasks>:
task gets a calculation wrong it will stop incrementing its check variable. */
static volatile unsigned short usTaskCheck[ intgNUMBER_OF_TASKS ] = { ( unsigned short ) 0 };
/*-----------------------------------------------------------*/

void vStartIntegerMathTasks( unsigned portBASE_TYPE uxPriority )
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af02      	add	r7, sp, #8
 8002c42:	6078      	str	r0, [r7, #4]
	xTaskCreate( vCompeteingIntMathTask1, "IntMath1", intgSTACK_SIZE, ( void * ) &( usTaskCheck[ 0 ] ), uxPriority, NULL );
 8002c44:	2300      	movs	r3, #0
 8002c46:	9301      	str	r3, [sp, #4]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	9300      	str	r3, [sp, #0]
 8002c4c:	4b2b      	ldr	r3, [pc, #172]	; (8002cfc <vStartIntegerMathTasks+0xc0>)
 8002c4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c52:	492b      	ldr	r1, [pc, #172]	; (8002d00 <vStartIntegerMathTasks+0xc4>)
 8002c54:	482b      	ldr	r0, [pc, #172]	; (8002d04 <vStartIntegerMathTasks+0xc8>)
 8002c56:	f002 fadb 	bl	8005210 <xTaskCreate>
	xTaskCreate( vCompeteingIntMathTask2, "IntMath2", intgSTACK_SIZE, ( void * ) &( usTaskCheck[ 1 ] ), uxPriority, NULL );
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	9301      	str	r3, [sp, #4]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	9300      	str	r3, [sp, #0]
 8002c62:	4b29      	ldr	r3, [pc, #164]	; (8002d08 <vStartIntegerMathTasks+0xcc>)
 8002c64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c68:	4928      	ldr	r1, [pc, #160]	; (8002d0c <vStartIntegerMathTasks+0xd0>)
 8002c6a:	4829      	ldr	r0, [pc, #164]	; (8002d10 <vStartIntegerMathTasks+0xd4>)
 8002c6c:	f002 fad0 	bl	8005210 <xTaskCreate>
	xTaskCreate( vCompeteingIntMathTask3, "IntMath3", intgSTACK_SIZE, ( void * ) &( usTaskCheck[ 2 ] ), uxPriority, NULL );
 8002c70:	2300      	movs	r3, #0
 8002c72:	9301      	str	r3, [sp, #4]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	9300      	str	r3, [sp, #0]
 8002c78:	4b26      	ldr	r3, [pc, #152]	; (8002d14 <vStartIntegerMathTasks+0xd8>)
 8002c7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c7e:	4926      	ldr	r1, [pc, #152]	; (8002d18 <vStartIntegerMathTasks+0xdc>)
 8002c80:	4826      	ldr	r0, [pc, #152]	; (8002d1c <vStartIntegerMathTasks+0xe0>)
 8002c82:	f002 fac5 	bl	8005210 <xTaskCreate>
	xTaskCreate( vCompeteingIntMathTask4, "IntMath4", intgSTACK_SIZE, ( void * ) &( usTaskCheck[ 3 ] ), uxPriority, NULL );
 8002c86:	2300      	movs	r3, #0
 8002c88:	9301      	str	r3, [sp, #4]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	9300      	str	r3, [sp, #0]
 8002c8e:	4b24      	ldr	r3, [pc, #144]	; (8002d20 <vStartIntegerMathTasks+0xe4>)
 8002c90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c94:	4923      	ldr	r1, [pc, #140]	; (8002d24 <vStartIntegerMathTasks+0xe8>)
 8002c96:	4824      	ldr	r0, [pc, #144]	; (8002d28 <vStartIntegerMathTasks+0xec>)
 8002c98:	f002 faba 	bl	8005210 <xTaskCreate>
	xTaskCreate( vCompeteingIntMathTask1, "IntMath5", intgSTACK_SIZE, ( void * ) &( usTaskCheck[ 4 ] ), uxPriority, NULL );
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	9301      	str	r3, [sp, #4]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	9300      	str	r3, [sp, #0]
 8002ca4:	4b21      	ldr	r3, [pc, #132]	; (8002d2c <vStartIntegerMathTasks+0xf0>)
 8002ca6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002caa:	4921      	ldr	r1, [pc, #132]	; (8002d30 <vStartIntegerMathTasks+0xf4>)
 8002cac:	4815      	ldr	r0, [pc, #84]	; (8002d04 <vStartIntegerMathTasks+0xc8>)
 8002cae:	f002 faaf 	bl	8005210 <xTaskCreate>
	xTaskCreate( vCompeteingIntMathTask2, "IntMath6", intgSTACK_SIZE, ( void * ) &( usTaskCheck[ 5 ] ), uxPriority, NULL );
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	9301      	str	r3, [sp, #4]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	9300      	str	r3, [sp, #0]
 8002cba:	4b1e      	ldr	r3, [pc, #120]	; (8002d34 <vStartIntegerMathTasks+0xf8>)
 8002cbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cc0:	491d      	ldr	r1, [pc, #116]	; (8002d38 <vStartIntegerMathTasks+0xfc>)
 8002cc2:	4813      	ldr	r0, [pc, #76]	; (8002d10 <vStartIntegerMathTasks+0xd4>)
 8002cc4:	f002 faa4 	bl	8005210 <xTaskCreate>
	xTaskCreate( vCompeteingIntMathTask3, "IntMath7", intgSTACK_SIZE, ( void * ) &( usTaskCheck[ 6 ] ), uxPriority, NULL );
 8002cc8:	2300      	movs	r3, #0
 8002cca:	9301      	str	r3, [sp, #4]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	9300      	str	r3, [sp, #0]
 8002cd0:	4b1a      	ldr	r3, [pc, #104]	; (8002d3c <vStartIntegerMathTasks+0x100>)
 8002cd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cd6:	491a      	ldr	r1, [pc, #104]	; (8002d40 <vStartIntegerMathTasks+0x104>)
 8002cd8:	4810      	ldr	r0, [pc, #64]	; (8002d1c <vStartIntegerMathTasks+0xe0>)
 8002cda:	f002 fa99 	bl	8005210 <xTaskCreate>
	xTaskCreate( vCompeteingIntMathTask4, "IntMath8", intgSTACK_SIZE, ( void * ) &( usTaskCheck[ 7 ] ), uxPriority, NULL );
 8002cde:	2300      	movs	r3, #0
 8002ce0:	9301      	str	r3, [sp, #4]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	9300      	str	r3, [sp, #0]
 8002ce6:	4b17      	ldr	r3, [pc, #92]	; (8002d44 <vStartIntegerMathTasks+0x108>)
 8002ce8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cec:	4916      	ldr	r1, [pc, #88]	; (8002d48 <vStartIntegerMathTasks+0x10c>)
 8002cee:	480e      	ldr	r0, [pc, #56]	; (8002d28 <vStartIntegerMathTasks+0xec>)
 8002cf0:	f002 fa8e 	bl	8005210 <xTaskCreate>
}
 8002cf4:	bf00      	nop
 8002cf6:	3708      	adds	r7, #8
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	2000012c 	.word	0x2000012c
 8002d00:	080097f4 	.word	0x080097f4
 8002d04:	08002d4d 	.word	0x08002d4d
 8002d08:	2000012e 	.word	0x2000012e
 8002d0c:	08009800 	.word	0x08009800
 8002d10:	08002de9 	.word	0x08002de9
 8002d14:	20000130 	.word	0x20000130
 8002d18:	0800980c 	.word	0x0800980c
 8002d1c:	08002e81 	.word	0x08002e81
 8002d20:	20000132 	.word	0x20000132
 8002d24:	08009818 	.word	0x08009818
 8002d28:	08002f65 	.word	0x08002f65
 8002d2c:	20000134 	.word	0x20000134
 8002d30:	08009824 	.word	0x08009824
 8002d34:	20000136 	.word	0x20000136
 8002d38:	08009830 	.word	0x08009830
 8002d3c:	20000138 	.word	0x20000138
 8002d40:	0800983c 	.word	0x0800983c
 8002d44:	2000013a 	.word	0x2000013a
 8002d48:	08009848 	.word	0x08009848

08002d4c <vCompeteingIntMathTask1>:
/*-----------------------------------------------------------*/

static void vCompeteingIntMathTask1( void *pvParameters )
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b08c      	sub	sp, #48	; 0x30
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
long l1, l2, l3, l4;
short sError = pdFALSE;
 8002d54:	2300      	movs	r3, #0
 8002d56:	85fb      	strh	r3, [r7, #46]	; 0x2e
volatile unsigned short *pusTaskCheckVariable;
const long lAnswer = ( ( long ) 74565L + ( long ) 1234567L ) * ( long ) -918L;
 8002d58:	4b1c      	ldr	r3, [pc, #112]	; (8002dcc <vCompeteingIntMathTask1+0x80>)
 8002d5a:	62bb      	str	r3, [r7, #40]	; 0x28
const char * const pcTaskStartMsg = "Integer math task 1 started.\r\n";
 8002d5c:	4b1c      	ldr	r3, [pc, #112]	; (8002dd0 <vCompeteingIntMathTask1+0x84>)
 8002d5e:	613b      	str	r3, [r7, #16]
const char * const pcTaskFailMsg = "Integer math task 1 failed.\r\n";
 8002d60:	4b1c      	ldr	r3, [pc, #112]	; (8002dd4 <vCompeteingIntMathTask1+0x88>)
 8002d62:	60fb      	str	r3, [r7, #12]

	/* Queue a message for printing to say the task has started. */
	vPrintDisplayMessage( &pcTaskStartMsg );
 8002d64:	f107 0310 	add.w	r3, r7, #16
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f000 f9a3 	bl	80030b4 <vPrintDisplayMessage>

	/* The variable this task increments to show it is still running is passed in
	as the parameter. */
	pusTaskCheckVariable = ( unsigned short * ) pvParameters;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	627b      	str	r3, [r7, #36]	; 0x24

	/* Keep performing a calculation and checking the result against a constant. */
	for(;;)
	{
		l1 = ( long ) 74565L;
 8002d72:	4b19      	ldr	r3, [pc, #100]	; (8002dd8 <vCompeteingIntMathTask1+0x8c>)
 8002d74:	623b      	str	r3, [r7, #32]
		l2 = ( long ) 1234567L;
 8002d76:	4b19      	ldr	r3, [pc, #100]	; (8002ddc <vCompeteingIntMathTask1+0x90>)
 8002d78:	61fb      	str	r3, [r7, #28]
		l3 = ( long ) -918L;
 8002d7a:	4b19      	ldr	r3, [pc, #100]	; (8002de0 <vCompeteingIntMathTask1+0x94>)
 8002d7c:	61bb      	str	r3, [r7, #24]

		l4 = ( l1 + l2 ) * l3;
 8002d7e:	6a3a      	ldr	r2, [r7, #32]
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	4413      	add	r3, r2
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	fb02 f303 	mul.w	r3, r2, r3
 8002d8a:	617b      	str	r3, [r7, #20]

		taskYIELD();
 8002d8c:	4b15      	ldr	r3, [pc, #84]	; (8002de4 <vCompeteingIntMathTask1+0x98>)
 8002d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d92:	601a      	str	r2, [r3, #0]
 8002d94:	f3bf 8f4f 	dsb	sy
 8002d98:	f3bf 8f6f 	isb	sy

		/* If the calculation does not match the expected constant, stop the
		increment of the check variable. */
		if( l4 != lAnswer )
 8002d9c:	697a      	ldr	r2, [r7, #20]
 8002d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d006      	beq.n	8002db2 <vCompeteingIntMathTask1+0x66>
		{
			vPrintDisplayMessage( &pcTaskFailMsg );
 8002da4:	f107 030c 	add.w	r3, r7, #12
 8002da8:	4618      	mov	r0, r3
 8002daa:	f000 f983 	bl	80030b4 <vPrintDisplayMessage>
			sError = pdTRUE;
 8002dae:	2301      	movs	r3, #1
 8002db0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		}

		if( sError == pdFALSE )
 8002db2:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d1db      	bne.n	8002d72 <vCompeteingIntMathTask1+0x26>
		{
			/* If the calculation has always been correct, increment the check
			variable so we know	this task is still running okay. */
			( *pusTaskCheckVariable )++;
 8002dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbc:	881b      	ldrh	r3, [r3, #0]
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc6:	801a      	strh	r2, [r3, #0]
		l1 = ( long ) 74565L;
 8002dc8:	e7d3      	b.n	8002d72 <vCompeteingIntMathTask1+0x26>
 8002dca:	bf00      	nop
 8002dcc:	b85e3e78 	.word	0xb85e3e78
 8002dd0:	08009854 	.word	0x08009854
 8002dd4:	08009874 	.word	0x08009874
 8002dd8:	00012345 	.word	0x00012345
 8002ddc:	0012d687 	.word	0x0012d687
 8002de0:	fffffc6a 	.word	0xfffffc6a
 8002de4:	e000ed04 	.word	0xe000ed04

08002de8 <vCompeteingIntMathTask2>:
	}
}
/*-----------------------------------------------------------*/

static void vCompeteingIntMathTask2( void *pvParameters )
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b08c      	sub	sp, #48	; 0x30
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
long l1, l2, l3, l4;
short sError = pdFALSE;
 8002df0:	2300      	movs	r3, #0
 8002df2:	85fb      	strh	r3, [r7, #46]	; 0x2e
volatile unsigned short *pusTaskCheckVariable;
const long lAnswer = ( ( long ) -389000L / ( long ) 329999L ) * ( long ) -89L;
 8002df4:	2359      	movs	r3, #89	; 0x59
 8002df6:	62bb      	str	r3, [r7, #40]	; 0x28
const char * const pcTaskStartMsg = "Integer math task 2 started.\r\n";
 8002df8:	4b1c      	ldr	r3, [pc, #112]	; (8002e6c <vCompeteingIntMathTask2+0x84>)
 8002dfa:	613b      	str	r3, [r7, #16]
const char * const pcTaskFailMsg = "Integer math task 2 failed.\r\n";
 8002dfc:	4b1c      	ldr	r3, [pc, #112]	; (8002e70 <vCompeteingIntMathTask2+0x88>)
 8002dfe:	60fb      	str	r3, [r7, #12]

	/* Queue a message for printing to say the task has started. */
	vPrintDisplayMessage( &pcTaskStartMsg );
 8002e00:	f107 0310 	add.w	r3, r7, #16
 8002e04:	4618      	mov	r0, r3
 8002e06:	f000 f955 	bl	80030b4 <vPrintDisplayMessage>

	/* The variable this task increments to show it is still running is passed in
	as the parameter. */
	pusTaskCheckVariable = ( unsigned short * ) pvParameters;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	627b      	str	r3, [r7, #36]	; 0x24

	/* Keep performing a calculation and checking the result against a constant. */
	for( ;; )
	{
		l1 = -389000L;
 8002e0e:	4b19      	ldr	r3, [pc, #100]	; (8002e74 <vCompeteingIntMathTask2+0x8c>)
 8002e10:	623b      	str	r3, [r7, #32]
		l2 = 329999L;
 8002e12:	4b19      	ldr	r3, [pc, #100]	; (8002e78 <vCompeteingIntMathTask2+0x90>)
 8002e14:	61fb      	str	r3, [r7, #28]
		l3 = -89L;
 8002e16:	f06f 0358 	mvn.w	r3, #88	; 0x58
 8002e1a:	61bb      	str	r3, [r7, #24]

		l4 = ( l1 / l2 ) * l3;
 8002e1c:	6a3a      	ldr	r2, [r7, #32]
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	fb92 f3f3 	sdiv	r3, r2, r3
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	fb02 f303 	mul.w	r3, r2, r3
 8002e2a:	617b      	str	r3, [r7, #20]

		taskYIELD();
 8002e2c:	4b13      	ldr	r3, [pc, #76]	; (8002e7c <vCompeteingIntMathTask2+0x94>)
 8002e2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e32:	601a      	str	r2, [r3, #0]
 8002e34:	f3bf 8f4f 	dsb	sy
 8002e38:	f3bf 8f6f 	isb	sy

		/* If the calculation does not match the expected constant, stop the
		increment of the check variable. */
		if( l4 != lAnswer )
 8002e3c:	697a      	ldr	r2, [r7, #20]
 8002e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d006      	beq.n	8002e52 <vCompeteingIntMathTask2+0x6a>
		{
			vPrintDisplayMessage( &pcTaskFailMsg );
 8002e44:	f107 030c 	add.w	r3, r7, #12
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f000 f933 	bl	80030b4 <vPrintDisplayMessage>
			sError = pdTRUE;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	85fb      	strh	r3, [r7, #46]	; 0x2e
		}

		if( sError == pdFALSE )
 8002e52:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1d9      	bne.n	8002e0e <vCompeteingIntMathTask2+0x26>
		{
			/* If the calculation has always been correct, increment the check
			variable so we know this task is still running okay. */
			( *pusTaskCheckVariable )++;
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5c:	881b      	ldrh	r3, [r3, #0]
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	3301      	adds	r3, #1
 8002e62:	b29a      	uxth	r2, r3
 8002e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e66:	801a      	strh	r2, [r3, #0]
		l1 = -389000L;
 8002e68:	e7d1      	b.n	8002e0e <vCompeteingIntMathTask2+0x26>
 8002e6a:	bf00      	nop
 8002e6c:	08009894 	.word	0x08009894
 8002e70:	080098b4 	.word	0x080098b4
 8002e74:	fffa1078 	.word	0xfffa1078
 8002e78:	0005090f 	.word	0x0005090f
 8002e7c:	e000ed04 	.word	0xe000ed04

08002e80 <vCompeteingIntMathTask3>:
	}
}
/*-----------------------------------------------------------*/

static void vCompeteingIntMathTask3( void *pvParameters )
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b08a      	sub	sp, #40	; 0x28
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
long *plArray, lTotal1, lTotal2;
short sError = pdFALSE;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	83fb      	strh	r3, [r7, #30]
volatile unsigned short *pusTaskCheckVariable;
const unsigned short usArraySize = ( unsigned short ) 250;
 8002e8c:	23fa      	movs	r3, #250	; 0xfa
 8002e8e:	837b      	strh	r3, [r7, #26]
unsigned short usPosition;
const char * const pcTaskStartMsg = "Integer math task 3 started.\r\n";
 8002e90:	4b31      	ldr	r3, [pc, #196]	; (8002f58 <vCompeteingIntMathTask3+0xd8>)
 8002e92:	60fb      	str	r3, [r7, #12]
const char * const pcTaskFailMsg = "Integer math task 3 failed.\r\n";
 8002e94:	4b31      	ldr	r3, [pc, #196]	; (8002f5c <vCompeteingIntMathTask3+0xdc>)
 8002e96:	60bb      	str	r3, [r7, #8]

	/* Queue a message for printing to say the task has started. */
	vPrintDisplayMessage( &pcTaskStartMsg );
 8002e98:	f107 030c 	add.w	r3, r7, #12
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f000 f909 	bl	80030b4 <vPrintDisplayMessage>

	/* The variable this task increments to show it is still running is passed in
	as the parameter. */
	pusTaskCheckVariable = ( unsigned short * ) pvParameters;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	617b      	str	r3, [r7, #20]

	/* Create the array we are going to use for our check calculation. */
	plArray = ( long * ) pvPortMalloc( ( size_t ) 250 * sizeof( long ) );
 8002ea6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002eaa:	f000 fee1 	bl	8003c70 <pvPortMalloc>
 8002eae:	6138      	str	r0, [r7, #16]
	/* Keep filling the array, keeping a running total of the values placed in the
	array.  Then run through the array adding up all the values.  If the two totals
	do not match, stop the check variable from incrementing. */
	for( ;; )
	{
		lTotal1 = ( long ) 0;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	627b      	str	r3, [r7, #36]	; 0x24
		lTotal2 = ( long ) 0;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	623b      	str	r3, [r7, #32]

		for( usPosition = 0; usPosition < usArraySize; usPosition++ )
 8002eb8:	2300      	movs	r3, #0
 8002eba:	83bb      	strh	r3, [r7, #28]
 8002ebc:	e00e      	b.n	8002edc <vCompeteingIntMathTask3+0x5c>
		{
			plArray[ usPosition ] = ( long ) usPosition + ( long ) 5;
 8002ebe:	8bbb      	ldrh	r3, [r7, #28]
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	693a      	ldr	r2, [r7, #16]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	8bba      	ldrh	r2, [r7, #28]
 8002ec8:	3205      	adds	r2, #5
 8002eca:	601a      	str	r2, [r3, #0]
			lTotal1 += ( long ) usPosition + ( long ) 5;
 8002ecc:	8bbb      	ldrh	r3, [r7, #28]
 8002ece:	3305      	adds	r3, #5
 8002ed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ed2:	4413      	add	r3, r2
 8002ed4:	627b      	str	r3, [r7, #36]	; 0x24
		for( usPosition = 0; usPosition < usArraySize; usPosition++ )
 8002ed6:	8bbb      	ldrh	r3, [r7, #28]
 8002ed8:	3301      	adds	r3, #1
 8002eda:	83bb      	strh	r3, [r7, #28]
 8002edc:	8bba      	ldrh	r2, [r7, #28]
 8002ede:	8b7b      	ldrh	r3, [r7, #26]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d3ec      	bcc.n	8002ebe <vCompeteingIntMathTask3+0x3e>
		}

		taskYIELD();
 8002ee4:	4b1e      	ldr	r3, [pc, #120]	; (8002f60 <vCompeteingIntMathTask3+0xe0>)
 8002ee6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002eea:	601a      	str	r2, [r3, #0]
 8002eec:	f3bf 8f4f 	dsb	sy
 8002ef0:	f3bf 8f6f 	isb	sy

		for( usPosition = 0; usPosition < usArraySize; usPosition++ )
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	83bb      	strh	r3, [r7, #28]
 8002ef8:	e00a      	b.n	8002f10 <vCompeteingIntMathTask3+0x90>
		{
			lTotal2 += plArray[ usPosition ];
 8002efa:	8bbb      	ldrh	r3, [r7, #28]
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	693a      	ldr	r2, [r7, #16]
 8002f00:	4413      	add	r3, r2
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6a3a      	ldr	r2, [r7, #32]
 8002f06:	4413      	add	r3, r2
 8002f08:	623b      	str	r3, [r7, #32]
		for( usPosition = 0; usPosition < usArraySize; usPosition++ )
 8002f0a:	8bbb      	ldrh	r3, [r7, #28]
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	83bb      	strh	r3, [r7, #28]
 8002f10:	8bba      	ldrh	r2, [r7, #28]
 8002f12:	8b7b      	ldrh	r3, [r7, #26]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d3f0      	bcc.n	8002efa <vCompeteingIntMathTask3+0x7a>
		}

		if( lTotal1 != lTotal2 )
 8002f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f1a:	6a3b      	ldr	r3, [r7, #32]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d006      	beq.n	8002f2e <vCompeteingIntMathTask3+0xae>
		{
			vPrintDisplayMessage( &pcTaskFailMsg );
 8002f20:	f107 0308 	add.w	r3, r7, #8
 8002f24:	4618      	mov	r0, r3
 8002f26:	f000 f8c5 	bl	80030b4 <vPrintDisplayMessage>
			sError = pdTRUE;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	83fb      	strh	r3, [r7, #30]
		}

		taskYIELD();
 8002f2e:	4b0c      	ldr	r3, [pc, #48]	; (8002f60 <vCompeteingIntMathTask3+0xe0>)
 8002f30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f34:	601a      	str	r2, [r3, #0]
 8002f36:	f3bf 8f4f 	dsb	sy
 8002f3a:	f3bf 8f6f 	isb	sy

		if( sError == pdFALSE )
 8002f3e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1b4      	bne.n	8002eb0 <vCompeteingIntMathTask3+0x30>
		{
			/* If the calculation has always been correct, increment the check
			variable so we know	this task is still running okay. */
			( *pusTaskCheckVariable )++;
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	881b      	ldrh	r3, [r3, #0]
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	801a      	strh	r2, [r3, #0]
		lTotal1 = ( long ) 0;
 8002f54:	e7ac      	b.n	8002eb0 <vCompeteingIntMathTask3+0x30>
 8002f56:	bf00      	nop
 8002f58:	080098d4 	.word	0x080098d4
 8002f5c:	080098f4 	.word	0x080098f4
 8002f60:	e000ed04 	.word	0xe000ed04

08002f64 <vCompeteingIntMathTask4>:
	}
}
/*-----------------------------------------------------------*/

static void vCompeteingIntMathTask4( void *pvParameters )
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b08a      	sub	sp, #40	; 0x28
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
long *plArray, lTotal1, lTotal2;
short sError = pdFALSE;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	83fb      	strh	r3, [r7, #30]
volatile unsigned short *pusTaskCheckVariable;
const unsigned short usArraySize = 250;
 8002f70:	23fa      	movs	r3, #250	; 0xfa
 8002f72:	837b      	strh	r3, [r7, #26]
unsigned short usPosition;
const char * const pcTaskStartMsg = "Integer math task 4 started.\r\n";
 8002f74:	4b34      	ldr	r3, [pc, #208]	; (8003048 <vCompeteingIntMathTask4+0xe4>)
 8002f76:	60fb      	str	r3, [r7, #12]
const char * const pcTaskFailMsg = "Integer math task 4 failed.\r\n";
 8002f78:	4b34      	ldr	r3, [pc, #208]	; (800304c <vCompeteingIntMathTask4+0xe8>)
 8002f7a:	60bb      	str	r3, [r7, #8]

	/* Queue a message for printing to say the task has started. */
	vPrintDisplayMessage( &pcTaskStartMsg );
 8002f7c:	f107 030c 	add.w	r3, r7, #12
 8002f80:	4618      	mov	r0, r3
 8002f82:	f000 f897 	bl	80030b4 <vPrintDisplayMessage>

	/* The variable this task increments to show it is still running is passed in
	as the parameter. */
	pusTaskCheckVariable = ( unsigned short * ) pvParameters;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	617b      	str	r3, [r7, #20]

	/* Create the array we are going to use for our check calculation. */
	plArray = ( long * ) pvPortMalloc( ( size_t ) 250 * sizeof( long ) );
 8002f8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002f8e:	f000 fe6f 	bl	8003c70 <pvPortMalloc>
 8002f92:	6138      	str	r0, [r7, #16]
	/* Keep filling the array, keeping a running total of the values placed in the 
	array.  Then run through the array adding up all the values.  If the two totals 
	do not match, stop the check variable from incrementing. */
	for( ;; )
	{
		lTotal1 = ( long ) 0;
 8002f94:	2300      	movs	r3, #0
 8002f96:	627b      	str	r3, [r7, #36]	; 0x24
		lTotal2 = ( long ) 0;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	623b      	str	r3, [r7, #32]

		for( usPosition = 0; usPosition < usArraySize; usPosition++ )
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	83bb      	strh	r3, [r7, #28]
 8002fa0:	e015      	b.n	8002fce <vCompeteingIntMathTask4+0x6a>
		{
			plArray[ usPosition ] = ( long ) usPosition * ( long ) 12;
 8002fa2:	8bbb      	ldrh	r3, [r7, #28]
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	693a      	ldr	r2, [r7, #16]
 8002fa8:	18d1      	adds	r1, r2, r3
 8002faa:	8bba      	ldrh	r2, [r7, #28]
 8002fac:	4613      	mov	r3, r2
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	4413      	add	r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	600b      	str	r3, [r1, #0]
			lTotal1 += ( long ) usPosition * ( long ) 12;	
 8002fb6:	8bba      	ldrh	r2, [r7, #28]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	4413      	add	r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc4:	4413      	add	r3, r2
 8002fc6:	627b      	str	r3, [r7, #36]	; 0x24
		for( usPosition = 0; usPosition < usArraySize; usPosition++ )
 8002fc8:	8bbb      	ldrh	r3, [r7, #28]
 8002fca:	3301      	adds	r3, #1
 8002fcc:	83bb      	strh	r3, [r7, #28]
 8002fce:	8bba      	ldrh	r2, [r7, #28]
 8002fd0:	8b7b      	ldrh	r3, [r7, #26]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d3e5      	bcc.n	8002fa2 <vCompeteingIntMathTask4+0x3e>
		}

		taskYIELD();
 8002fd6:	4b1e      	ldr	r3, [pc, #120]	; (8003050 <vCompeteingIntMathTask4+0xec>)
 8002fd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fdc:	601a      	str	r2, [r3, #0]
 8002fde:	f3bf 8f4f 	dsb	sy
 8002fe2:	f3bf 8f6f 	isb	sy
	
		for( usPosition = 0; usPosition < usArraySize; usPosition++ )
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	83bb      	strh	r3, [r7, #28]
 8002fea:	e00a      	b.n	8003002 <vCompeteingIntMathTask4+0x9e>
		{
			lTotal2 += plArray[ usPosition ];
 8002fec:	8bbb      	ldrh	r3, [r7, #28]
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	6a3a      	ldr	r2, [r7, #32]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	623b      	str	r3, [r7, #32]
		for( usPosition = 0; usPosition < usArraySize; usPosition++ )
 8002ffc:	8bbb      	ldrh	r3, [r7, #28]
 8002ffe:	3301      	adds	r3, #1
 8003000:	83bb      	strh	r3, [r7, #28]
 8003002:	8bba      	ldrh	r2, [r7, #28]
 8003004:	8b7b      	ldrh	r3, [r7, #26]
 8003006:	429a      	cmp	r2, r3
 8003008:	d3f0      	bcc.n	8002fec <vCompeteingIntMathTask4+0x88>
		}


		if( lTotal1 != lTotal2 )
 800300a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800300c:	6a3b      	ldr	r3, [r7, #32]
 800300e:	429a      	cmp	r2, r3
 8003010:	d006      	beq.n	8003020 <vCompeteingIntMathTask4+0xbc>
		{
			vPrintDisplayMessage( &pcTaskFailMsg );
 8003012:	f107 0308 	add.w	r3, r7, #8
 8003016:	4618      	mov	r0, r3
 8003018:	f000 f84c 	bl	80030b4 <vPrintDisplayMessage>
			sError = pdTRUE;
 800301c:	2301      	movs	r3, #1
 800301e:	83fb      	strh	r3, [r7, #30]
		}

		taskYIELD();
 8003020:	4b0b      	ldr	r3, [pc, #44]	; (8003050 <vCompeteingIntMathTask4+0xec>)
 8003022:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003026:	601a      	str	r2, [r3, #0]
 8003028:	f3bf 8f4f 	dsb	sy
 800302c:	f3bf 8f6f 	isb	sy

		if( sError == pdFALSE )
 8003030:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d1ad      	bne.n	8002f94 <vCompeteingIntMathTask4+0x30>
		{
			/* If the calculation has always been correct, increment the check 
			variable so we know	this task is still running okay. */
			( *pusTaskCheckVariable )++;
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	881b      	ldrh	r3, [r3, #0]
 800303c:	b29b      	uxth	r3, r3
 800303e:	3301      	adds	r3, #1
 8003040:	b29a      	uxth	r2, r3
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	801a      	strh	r2, [r3, #0]
		lTotal1 = ( long ) 0;
 8003046:	e7a5      	b.n	8002f94 <vCompeteingIntMathTask4+0x30>
 8003048:	08009914 	.word	0x08009914
 800304c:	08009934 	.word	0x08009934
 8003050:	e000ed04 	.word	0xe000ed04

08003054 <xAreIntegerMathsTaskStillRunning>:
}
/*-----------------------------------------------------------*/

/* This is called to check that all the created tasks are still running. */
portBASE_TYPE xAreIntegerMathsTaskStillRunning( void )
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
/* Keep a history of the check variables so we know if they have been incremented 
since the last call. */
static unsigned short usLastTaskCheck[ intgNUMBER_OF_TASKS ] = { ( unsigned short ) 0 };
portBASE_TYPE xReturn = pdTRUE, xTask;
 800305a:	2301      	movs	r3, #1
 800305c:	607b      	str	r3, [r7, #4]

	/* Check the maths tasks are still running by ensuring their check variables 
	are still incrementing. */
	for( xTask = 0; xTask < intgNUMBER_OF_TASKS; xTask++ )
 800305e:	2300      	movs	r3, #0
 8003060:	603b      	str	r3, [r7, #0]
 8003062:	e018      	b.n	8003096 <xAreIntegerMathsTaskStillRunning+0x42>
	{
		if( usTaskCheck[ xTask ] == usLastTaskCheck[ xTask ] )
 8003064:	4a11      	ldr	r2, [pc, #68]	; (80030ac <xAreIntegerMathsTaskStillRunning+0x58>)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800306c:	b29a      	uxth	r2, r3
 800306e:	4910      	ldr	r1, [pc, #64]	; (80030b0 <xAreIntegerMathsTaskStillRunning+0x5c>)
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003076:	429a      	cmp	r2, r3
 8003078:	d101      	bne.n	800307e <xAreIntegerMathsTaskStillRunning+0x2a>
		{
			/* The check has not incremented so an error exists. */
			xReturn = pdFALSE;
 800307a:	2300      	movs	r3, #0
 800307c:	607b      	str	r3, [r7, #4]
		}

		usLastTaskCheck[ xTask ] = usTaskCheck[ xTask ];
 800307e:	4a0b      	ldr	r2, [pc, #44]	; (80030ac <xAreIntegerMathsTaskStillRunning+0x58>)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003086:	b299      	uxth	r1, r3
 8003088:	4a09      	ldr	r2, [pc, #36]	; (80030b0 <xAreIntegerMathsTaskStillRunning+0x5c>)
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for( xTask = 0; xTask < intgNUMBER_OF_TASKS; xTask++ )
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	3301      	adds	r3, #1
 8003094:	603b      	str	r3, [r7, #0]
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	2b07      	cmp	r3, #7
 800309a:	dde3      	ble.n	8003064 <xAreIntegerMathsTaskStillRunning+0x10>
	}

	return xReturn;
 800309c:	687b      	ldr	r3, [r7, #4]
}
 800309e:	4618      	mov	r0, r3
 80030a0:	370c      	adds	r7, #12
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	2000012c 	.word	0x2000012c
 80030b0:	2000013c 	.word	0x2000013c

080030b4 <vPrintDisplayMessage>:
	xPrintQueue = xQueueCreate( uxQueueSize, ( unsigned portBASE_TYPE ) sizeof( char * ) );
}
/*-----------------------------------------------------------*/

void vPrintDisplayMessage( const char * const * ppcMessageToSend )
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
		xQueueSend( xPrintQueue, ( void * ) ppcMessageToSend, ( TickType_t ) 0 );
	#else
    	/* Stop warnings. */
		( void ) ppcMessageToSend;
	#endif
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <vStartRecursiveMutexTasks>:
static TaskHandle_t xControllingTaskHandle, xBlockingTaskHandle;

/*-----------------------------------------------------------*/

void vStartRecursiveMutexTasks( void )
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af02      	add	r7, sp, #8
	/* Just creates the mutex and the three tasks. */

	xMutex = xSemaphoreCreateRecursiveMutex();
 80030ce:	2004      	movs	r0, #4
 80030d0:	f001 f8c2 	bl	8004258 <xQueueCreateMutex>
 80030d4:	4602      	mov	r2, r0
 80030d6:	4b16      	ldr	r3, [pc, #88]	; (8003130 <vStartRecursiveMutexTasks+0x68>)
 80030d8:	601a      	str	r2, [r3, #0]

	if( xMutex != NULL )
 80030da:	4b15      	ldr	r3, [pc, #84]	; (8003130 <vStartRecursiveMutexTasks+0x68>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d023      	beq.n	800312a <vStartRecursiveMutexTasks+0x62>
		in use.  The registry is provided as a means for kernel aware
		debuggers to locate mutex and has no purpose if a kernel aware debugger
		is not being used.  The call to vQueueAddToRegistry() will be removed
		by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is
		defined to be less than 1. */
		vQueueAddToRegistry( ( QueueHandle_t ) xMutex, "Recursive_Mutex" );
 80030e2:	4b13      	ldr	r3, [pc, #76]	; (8003130 <vStartRecursiveMutexTasks+0x68>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4913      	ldr	r1, [pc, #76]	; (8003134 <vStartRecursiveMutexTasks+0x6c>)
 80030e8:	4618      	mov	r0, r3
 80030ea:	f002 f82d 	bl	8005148 <vQueueAddToRegistry>

		xTaskCreate( prvRecursiveMutexControllingTask, "Rec1", configMINIMAL_STACK_SIZE, NULL, recmuCONTROLLING_TASK_PRIORITY, &xControllingTaskHandle );
 80030ee:	4b12      	ldr	r3, [pc, #72]	; (8003138 <vStartRecursiveMutexTasks+0x70>)
 80030f0:	9301      	str	r3, [sp, #4]
 80030f2:	2302      	movs	r3, #2
 80030f4:	9300      	str	r3, [sp, #0]
 80030f6:	2300      	movs	r3, #0
 80030f8:	2282      	movs	r2, #130	; 0x82
 80030fa:	4910      	ldr	r1, [pc, #64]	; (800313c <vStartRecursiveMutexTasks+0x74>)
 80030fc:	4810      	ldr	r0, [pc, #64]	; (8003140 <vStartRecursiveMutexTasks+0x78>)
 80030fe:	f002 f887 	bl	8005210 <xTaskCreate>
		xTaskCreate( prvRecursiveMutexBlockingTask, "Rec2", configMINIMAL_STACK_SIZE, NULL, recmuBLOCKING_TASK_PRIORITY, &xBlockingTaskHandle );
 8003102:	4b10      	ldr	r3, [pc, #64]	; (8003144 <vStartRecursiveMutexTasks+0x7c>)
 8003104:	9301      	str	r3, [sp, #4]
 8003106:	2301      	movs	r3, #1
 8003108:	9300      	str	r3, [sp, #0]
 800310a:	2300      	movs	r3, #0
 800310c:	2282      	movs	r2, #130	; 0x82
 800310e:	490e      	ldr	r1, [pc, #56]	; (8003148 <vStartRecursiveMutexTasks+0x80>)
 8003110:	480e      	ldr	r0, [pc, #56]	; (800314c <vStartRecursiveMutexTasks+0x84>)
 8003112:	f002 f87d 	bl	8005210 <xTaskCreate>
		xTaskCreate( prvRecursiveMutexPollingTask, "Rec3", configMINIMAL_STACK_SIZE, NULL, recmuPOLLING_TASK_PRIORITY, NULL );
 8003116:	2300      	movs	r3, #0
 8003118:	9301      	str	r3, [sp, #4]
 800311a:	2300      	movs	r3, #0
 800311c:	9300      	str	r3, [sp, #0]
 800311e:	2300      	movs	r3, #0
 8003120:	2282      	movs	r2, #130	; 0x82
 8003122:	490b      	ldr	r1, [pc, #44]	; (8003150 <vStartRecursiveMutexTasks+0x88>)
 8003124:	480b      	ldr	r0, [pc, #44]	; (8003154 <vStartRecursiveMutexTasks+0x8c>)
 8003126:	f002 f873 	bl	8005210 <xTaskCreate>
	}
}
 800312a:	bf00      	nop
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	2000014c 	.word	0x2000014c
 8003134:	08009954 	.word	0x08009954
 8003138:	20000168 	.word	0x20000168
 800313c:	08009964 	.word	0x08009964
 8003140:	08003159 	.word	0x08003159
 8003144:	2000016c 	.word	0x2000016c
 8003148:	0800996c 	.word	0x0800996c
 800314c:	08003219 	.word	0x08003219
 8003150:	08009974 	.word	0x08009974
 8003154:	080032ad 	.word	0x080032ad

08003158 <prvRecursiveMutexControllingTask>:
/*-----------------------------------------------------------*/

static void prvRecursiveMutexControllingTask( void *pvParameters )
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
	{
		/* Should not be able to 'give' the mutex, as we have not yet 'taken'
		it.   The first time through, the mutex will not have been used yet,
		subsequent times through, at this point the mutex will be held by the
		polling task. */
		if( xSemaphoreGiveRecursive( xMutex ) == pdPASS )
 8003160:	4b29      	ldr	r3, [pc, #164]	; (8003208 <prvRecursiveMutexControllingTask+0xb0>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4618      	mov	r0, r3
 8003166:	f001 f88f 	bl	8004288 <xQueueGiveMutexRecursive>
 800316a:	4603      	mov	r3, r0
 800316c:	2b01      	cmp	r3, #1
 800316e:	d102      	bne.n	8003176 <prvRecursiveMutexControllingTask+0x1e>
		{
			xErrorOccurred = pdTRUE;
 8003170:	4b26      	ldr	r3, [pc, #152]	; (800320c <prvRecursiveMutexControllingTask+0xb4>)
 8003172:	2201      	movs	r2, #1
 8003174:	601a      	str	r2, [r3, #0]
		}

		for( ux = 0; ux < recmuMAX_COUNT; ux++ )
 8003176:	2300      	movs	r3, #0
 8003178:	60fb      	str	r3, [r7, #12]
 800317a:	e011      	b.n	80031a0 <prvRecursiveMutexControllingTask+0x48>
			at this point and this Take will cause the polling task to inherit
			the priority of this task.  In this case the block time must be
			long enough to ensure the polling task will execute again before the
			block time expires.  If the block time does expire then the error
			flag will be set here. */
			if( xSemaphoreTakeRecursive( xMutex, recmu15ms_DELAY ) != pdPASS )
 800317c:	4b22      	ldr	r3, [pc, #136]	; (8003208 <prvRecursiveMutexControllingTask+0xb0>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	210f      	movs	r1, #15
 8003182:	4618      	mov	r0, r3
 8003184:	f001 f8bd 	bl	8004302 <xQueueTakeMutexRecursive>
 8003188:	4603      	mov	r3, r0
 800318a:	2b01      	cmp	r3, #1
 800318c:	d002      	beq.n	8003194 <prvRecursiveMutexControllingTask+0x3c>
			{
				xErrorOccurred = pdTRUE;
 800318e:	4b1f      	ldr	r3, [pc, #124]	; (800320c <prvRecursiveMutexControllingTask+0xb4>)
 8003190:	2201      	movs	r2, #1
 8003192:	601a      	str	r2, [r3, #0]

			/* Ensure the other task attempting to access the mutex (and the
			other demo tasks) are able to execute to ensure they either block
			(where a block time is specified) or return an error (where no
			block time is specified) as the mutex is held by this task. */
			vTaskDelay( recmuSHORT_DELAY );
 8003194:	2014      	movs	r0, #20
 8003196:	f002 fab3 	bl	8005700 <vTaskDelay>
		for( ux = 0; ux < recmuMAX_COUNT; ux++ )
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	3301      	adds	r3, #1
 800319e:	60fb      	str	r3, [r7, #12]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2b09      	cmp	r3, #9
 80031a4:	d9ea      	bls.n	800317c <prvRecursiveMutexControllingTask+0x24>
		}

		/* For each time we took the mutex, give it back. */
		for( ux = 0; ux < recmuMAX_COUNT; ux++ )
 80031a6:	2300      	movs	r3, #0
 80031a8:	60fb      	str	r3, [r7, #12]
 80031aa:	e010      	b.n	80031ce <prvRecursiveMutexControllingTask+0x76>
		{
			/* Ensure the other task attempting to access the mutex (and the
			other demo tasks) are able to execute. */
			vTaskDelay( recmuSHORT_DELAY );
 80031ac:	2014      	movs	r0, #20
 80031ae:	f002 faa7 	bl	8005700 <vTaskDelay>
			/* We should now be able to give the mutex as many times as we
			took it.  When the mutex is available again the Blocking task
			should be unblocked but not run because it has a lower priority
			than this task.  The polling task should also not run at this point
			as it too has a lower priority than this task. */
			if( xSemaphoreGiveRecursive( xMutex ) != pdPASS )
 80031b2:	4b15      	ldr	r3, [pc, #84]	; (8003208 <prvRecursiveMutexControllingTask+0xb0>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f001 f866 	bl	8004288 <xQueueGiveMutexRecursive>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d002      	beq.n	80031c8 <prvRecursiveMutexControllingTask+0x70>
			{
				xErrorOccurred = pdTRUE;
 80031c2:	4b12      	ldr	r3, [pc, #72]	; (800320c <prvRecursiveMutexControllingTask+0xb4>)
 80031c4:	2201      	movs	r2, #1
 80031c6:	601a      	str	r2, [r3, #0]
		for( ux = 0; ux < recmuMAX_COUNT; ux++ )
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	3301      	adds	r3, #1
 80031cc:	60fb      	str	r3, [r7, #12]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2b09      	cmp	r3, #9
 80031d2:	d9eb      	bls.n	80031ac <prvRecursiveMutexControllingTask+0x54>
			#endif
		}

		/* Having given it back the same number of times as it was taken, we
		should no longer be the mutex owner, so the next give should fail. */
		if( xSemaphoreGiveRecursive( xMutex ) == pdPASS )
 80031d4:	4b0c      	ldr	r3, [pc, #48]	; (8003208 <prvRecursiveMutexControllingTask+0xb0>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4618      	mov	r0, r3
 80031da:	f001 f855 	bl	8004288 <xQueueGiveMutexRecursive>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d102      	bne.n	80031ea <prvRecursiveMutexControllingTask+0x92>
		{
			xErrorOccurred = pdTRUE;
 80031e4:	4b09      	ldr	r3, [pc, #36]	; (800320c <prvRecursiveMutexControllingTask+0xb4>)
 80031e6:	2201      	movs	r2, #1
 80031e8:	601a      	str	r2, [r3, #0]
		}

		/* Keep count of the number of cycles this task has performed so a
		stall can be detected. */
		uxControllingCycles++;
 80031ea:	4b09      	ldr	r3, [pc, #36]	; (8003210 <prvRecursiveMutexControllingTask+0xb8>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	3301      	adds	r3, #1
 80031f0:	4a07      	ldr	r2, [pc, #28]	; (8003210 <prvRecursiveMutexControllingTask+0xb8>)
 80031f2:	6013      	str	r3, [r2, #0]

		/* Suspend ourselves so the blocking task can execute. */
		xControllingIsSuspended = pdTRUE;
 80031f4:	4b07      	ldr	r3, [pc, #28]	; (8003214 <prvRecursiveMutexControllingTask+0xbc>)
 80031f6:	2201      	movs	r2, #1
 80031f8:	601a      	str	r2, [r3, #0]
		vTaskSuspend( NULL );
 80031fa:	2000      	movs	r0, #0
 80031fc:	f002 fb8e 	bl	800591c <vTaskSuspend>
		xControllingIsSuspended = pdFALSE;
 8003200:	4b04      	ldr	r3, [pc, #16]	; (8003214 <prvRecursiveMutexControllingTask+0xbc>)
 8003202:	2200      	movs	r2, #0
 8003204:	601a      	str	r2, [r3, #0]
		if( xSemaphoreGiveRecursive( xMutex ) == pdPASS )
 8003206:	e7ab      	b.n	8003160 <prvRecursiveMutexControllingTask+0x8>
 8003208:	2000014c 	.word	0x2000014c
 800320c:	20000150 	.word	0x20000150
 8003210:	2000015c 	.word	0x2000015c
 8003214:	20000154 	.word	0x20000154

08003218 <prvRecursiveMutexBlockingTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvRecursiveMutexBlockingTask( void *pvParameters )
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
		this call should block until the controlling task has given up the
		mutex, and not actually execute	past this call until the controlling
		task is suspended.  portMAX_DELAY - 1 is used instead of portMAX_DELAY
		to ensure the task's state is reported as Blocked and not Suspended in
		a later call to configASSERT() (within the polling task). */
		if( xSemaphoreTakeRecursive( xMutex, ( portMAX_DELAY - 1 ) ) == pdPASS )
 8003220:	4b1c      	ldr	r3, [pc, #112]	; (8003294 <prvRecursiveMutexBlockingTask+0x7c>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f06f 0101 	mvn.w	r1, #1
 8003228:	4618      	mov	r0, r3
 800322a:	f001 f86a 	bl	8004302 <xQueueTakeMutexRecursive>
 800322e:	4603      	mov	r3, r0
 8003230:	2b01      	cmp	r3, #1
 8003232:	d11c      	bne.n	800326e <prvRecursiveMutexBlockingTask+0x56>
		{
			if( xControllingIsSuspended != pdTRUE )
 8003234:	4b18      	ldr	r3, [pc, #96]	; (8003298 <prvRecursiveMutexBlockingTask+0x80>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2b01      	cmp	r3, #1
 800323a:	d003      	beq.n	8003244 <prvRecursiveMutexBlockingTask+0x2c>
			{
				/* Did not expect to execute until the controlling task was
				suspended. */
				xErrorOccurred = pdTRUE;
 800323c:	4b17      	ldr	r3, [pc, #92]	; (800329c <prvRecursiveMutexBlockingTask+0x84>)
 800323e:	2201      	movs	r2, #1
 8003240:	601a      	str	r2, [r3, #0]
 8003242:	e017      	b.n	8003274 <prvRecursiveMutexBlockingTask+0x5c>
			}
			else
			{
				/* Give the mutex back before suspending ourselves to allow
				the polling task to obtain the mutex. */
				if( xSemaphoreGiveRecursive( xMutex ) != pdPASS )
 8003244:	4b13      	ldr	r3, [pc, #76]	; (8003294 <prvRecursiveMutexBlockingTask+0x7c>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4618      	mov	r0, r3
 800324a:	f001 f81d 	bl	8004288 <xQueueGiveMutexRecursive>
 800324e:	4603      	mov	r3, r0
 8003250:	2b01      	cmp	r3, #1
 8003252:	d002      	beq.n	800325a <prvRecursiveMutexBlockingTask+0x42>
				{
					xErrorOccurred = pdTRUE;
 8003254:	4b11      	ldr	r3, [pc, #68]	; (800329c <prvRecursiveMutexBlockingTask+0x84>)
 8003256:	2201      	movs	r2, #1
 8003258:	601a      	str	r2, [r3, #0]
				}

				xBlockingIsSuspended = pdTRUE;
 800325a:	4b11      	ldr	r3, [pc, #68]	; (80032a0 <prvRecursiveMutexBlockingTask+0x88>)
 800325c:	2201      	movs	r2, #1
 800325e:	601a      	str	r2, [r3, #0]
				vTaskSuspend( NULL );
 8003260:	2000      	movs	r0, #0
 8003262:	f002 fb5b 	bl	800591c <vTaskSuspend>
				xBlockingIsSuspended = pdFALSE;
 8003266:	4b0e      	ldr	r3, [pc, #56]	; (80032a0 <prvRecursiveMutexBlockingTask+0x88>)
 8003268:	2200      	movs	r2, #0
 800326a:	601a      	str	r2, [r3, #0]
 800326c:	e002      	b.n	8003274 <prvRecursiveMutexBlockingTask+0x5c>
		}
		else
		{
			/* We should not leave the xSemaphoreTakeRecursive() function
			until the mutex was obtained. */
			xErrorOccurred = pdTRUE;
 800326e:	4b0b      	ldr	r3, [pc, #44]	; (800329c <prvRecursiveMutexBlockingTask+0x84>)
 8003270:	2201      	movs	r2, #1
 8003272:	601a      	str	r2, [r3, #0]
		}

		/* The controlling and blocking tasks should be in lock step. */
		if( uxControllingCycles != ( uxBlockingCycles + 1 ) )
 8003274:	4b0b      	ldr	r3, [pc, #44]	; (80032a4 <prvRecursiveMutexBlockingTask+0x8c>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	1c5a      	adds	r2, r3, #1
 800327a:	4b0b      	ldr	r3, [pc, #44]	; (80032a8 <prvRecursiveMutexBlockingTask+0x90>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	429a      	cmp	r2, r3
 8003280:	d002      	beq.n	8003288 <prvRecursiveMutexBlockingTask+0x70>
		{
			xErrorOccurred = pdTRUE;
 8003282:	4b06      	ldr	r3, [pc, #24]	; (800329c <prvRecursiveMutexBlockingTask+0x84>)
 8003284:	2201      	movs	r2, #1
 8003286:	601a      	str	r2, [r3, #0]
		}

		/* Keep count of the number of cycles this task has performed so a
		stall can be detected. */
		uxBlockingCycles++;
 8003288:	4b06      	ldr	r3, [pc, #24]	; (80032a4 <prvRecursiveMutexBlockingTask+0x8c>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	3301      	adds	r3, #1
 800328e:	4a05      	ldr	r2, [pc, #20]	; (80032a4 <prvRecursiveMutexBlockingTask+0x8c>)
 8003290:	6013      	str	r3, [r2, #0]
		if( xSemaphoreTakeRecursive( xMutex, ( portMAX_DELAY - 1 ) ) == pdPASS )
 8003292:	e7c5      	b.n	8003220 <prvRecursiveMutexBlockingTask+0x8>
 8003294:	2000014c 	.word	0x2000014c
 8003298:	20000154 	.word	0x20000154
 800329c:	20000150 	.word	0x20000150
 80032a0:	20000158 	.word	0x20000158
 80032a4:	20000160 	.word	0x20000160
 80032a8:	2000015c 	.word	0x2000015c

080032ac <prvRecursiveMutexPollingTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvRecursiveMutexPollingTask( void *pvParameters )
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
	for( ;; )
	{
		/* Keep attempting to obtain the mutex.  We should only obtain it when
		the blocking task has suspended itself, which in turn should only
		happen when the controlling task is also suspended. */
		if( xSemaphoreTakeRecursive( xMutex, recmuNO_DELAY ) == pdPASS )
 80032b4:	4b2d      	ldr	r3, [pc, #180]	; (800336c <prvRecursiveMutexPollingTask+0xc0>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2100      	movs	r1, #0
 80032ba:	4618      	mov	r0, r3
 80032bc:	f001 f821 	bl	8004302 <xQueueTakeMutexRecursive>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d1f6      	bne.n	80032b4 <prvRecursiveMutexPollingTask+0x8>
				configASSERT( eTaskGetState( xBlockingTaskHandle ) == eSuspended );
			}
			#endif /* INCLUDE_eTaskGetState */

			/* Is the blocking task suspended? */
			if( ( xBlockingIsSuspended != pdTRUE ) || ( xControllingIsSuspended != pdTRUE ) )
 80032c6:	4b2a      	ldr	r3, [pc, #168]	; (8003370 <prvRecursiveMutexPollingTask+0xc4>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d103      	bne.n	80032d6 <prvRecursiveMutexPollingTask+0x2a>
 80032ce:	4b29      	ldr	r3, [pc, #164]	; (8003374 <prvRecursiveMutexPollingTask+0xc8>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d003      	beq.n	80032de <prvRecursiveMutexPollingTask+0x32>
			{
				xErrorOccurred = pdTRUE;
 80032d6:	4b28      	ldr	r3, [pc, #160]	; (8003378 <prvRecursiveMutexPollingTask+0xcc>)
 80032d8:	2201      	movs	r2, #1
 80032da:	601a      	str	r2, [r3, #0]
 80032dc:	e044      	b.n	8003368 <prvRecursiveMutexPollingTask+0xbc>
			}
			else
			{
				/* Keep count of the number of cycles this task has performed
				so a stall can be detected. */
				uxPollingCycles++;
 80032de:	4b27      	ldr	r3, [pc, #156]	; (800337c <prvRecursiveMutexPollingTask+0xd0>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	3301      	adds	r3, #1
 80032e4:	4a25      	ldr	r2, [pc, #148]	; (800337c <prvRecursiveMutexPollingTask+0xd0>)
 80032e6:	6013      	str	r3, [r2, #0]
				will then inherit the higher priority.  The Blocking task will
				block indefinitely when it attempts to obtain the mutex, the
				Controlling task will only block for a fixed period and an
				error will be latched if the polling task has not returned the
				mutex by the time this fixed period has expired. */
				vTaskResume( xBlockingTaskHandle );
 80032e8:	4b25      	ldr	r3, [pc, #148]	; (8003380 <prvRecursiveMutexPollingTask+0xd4>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f002 fbdb 	bl	8005aa8 <vTaskResume>
				#if( configUSE_PREEMPTION == 0 )
					taskYIELD();
				#endif

				vTaskResume( xControllingTaskHandle );
 80032f2:	4b24      	ldr	r3, [pc, #144]	; (8003384 <prvRecursiveMutexPollingTask+0xd8>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f002 fbd6 	bl	8005aa8 <vTaskResume>
					taskYIELD();
				#endif

				/* The other two tasks should now have executed and no longer
				be suspended. */
				if( ( xBlockingIsSuspended == pdTRUE ) || ( xControllingIsSuspended == pdTRUE ) )
 80032fc:	4b1c      	ldr	r3, [pc, #112]	; (8003370 <prvRecursiveMutexPollingTask+0xc4>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d003      	beq.n	800330c <prvRecursiveMutexPollingTask+0x60>
 8003304:	4b1b      	ldr	r3, [pc, #108]	; (8003374 <prvRecursiveMutexPollingTask+0xc8>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d102      	bne.n	8003312 <prvRecursiveMutexPollingTask+0x66>
				{
					xErrorOccurred = pdTRUE;
 800330c:	4b1a      	ldr	r3, [pc, #104]	; (8003378 <prvRecursiveMutexPollingTask+0xcc>)
 800330e:	2201      	movs	r2, #1
 8003310:	601a      	str	r2, [r3, #0]
				}

				#if( INCLUDE_uxTaskPriorityGet == 1 )
				{
					/* Check priority inherited. */
					configASSERT( uxTaskPriorityGet( NULL ) == recmuCONTROLLING_TASK_PRIORITY );
 8003312:	2000      	movs	r0, #0
 8003314:	f002 fa2c 	bl	8005770 <uxTaskPriorityGet>
 8003318:	4603      	mov	r3, r0
 800331a:	2b02      	cmp	r3, #2
 800331c:	d009      	beq.n	8003332 <prvRecursiveMutexPollingTask+0x86>
 800331e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003322:	f383 8811 	msr	BASEPRI, r3
 8003326:	f3bf 8f6f 	isb	sy
 800332a:	f3bf 8f4f 	dsb	sy
 800332e:	60fb      	str	r3, [r7, #12]
 8003330:	e7fe      	b.n	8003330 <prvRecursiveMutexPollingTask+0x84>
					configASSERT( eTaskGetState( xBlockingTaskHandle ) == eBlocked );
				}
				#endif /* INCLUDE_eTaskGetState */

				/* Release the mutex, disinheriting the higher priority again. */
				if( xSemaphoreGiveRecursive( xMutex ) != pdPASS )
 8003332:	4b0e      	ldr	r3, [pc, #56]	; (800336c <prvRecursiveMutexPollingTask+0xc0>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4618      	mov	r0, r3
 8003338:	f000 ffa6 	bl	8004288 <xQueueGiveMutexRecursive>
 800333c:	4603      	mov	r3, r0
 800333e:	2b01      	cmp	r3, #1
 8003340:	d002      	beq.n	8003348 <prvRecursiveMutexPollingTask+0x9c>
				{
					xErrorOccurred = pdTRUE;
 8003342:	4b0d      	ldr	r3, [pc, #52]	; (8003378 <prvRecursiveMutexPollingTask+0xcc>)
 8003344:	2201      	movs	r2, #1
 8003346:	601a      	str	r2, [r3, #0]
				}

				#if( INCLUDE_uxTaskPriorityGet == 1 )
				{
					/* Check priority disinherited. */
					configASSERT( uxTaskPriorityGet( NULL ) == recmuPOLLING_TASK_PRIORITY );
 8003348:	2000      	movs	r0, #0
 800334a:	f002 fa11 	bl	8005770 <uxTaskPriorityGet>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d0af      	beq.n	80032b4 <prvRecursiveMutexPollingTask+0x8>
 8003354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003358:	f383 8811 	msr	BASEPRI, r3
 800335c:	f3bf 8f6f 	isb	sy
 8003360:	f3bf 8f4f 	dsb	sy
 8003364:	60bb      	str	r3, [r7, #8]
 8003366:	e7fe      	b.n	8003366 <prvRecursiveMutexPollingTask+0xba>
		if( xSemaphoreTakeRecursive( xMutex, recmuNO_DELAY ) == pdPASS )
 8003368:	e7a4      	b.n	80032b4 <prvRecursiveMutexPollingTask+0x8>
 800336a:	bf00      	nop
 800336c:	2000014c 	.word	0x2000014c
 8003370:	20000158 	.word	0x20000158
 8003374:	20000154 	.word	0x20000154
 8003378:	20000150 	.word	0x20000150
 800337c:	20000164 	.word	0x20000164
 8003380:	2000016c 	.word	0x2000016c
 8003384:	20000168 	.word	0x20000168

08003388 <xAreRecursiveMutexTasksStillRunning>:
}
/*-----------------------------------------------------------*/

/* This is called to check that all the created tasks are still running. */
BaseType_t xAreRecursiveMutexTasksStillRunning( void )
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
BaseType_t xReturn;
static UBaseType_t uxLastControllingCycles = 0, uxLastBlockingCycles = 0, uxLastPollingCycles = 0;

	/* Is the controlling task still cycling? */
	if( uxLastControllingCycles == uxControllingCycles )
 800338e:	4b1d      	ldr	r3, [pc, #116]	; (8003404 <xAreRecursiveMutexTasksStillRunning+0x7c>)
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	4b1d      	ldr	r3, [pc, #116]	; (8003408 <xAreRecursiveMutexTasksStillRunning+0x80>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	429a      	cmp	r2, r3
 8003398:	d103      	bne.n	80033a2 <xAreRecursiveMutexTasksStillRunning+0x1a>
	{
		xErrorOccurred = pdTRUE;
 800339a:	4b1c      	ldr	r3, [pc, #112]	; (800340c <xAreRecursiveMutexTasksStillRunning+0x84>)
 800339c:	2201      	movs	r2, #1
 800339e:	601a      	str	r2, [r3, #0]
 80033a0:	e003      	b.n	80033aa <xAreRecursiveMutexTasksStillRunning+0x22>
	}
	else
	{
		uxLastControllingCycles = uxControllingCycles;
 80033a2:	4b19      	ldr	r3, [pc, #100]	; (8003408 <xAreRecursiveMutexTasksStillRunning+0x80>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a17      	ldr	r2, [pc, #92]	; (8003404 <xAreRecursiveMutexTasksStillRunning+0x7c>)
 80033a8:	6013      	str	r3, [r2, #0]
	}

	/* Is the blocking task still cycling? */
	if( uxLastBlockingCycles == uxBlockingCycles )
 80033aa:	4b19      	ldr	r3, [pc, #100]	; (8003410 <xAreRecursiveMutexTasksStillRunning+0x88>)
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	4b19      	ldr	r3, [pc, #100]	; (8003414 <xAreRecursiveMutexTasksStillRunning+0x8c>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d103      	bne.n	80033be <xAreRecursiveMutexTasksStillRunning+0x36>
	{
		xErrorOccurred = pdTRUE;
 80033b6:	4b15      	ldr	r3, [pc, #84]	; (800340c <xAreRecursiveMutexTasksStillRunning+0x84>)
 80033b8:	2201      	movs	r2, #1
 80033ba:	601a      	str	r2, [r3, #0]
 80033bc:	e003      	b.n	80033c6 <xAreRecursiveMutexTasksStillRunning+0x3e>
	}
	else
	{
		uxLastBlockingCycles = uxBlockingCycles;
 80033be:	4b15      	ldr	r3, [pc, #84]	; (8003414 <xAreRecursiveMutexTasksStillRunning+0x8c>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a13      	ldr	r2, [pc, #76]	; (8003410 <xAreRecursiveMutexTasksStillRunning+0x88>)
 80033c4:	6013      	str	r3, [r2, #0]
	}

	/* Is the polling task still cycling? */
	if( uxLastPollingCycles == uxPollingCycles )
 80033c6:	4b14      	ldr	r3, [pc, #80]	; (8003418 <xAreRecursiveMutexTasksStillRunning+0x90>)
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	4b14      	ldr	r3, [pc, #80]	; (800341c <xAreRecursiveMutexTasksStillRunning+0x94>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d103      	bne.n	80033da <xAreRecursiveMutexTasksStillRunning+0x52>
	{
		xErrorOccurred = pdTRUE;
 80033d2:	4b0e      	ldr	r3, [pc, #56]	; (800340c <xAreRecursiveMutexTasksStillRunning+0x84>)
 80033d4:	2201      	movs	r2, #1
 80033d6:	601a      	str	r2, [r3, #0]
 80033d8:	e003      	b.n	80033e2 <xAreRecursiveMutexTasksStillRunning+0x5a>
	}
	else
	{
		uxLastPollingCycles = uxPollingCycles;
 80033da:	4b10      	ldr	r3, [pc, #64]	; (800341c <xAreRecursiveMutexTasksStillRunning+0x94>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a0e      	ldr	r2, [pc, #56]	; (8003418 <xAreRecursiveMutexTasksStillRunning+0x90>)
 80033e0:	6013      	str	r3, [r2, #0]
	}

	if( xErrorOccurred == pdTRUE )
 80033e2:	4b0a      	ldr	r3, [pc, #40]	; (800340c <xAreRecursiveMutexTasksStillRunning+0x84>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d102      	bne.n	80033f0 <xAreRecursiveMutexTasksStillRunning+0x68>
	{
		xReturn = pdFAIL;
 80033ea:	2300      	movs	r3, #0
 80033ec:	607b      	str	r3, [r7, #4]
 80033ee:	e001      	b.n	80033f4 <xAreRecursiveMutexTasksStillRunning+0x6c>
	}
	else
	{
		xReturn = pdPASS;
 80033f0:	2301      	movs	r3, #1
 80033f2:	607b      	str	r3, [r7, #4]
	}

	return xReturn;
 80033f4:	687b      	ldr	r3, [r7, #4]
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	370c      	adds	r7, #12
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	20000170 	.word	0x20000170
 8003408:	2000015c 	.word	0x2000015c
 800340c:	20000150 	.word	0x20000150
 8003410:	20000174 	.word	0x20000174
 8003414:	20000160 	.word	0x20000160
 8003418:	20000178 	.word	0x20000178
 800341c:	20000164 	.word	0x20000164

08003420 <vStartSemaphoreTasks>:
const char * const pcSemaphoreTaskStart = "Guarded shared variable task started.\r\n";

/*-----------------------------------------------------------*/

void vStartSemaphoreTasks( unsigned portBASE_TYPE uxPriority )
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b088      	sub	sp, #32
 8003424:	af02      	add	r7, sp, #8
 8003426:	6078      	str	r0, [r7, #4]
xSemaphoreParameters *pxFirstSemaphoreParameters, *pxSecondSemaphoreParameters;
const TickType_t xBlockTime = ( TickType_t ) 100;
 8003428:	2364      	movs	r3, #100	; 0x64
 800342a:	617b      	str	r3, [r7, #20]

	/* Create the structure used to pass parameters to the first two tasks. */
	pxFirstSemaphoreParameters = ( xSemaphoreParameters * ) pvPortMalloc( sizeof( xSemaphoreParameters ) );
 800342c:	200c      	movs	r0, #12
 800342e:	f000 fc1f 	bl	8003c70 <pvPortMalloc>
 8003432:	6138      	str	r0, [r7, #16]

	if( pxFirstSemaphoreParameters != NULL )
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d037      	beq.n	80034aa <vStartSemaphoreTasks+0x8a>
	{
		/* Create the semaphore used by the first two tasks. */
		vSemaphoreCreateBinary( pxFirstSemaphoreParameters->xSemaphore );
 800343a:	2203      	movs	r2, #3
 800343c:	2100      	movs	r1, #0
 800343e:	2001      	movs	r0, #1
 8003440:	f000 fe66 	bl	8004110 <xQueueGenericCreate>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	601a      	str	r2, [r3, #0]
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d006      	beq.n	8003460 <vStartSemaphoreTasks+0x40>
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	6818      	ldr	r0, [r3, #0]
 8003456:	2300      	movs	r3, #0
 8003458:	2200      	movs	r2, #0
 800345a:	2100      	movs	r1, #0
 800345c:	f000 ffd2 	bl	8004404 <xQueueGenericSend>

		if( pxFirstSemaphoreParameters->xSemaphore != NULL )
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d020      	beq.n	80034aa <vStartSemaphoreTasks+0x8a>
		{
			/* Create the variable which is to be shared by the first two tasks. */
			pxFirstSemaphoreParameters->pulSharedVariable = ( unsigned long * ) pvPortMalloc( sizeof( unsigned long ) );
 8003468:	2004      	movs	r0, #4
 800346a:	f000 fc01 	bl	8003c70 <pvPortMalloc>
 800346e:	4602      	mov	r2, r0
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	605a      	str	r2, [r3, #4]

			/* Initialise the share variable to the value the tasks expect. */
			*( pxFirstSemaphoreParameters->pulSharedVariable ) = semtstNON_BLOCKING_EXPECTED_VALUE;
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	22ff      	movs	r2, #255	; 0xff
 800347a:	601a      	str	r2, [r3, #0]

			/* The first two tasks do not block on semaphore calls. */
			pxFirstSemaphoreParameters->xBlockTime = ( TickType_t ) 0;
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	2200      	movs	r2, #0
 8003480:	609a      	str	r2, [r3, #8]

			/* Spawn the first two tasks.  As they poll they operate at the idle priority. */
			xTaskCreate( prvSemaphoreTest, "PolSEM1", semtstSTACK_SIZE, ( void * ) pxFirstSemaphoreParameters, tskIDLE_PRIORITY, ( TaskHandle_t * ) NULL );
 8003482:	2300      	movs	r3, #0
 8003484:	9301      	str	r3, [sp, #4]
 8003486:	2300      	movs	r3, #0
 8003488:	9300      	str	r3, [sp, #0]
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	2282      	movs	r2, #130	; 0x82
 800348e:	4929      	ldr	r1, [pc, #164]	; (8003534 <vStartSemaphoreTasks+0x114>)
 8003490:	4829      	ldr	r0, [pc, #164]	; (8003538 <vStartSemaphoreTasks+0x118>)
 8003492:	f001 febd 	bl	8005210 <xTaskCreate>
			xTaskCreate( prvSemaphoreTest, "PolSEM2", semtstSTACK_SIZE, ( void * ) pxFirstSemaphoreParameters, tskIDLE_PRIORITY, ( TaskHandle_t * ) NULL );
 8003496:	2300      	movs	r3, #0
 8003498:	9301      	str	r3, [sp, #4]
 800349a:	2300      	movs	r3, #0
 800349c:	9300      	str	r3, [sp, #0]
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	2282      	movs	r2, #130	; 0x82
 80034a2:	4926      	ldr	r1, [pc, #152]	; (800353c <vStartSemaphoreTasks+0x11c>)
 80034a4:	4824      	ldr	r0, [pc, #144]	; (8003538 <vStartSemaphoreTasks+0x118>)
 80034a6:	f001 feb3 	bl	8005210 <xTaskCreate>
		}
	}

	/* Do exactly the same to create the second set of tasks, only this time 
	provide a block time for the semaphore calls. */
	pxSecondSemaphoreParameters = ( xSemaphoreParameters * ) pvPortMalloc( sizeof( xSemaphoreParameters ) );
 80034aa:	200c      	movs	r0, #12
 80034ac:	f000 fbe0 	bl	8003c70 <pvPortMalloc>
 80034b0:	60f8      	str	r0, [r7, #12]
	if( pxSecondSemaphoreParameters != NULL )
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d038      	beq.n	800352a <vStartSemaphoreTasks+0x10a>
	{
		vSemaphoreCreateBinary( pxSecondSemaphoreParameters->xSemaphore );
 80034b8:	2203      	movs	r2, #3
 80034ba:	2100      	movs	r1, #0
 80034bc:	2001      	movs	r0, #1
 80034be:	f000 fe27 	bl	8004110 <xQueueGenericCreate>
 80034c2:	4602      	mov	r2, r0
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	601a      	str	r2, [r3, #0]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d006      	beq.n	80034de <vStartSemaphoreTasks+0xbe>
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6818      	ldr	r0, [r3, #0]
 80034d4:	2300      	movs	r3, #0
 80034d6:	2200      	movs	r2, #0
 80034d8:	2100      	movs	r1, #0
 80034da:	f000 ff93 	bl	8004404 <xQueueGenericSend>

		if( pxSecondSemaphoreParameters->xSemaphore != NULL )
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d021      	beq.n	800352a <vStartSemaphoreTasks+0x10a>
		{
			pxSecondSemaphoreParameters->pulSharedVariable = ( unsigned long * ) pvPortMalloc( sizeof( unsigned long ) );
 80034e6:	2004      	movs	r0, #4
 80034e8:	f000 fbc2 	bl	8003c70 <pvPortMalloc>
 80034ec:	4602      	mov	r2, r0
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	605a      	str	r2, [r3, #4]
			*( pxSecondSemaphoreParameters->pulSharedVariable ) = semtstBLOCKING_EXPECTED_VALUE;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80034fa:	601a      	str	r2, [r3, #0]
			pxSecondSemaphoreParameters->xBlockTime = xBlockTime / portTICK_PERIOD_MS;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	697a      	ldr	r2, [r7, #20]
 8003500:	609a      	str	r2, [r3, #8]

			xTaskCreate( prvSemaphoreTest, "BlkSEM1", semtstSTACK_SIZE, ( void * ) pxSecondSemaphoreParameters, uxPriority, ( TaskHandle_t * ) NULL );
 8003502:	2300      	movs	r3, #0
 8003504:	9301      	str	r3, [sp, #4]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	9300      	str	r3, [sp, #0]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2282      	movs	r2, #130	; 0x82
 800350e:	490c      	ldr	r1, [pc, #48]	; (8003540 <vStartSemaphoreTasks+0x120>)
 8003510:	4809      	ldr	r0, [pc, #36]	; (8003538 <vStartSemaphoreTasks+0x118>)
 8003512:	f001 fe7d 	bl	8005210 <xTaskCreate>
			xTaskCreate( prvSemaphoreTest, "BlkSEM2", semtstSTACK_SIZE, ( void * ) pxSecondSemaphoreParameters, uxPriority, ( TaskHandle_t * ) NULL );
 8003516:	2300      	movs	r3, #0
 8003518:	9301      	str	r3, [sp, #4]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	9300      	str	r3, [sp, #0]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2282      	movs	r2, #130	; 0x82
 8003522:	4908      	ldr	r1, [pc, #32]	; (8003544 <vStartSemaphoreTasks+0x124>)
 8003524:	4804      	ldr	r0, [pc, #16]	; (8003538 <vStartSemaphoreTasks+0x118>)
 8003526:	f001 fe73 	bl	8005210 <xTaskCreate>
		}
	}
}
 800352a:	bf00      	nop
 800352c:	3718      	adds	r7, #24
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	080099d4 	.word	0x080099d4
 8003538:	08003549 	.word	0x08003549
 800353c:	080099dc 	.word	0x080099dc
 8003540:	080099e4 	.word	0x080099e4
 8003544:	080099ec 	.word	0x080099ec

08003548 <prvSemaphoreTest>:
/*-----------------------------------------------------------*/

static void prvSemaphoreTest( void *pvParameters )
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b088      	sub	sp, #32
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
xSemaphoreParameters *pxParameters;
volatile unsigned long *pulSharedVariable, ulExpectedValue;
unsigned long ulCounter;
short sError = pdFALSE, sCheckVariableToUse;
 8003550:	2300      	movs	r3, #0
 8003552:	837b      	strh	r3, [r7, #26]

	/* See which check variable to use.  sNextCheckVariable is not semaphore 
	protected! */
	portENTER_CRITICAL();
 8003554:	f000 fa7c 	bl	8003a50 <vPortEnterCritical>
		sCheckVariableToUse = sNextCheckVariable;
 8003558:	4b45      	ldr	r3, [pc, #276]	; (8003670 <prvSemaphoreTest+0x128>)
 800355a:	881b      	ldrh	r3, [r3, #0]
 800355c:	833b      	strh	r3, [r7, #24]
		sNextCheckVariable++;
 800355e:	4b44      	ldr	r3, [pc, #272]	; (8003670 <prvSemaphoreTest+0x128>)
 8003560:	881b      	ldrh	r3, [r3, #0]
 8003562:	b21b      	sxth	r3, r3
 8003564:	b29b      	uxth	r3, r3
 8003566:	3301      	adds	r3, #1
 8003568:	b29b      	uxth	r3, r3
 800356a:	b21a      	sxth	r2, r3
 800356c:	4b40      	ldr	r3, [pc, #256]	; (8003670 <prvSemaphoreTest+0x128>)
 800356e:	801a      	strh	r2, [r3, #0]
	portEXIT_CRITICAL();
 8003570:	f000 fa9c 	bl	8003aac <vPortExitCritical>

	/* Queue a message for printing to say the task has started. */
	vPrintDisplayMessage( &pcSemaphoreTaskStart );
 8003574:	483f      	ldr	r0, [pc, #252]	; (8003674 <prvSemaphoreTest+0x12c>)
 8003576:	f7ff fd9d 	bl	80030b4 <vPrintDisplayMessage>

	/* A structure is passed in as the parameter.  This contains the shared 
	variable being guarded. */
	pxParameters = ( xSemaphoreParameters * ) pvParameters;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	617b      	str	r3, [r7, #20]
	pulSharedVariable = pxParameters->pulSharedVariable;
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	613b      	str	r3, [r7, #16]

	/* If we are blocking we use a much higher count to ensure loads of context
	switches occur during the count. */
	if( pxParameters->xBlockTime > ( TickType_t ) 0 )
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d003      	beq.n	8003594 <prvSemaphoreTest+0x4c>
	{
		ulExpectedValue = semtstBLOCKING_EXPECTED_VALUE;
 800358c:	f640 73ff 	movw	r3, #4095	; 0xfff
 8003590:	60fb      	str	r3, [r7, #12]
 8003592:	e001      	b.n	8003598 <prvSemaphoreTest+0x50>
	}
	else
	{
		ulExpectedValue = semtstNON_BLOCKING_EXPECTED_VALUE;
 8003594:	23ff      	movs	r3, #255	; 0xff
 8003596:	60fb      	str	r3, [r7, #12]
	}

	for( ;; )
	{
		/* Try to obtain the semaphore. */
		if( xSemaphoreTake( pxParameters->xSemaphore, pxParameters->xBlockTime ) == pdPASS )
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	6818      	ldr	r0, [r3, #0]
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	689a      	ldr	r2, [r3, #8]
 80035a0:	2300      	movs	r3, #0
 80035a2:	2100      	movs	r1, #0
 80035a4:	f001 fa92 	bl	8004acc <xQueueGenericReceive>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d152      	bne.n	8003654 <prvSemaphoreTest+0x10c>
		{
			/* We have the semaphore and so expect any other tasks using the
			shared variable to have left it in the state we expect to find
			it. */
			if( *pulSharedVariable != ulExpectedValue )
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d004      	beq.n	80035c2 <prvSemaphoreTest+0x7a>
			{
				vPrintDisplayMessage( &pcPollingSemaphoreTaskError );
 80035b8:	482f      	ldr	r0, [pc, #188]	; (8003678 <prvSemaphoreTest+0x130>)
 80035ba:	f7ff fd7b 	bl	80030b4 <vPrintDisplayMessage>
				sError = pdTRUE;
 80035be:	2301      	movs	r3, #1
 80035c0:	837b      	strh	r3, [r7, #26]
			}
			
			/* Clear the variable, then count it back up to the expected value
			before releasing the semaphore.  Would expect a context switch or
			two during this time. */
			for( ulCounter = ( unsigned long ) 0; ulCounter <= ulExpectedValue; ulCounter++ )
 80035c2:	2300      	movs	r3, #0
 80035c4:	61fb      	str	r3, [r7, #28]
 80035c6:	e013      	b.n	80035f0 <prvSemaphoreTest+0xa8>
			{
				*pulSharedVariable = ulCounter;
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	69fa      	ldr	r2, [r7, #28]
 80035cc:	601a      	str	r2, [r3, #0]
				if( *pulSharedVariable != ulCounter )
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d008      	beq.n	80035ea <prvSemaphoreTest+0xa2>
				{
					if( sError == pdFALSE )
 80035d8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d102      	bne.n	80035e6 <prvSemaphoreTest+0x9e>
					{
						vPrintDisplayMessage( &pcPollingSemaphoreTaskError );
 80035e0:	4825      	ldr	r0, [pc, #148]	; (8003678 <prvSemaphoreTest+0x130>)
 80035e2:	f7ff fd67 	bl	80030b4 <vPrintDisplayMessage>
					}
					sError = pdTRUE;
 80035e6:	2301      	movs	r3, #1
 80035e8:	837b      	strh	r3, [r7, #26]
			for( ulCounter = ( unsigned long ) 0; ulCounter <= ulExpectedValue; ulCounter++ )
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	3301      	adds	r3, #1
 80035ee:	61fb      	str	r3, [r7, #28]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	69fa      	ldr	r2, [r7, #28]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d9e7      	bls.n	80035c8 <prvSemaphoreTest+0x80>
				}
			}

			/* Release the semaphore, and if no errors have occurred increment the check
			variable. */
			if(	xSemaphoreGive( pxParameters->xSemaphore ) == pdFALSE )
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	6818      	ldr	r0, [r3, #0]
 80035fc:	2300      	movs	r3, #0
 80035fe:	2200      	movs	r2, #0
 8003600:	2100      	movs	r1, #0
 8003602:	f000 feff 	bl	8004404 <xQueueGenericSend>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d104      	bne.n	8003616 <prvSemaphoreTest+0xce>
			{
				vPrintDisplayMessage( &pcPollingSemaphoreTaskError );
 800360c:	481a      	ldr	r0, [pc, #104]	; (8003678 <prvSemaphoreTest+0x130>)
 800360e:	f7ff fd51 	bl	80030b4 <vPrintDisplayMessage>
				sError = pdTRUE;
 8003612:	2301      	movs	r3, #1
 8003614:	837b      	strh	r3, [r7, #26]
			}

			if( sError == pdFALSE )
 8003616:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d110      	bne.n	8003640 <prvSemaphoreTest+0xf8>
			{
				if( sCheckVariableToUse < semtstNUM_TASKS )
 800361e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003622:	2b03      	cmp	r3, #3
 8003624:	dc0c      	bgt.n	8003640 <prvSemaphoreTest+0xf8>
				{
					( sCheckVariables[ sCheckVariableToUse ] )++;
 8003626:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800362a:	4a14      	ldr	r2, [pc, #80]	; (800367c <prvSemaphoreTest+0x134>)
 800362c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003630:	b212      	sxth	r2, r2
 8003632:	b292      	uxth	r2, r2
 8003634:	3201      	adds	r2, #1
 8003636:	b292      	uxth	r2, r2
 8003638:	b211      	sxth	r1, r2
 800363a:	4a10      	ldr	r2, [pc, #64]	; (800367c <prvSemaphoreTest+0x134>)
 800363c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			/* If we have a block time then we are running at a priority higher
			than the idle priority.  This task takes a long time to complete
			a cycle	(deliberately so to test the guarding) so will be starving
			out lower priority tasks.  Block for some time to allow give lower
			priority tasks some processor time. */
			vTaskDelay( pxParameters->xBlockTime * semtstDELAY_FACTOR );
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	689a      	ldr	r2, [r3, #8]
 8003644:	4613      	mov	r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	4413      	add	r3, r2
 800364a:	005b      	lsls	r3, r3, #1
 800364c:	4618      	mov	r0, r3
 800364e:	f002 f857 	bl	8005700 <vTaskDelay>
 8003652:	e7a1      	b.n	8003598 <prvSemaphoreTest+0x50>
		}
		else
		{
			if( pxParameters->xBlockTime == ( TickType_t ) 0 )
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d19d      	bne.n	8003598 <prvSemaphoreTest+0x50>
			{
				/* We have not got the semaphore yet, so no point using the
				processor.  We are not blocking when attempting to obtain the
				semaphore. */
				taskYIELD();
 800365c:	4b08      	ldr	r3, [pc, #32]	; (8003680 <prvSemaphoreTest+0x138>)
 800365e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003662:	601a      	str	r2, [r3, #0]
 8003664:	f3bf 8f4f 	dsb	sy
 8003668:	f3bf 8f6f 	isb	sy
		if( xSemaphoreTake( pxParameters->xSemaphore, pxParameters->xBlockTime ) == pdPASS )
 800366c:	e794      	b.n	8003598 <prvSemaphoreTest+0x50>
 800366e:	bf00      	nop
 8003670:	20000184 	.word	0x20000184
 8003674:	08009dac 	.word	0x08009dac
 8003678:	08009da8 	.word	0x08009da8
 800367c:	2000017c 	.word	0x2000017c
 8003680:	e000ed04 	.word	0xe000ed04

08003684 <xAreSemaphoreTasksStillRunning>:
}
/*-----------------------------------------------------------*/

/* This is called to check that all the created tasks are still running. */
portBASE_TYPE xAreSemaphoreTasksStillRunning( void )
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
static short sLastCheckVariables[ semtstNUM_TASKS ] = { 0 };
portBASE_TYPE xTask, xReturn = pdTRUE;
 800368a:	2301      	movs	r3, #1
 800368c:	603b      	str	r3, [r7, #0]

	for( xTask = 0; xTask < semtstNUM_TASKS; xTask++ )
 800368e:	2300      	movs	r3, #0
 8003690:	607b      	str	r3, [r7, #4]
 8003692:	e018      	b.n	80036c6 <xAreSemaphoreTasksStillRunning+0x42>
	{
		if( sLastCheckVariables[ xTask ] == sCheckVariables[ xTask ] )
 8003694:	4a11      	ldr	r2, [pc, #68]	; (80036dc <xAreSemaphoreTasksStillRunning+0x58>)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800369c:	4910      	ldr	r1, [pc, #64]	; (80036e0 <xAreSemaphoreTasksStillRunning+0x5c>)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80036a4:	b21b      	sxth	r3, r3
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d101      	bne.n	80036ae <xAreSemaphoreTasksStillRunning+0x2a>
		{
			xReturn = pdFALSE;
 80036aa:	2300      	movs	r3, #0
 80036ac:	603b      	str	r3, [r7, #0]
		}

		sLastCheckVariables[ xTask ] = sCheckVariables[ xTask ];
 80036ae:	4a0c      	ldr	r2, [pc, #48]	; (80036e0 <xAreSemaphoreTasksStillRunning+0x5c>)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80036b6:	b219      	sxth	r1, r3
 80036b8:	4a08      	ldr	r2, [pc, #32]	; (80036dc <xAreSemaphoreTasksStillRunning+0x58>)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for( xTask = 0; xTask < semtstNUM_TASKS; xTask++ )
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	3301      	adds	r3, #1
 80036c4:	607b      	str	r3, [r7, #4]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2b03      	cmp	r3, #3
 80036ca:	dde3      	ble.n	8003694 <xAreSemaphoreTasksStillRunning+0x10>
	}

	return xReturn;
 80036cc:	683b      	ldr	r3, [r7, #0]
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	20000188 	.word	0x20000188
 80036e0:	2000017c 	.word	0x2000017c

080036e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f103 0208 	add.w	r2, r3, #8
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80036fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f103 0208 	add.w	r2, r3, #8
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f103 0208 	add.w	r2, r3, #8
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003718:	bf00      	nop
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003732:	bf00      	nop
 8003734:	370c      	adds	r7, #12
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr

0800373e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800373e:	b480      	push	{r7}
 8003740:	b085      	sub	sp, #20
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
 8003746:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	68fa      	ldr	r2, [r7, #12]
 8003752:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	689a      	ldr	r2, [r3, #8]
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	683a      	ldr	r2, [r7, #0]
 8003762:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	683a      	ldr	r2, [r7, #0]
 8003768:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	1c5a      	adds	r2, r3, #1
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	601a      	str	r2, [r3, #0]
}
 800377a:	bf00      	nop
 800377c:	3714      	adds	r7, #20
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr

08003786 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003786:	b480      	push	{r7}
 8003788:	b085      	sub	sp, #20
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
 800378e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800379c:	d103      	bne.n	80037a6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	60fb      	str	r3, [r7, #12]
 80037a4:	e00c      	b.n	80037c0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	3308      	adds	r3, #8
 80037aa:	60fb      	str	r3, [r7, #12]
 80037ac:	e002      	b.n	80037b4 <vListInsert+0x2e>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	60fb      	str	r3, [r7, #12]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d9f6      	bls.n	80037ae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	685a      	ldr	r2, [r3, #4]
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	683a      	ldr	r2, [r7, #0]
 80037ce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	683a      	ldr	r2, [r7, #0]
 80037da:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	1c5a      	adds	r2, r3, #1
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	601a      	str	r2, [r3, #0]
}
 80037ec:	bf00      	nop
 80037ee:	3714      	adds	r7, #20
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80037f8:	b480      	push	{r7}
 80037fa:	b085      	sub	sp, #20
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	6892      	ldr	r2, [r2, #8]
 800380e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	6852      	ldr	r2, [r2, #4]
 8003818:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	685a      	ldr	r2, [r3, #4]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	429a      	cmp	r2, r3
 8003822:	d103      	bne.n	800382c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689a      	ldr	r2, [r3, #8]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	1e5a      	subs	r2, r3, #1
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
}
 8003840:	4618      	mov	r0, r3
 8003842:	3714      	adds	r7, #20
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800384c:	b480      	push	{r7}
 800384e:	b085      	sub	sp, #20
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	3b04      	subs	r3, #4
 800385c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003864:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	3b04      	subs	r3, #4
 800386a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	f023 0201 	bic.w	r2, r3, #1
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	3b04      	subs	r3, #4
 800387a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800387c:	4a0c      	ldr	r2, [pc, #48]	; (80038b0 <pxPortInitialiseStack+0x64>)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	3b14      	subs	r3, #20
 8003886:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	3b04      	subs	r3, #4
 8003892:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f06f 0202 	mvn.w	r2, #2
 800389a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	3b20      	subs	r3, #32
 80038a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80038a2:	68fb      	ldr	r3, [r7, #12]
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3714      	adds	r7, #20
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr
 80038b0:	080038b5 	.word	0x080038b5

080038b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80038ba:	4b0c      	ldr	r3, [pc, #48]	; (80038ec <prvTaskExitError+0x38>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038c2:	d009      	beq.n	80038d8 <prvTaskExitError+0x24>
 80038c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c8:	f383 8811 	msr	BASEPRI, r3
 80038cc:	f3bf 8f6f 	isb	sy
 80038d0:	f3bf 8f4f 	dsb	sy
 80038d4:	607b      	str	r3, [r7, #4]
 80038d6:	e7fe      	b.n	80038d6 <prvTaskExitError+0x22>
 80038d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038dc:	f383 8811 	msr	BASEPRI, r3
 80038e0:	f3bf 8f6f 	isb	sy
 80038e4:	f3bf 8f4f 	dsb	sy
 80038e8:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 80038ea:	e7fe      	b.n	80038ea <prvTaskExitError+0x36>
 80038ec:	20000000 	.word	0x20000000

080038f0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80038f0:	4b07      	ldr	r3, [pc, #28]	; (8003910 <pxCurrentTCBConst2>)
 80038f2:	6819      	ldr	r1, [r3, #0]
 80038f4:	6808      	ldr	r0, [r1, #0]
 80038f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038fa:	f380 8809 	msr	PSP, r0
 80038fe:	f3bf 8f6f 	isb	sy
 8003902:	f04f 0000 	mov.w	r0, #0
 8003906:	f380 8811 	msr	BASEPRI, r0
 800390a:	4770      	bx	lr
 800390c:	f3af 8000 	nop.w

08003910 <pxCurrentTCBConst2>:
 8003910:	200141b0 	.word	0x200141b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003914:	bf00      	nop
 8003916:	bf00      	nop

08003918 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003918:	4806      	ldr	r0, [pc, #24]	; (8003934 <prvPortStartFirstTask+0x1c>)
 800391a:	6800      	ldr	r0, [r0, #0]
 800391c:	6800      	ldr	r0, [r0, #0]
 800391e:	f380 8808 	msr	MSP, r0
 8003922:	b662      	cpsie	i
 8003924:	b661      	cpsie	f
 8003926:	f3bf 8f4f 	dsb	sy
 800392a:	f3bf 8f6f 	isb	sy
 800392e:	df00      	svc	0
 8003930:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003932:	bf00      	nop
 8003934:	e000ed08 	.word	0xe000ed08

08003938 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b086      	sub	sp, #24
 800393c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800393e:	4b3b      	ldr	r3, [pc, #236]	; (8003a2c <xPortStartScheduler+0xf4>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a3b      	ldr	r2, [pc, #236]	; (8003a30 <xPortStartScheduler+0xf8>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d109      	bne.n	800395c <xPortStartScheduler+0x24>
 8003948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800394c:	f383 8811 	msr	BASEPRI, r3
 8003950:	f3bf 8f6f 	isb	sy
 8003954:	f3bf 8f4f 	dsb	sy
 8003958:	613b      	str	r3, [r7, #16]
 800395a:	e7fe      	b.n	800395a <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800395c:	4b33      	ldr	r3, [pc, #204]	; (8003a2c <xPortStartScheduler+0xf4>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a34      	ldr	r2, [pc, #208]	; (8003a34 <xPortStartScheduler+0xfc>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d109      	bne.n	800397a <xPortStartScheduler+0x42>
 8003966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800396a:	f383 8811 	msr	BASEPRI, r3
 800396e:	f3bf 8f6f 	isb	sy
 8003972:	f3bf 8f4f 	dsb	sy
 8003976:	60fb      	str	r3, [r7, #12]
 8003978:	e7fe      	b.n	8003978 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800397a:	4b2f      	ldr	r3, [pc, #188]	; (8003a38 <xPortStartScheduler+0x100>)
 800397c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	b2db      	uxtb	r3, r3
 8003984:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	22ff      	movs	r2, #255	; 0xff
 800398a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	b2db      	uxtb	r3, r3
 8003992:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003994:	79fb      	ldrb	r3, [r7, #7]
 8003996:	b2db      	uxtb	r3, r3
 8003998:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800399c:	b2da      	uxtb	r2, r3
 800399e:	4b27      	ldr	r3, [pc, #156]	; (8003a3c <xPortStartScheduler+0x104>)
 80039a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80039a2:	4b27      	ldr	r3, [pc, #156]	; (8003a40 <xPortStartScheduler+0x108>)
 80039a4:	2207      	movs	r2, #7
 80039a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80039a8:	e009      	b.n	80039be <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80039aa:	4b25      	ldr	r3, [pc, #148]	; (8003a40 <xPortStartScheduler+0x108>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	3b01      	subs	r3, #1
 80039b0:	4a23      	ldr	r2, [pc, #140]	; (8003a40 <xPortStartScheduler+0x108>)
 80039b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80039b4:	79fb      	ldrb	r3, [r7, #7]
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	005b      	lsls	r3, r3, #1
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80039be:	79fb      	ldrb	r3, [r7, #7]
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039c6:	2b80      	cmp	r3, #128	; 0x80
 80039c8:	d0ef      	beq.n	80039aa <xPortStartScheduler+0x72>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80039ca:	4b1d      	ldr	r3, [pc, #116]	; (8003a40 <xPortStartScheduler+0x108>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	021b      	lsls	r3, r3, #8
 80039d0:	4a1b      	ldr	r2, [pc, #108]	; (8003a40 <xPortStartScheduler+0x108>)
 80039d2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80039d4:	4b1a      	ldr	r3, [pc, #104]	; (8003a40 <xPortStartScheduler+0x108>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80039dc:	4a18      	ldr	r2, [pc, #96]	; (8003a40 <xPortStartScheduler+0x108>)
 80039de:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	b2da      	uxtb	r2, r3
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80039e8:	4a16      	ldr	r2, [pc, #88]	; (8003a44 <xPortStartScheduler+0x10c>)
 80039ea:	4b16      	ldr	r3, [pc, #88]	; (8003a44 <xPortStartScheduler+0x10c>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80039f2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80039f4:	4a13      	ldr	r2, [pc, #76]	; (8003a44 <xPortStartScheduler+0x10c>)
 80039f6:	4b13      	ldr	r3, [pc, #76]	; (8003a44 <xPortStartScheduler+0x10c>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80039fe:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003a00:	f000 f8d2 	bl	8003ba8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003a04:	4b10      	ldr	r3, [pc, #64]	; (8003a48 <xPortStartScheduler+0x110>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003a0a:	f000 f8e9 	bl	8003be0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003a0e:	4a0f      	ldr	r2, [pc, #60]	; (8003a4c <xPortStartScheduler+0x114>)
 8003a10:	4b0e      	ldr	r3, [pc, #56]	; (8003a4c <xPortStartScheduler+0x114>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003a18:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003a1a:	f7ff ff7d 	bl	8003918 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8003a1e:	f7ff ff49 	bl	80038b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003a22:	2300      	movs	r3, #0
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3718      	adds	r7, #24
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	e000ed00 	.word	0xe000ed00
 8003a30:	410fc271 	.word	0x410fc271
 8003a34:	410fc270 	.word	0x410fc270
 8003a38:	e000e400 	.word	0xe000e400
 8003a3c:	20000190 	.word	0x20000190
 8003a40:	20000194 	.word	0x20000194
 8003a44:	e000ed20 	.word	0xe000ed20
 8003a48:	20000000 	.word	0x20000000
 8003a4c:	e000ef34 	.word	0xe000ef34

08003a50 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a5a:	f383 8811 	msr	BASEPRI, r3
 8003a5e:	f3bf 8f6f 	isb	sy
 8003a62:	f3bf 8f4f 	dsb	sy
 8003a66:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003a68:	4b0e      	ldr	r3, [pc, #56]	; (8003aa4 <vPortEnterCritical+0x54>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	4a0d      	ldr	r2, [pc, #52]	; (8003aa4 <vPortEnterCritical+0x54>)
 8003a70:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003a72:	4b0c      	ldr	r3, [pc, #48]	; (8003aa4 <vPortEnterCritical+0x54>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d10e      	bne.n	8003a98 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003a7a:	4b0b      	ldr	r3, [pc, #44]	; (8003aa8 <vPortEnterCritical+0x58>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d009      	beq.n	8003a98 <vPortEnterCritical+0x48>
 8003a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a88:	f383 8811 	msr	BASEPRI, r3
 8003a8c:	f3bf 8f6f 	isb	sy
 8003a90:	f3bf 8f4f 	dsb	sy
 8003a94:	603b      	str	r3, [r7, #0]
 8003a96:	e7fe      	b.n	8003a96 <vPortEnterCritical+0x46>
	}
}
 8003a98:	bf00      	nop
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr
 8003aa4:	20000000 	.word	0x20000000
 8003aa8:	e000ed04 	.word	0xe000ed04

08003aac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003ab2:	4b11      	ldr	r3, [pc, #68]	; (8003af8 <vPortExitCritical+0x4c>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d109      	bne.n	8003ace <vPortExitCritical+0x22>
 8003aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003abe:	f383 8811 	msr	BASEPRI, r3
 8003ac2:	f3bf 8f6f 	isb	sy
 8003ac6:	f3bf 8f4f 	dsb	sy
 8003aca:	607b      	str	r3, [r7, #4]
 8003acc:	e7fe      	b.n	8003acc <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8003ace:	4b0a      	ldr	r3, [pc, #40]	; (8003af8 <vPortExitCritical+0x4c>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	4a08      	ldr	r2, [pc, #32]	; (8003af8 <vPortExitCritical+0x4c>)
 8003ad6:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003ad8:	4b07      	ldr	r3, [pc, #28]	; (8003af8 <vPortExitCritical+0x4c>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d104      	bne.n	8003aea <vPortExitCritical+0x3e>
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003aea:	bf00      	nop
 8003aec:	370c      	adds	r7, #12
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	20000000 	.word	0x20000000
 8003afc:	00000000 	.word	0x00000000

08003b00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003b00:	f3ef 8009 	mrs	r0, PSP
 8003b04:	f3bf 8f6f 	isb	sy
 8003b08:	4b15      	ldr	r3, [pc, #84]	; (8003b60 <pxCurrentTCBConst>)
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	f01e 0f10 	tst.w	lr, #16
 8003b10:	bf08      	it	eq
 8003b12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003b16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b1a:	6010      	str	r0, [r2, #0]
 8003b1c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8003b20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003b24:	f380 8811 	msr	BASEPRI, r0
 8003b28:	f3bf 8f4f 	dsb	sy
 8003b2c:	f3bf 8f6f 	isb	sy
 8003b30:	f002 fa1a 	bl	8005f68 <vTaskSwitchContext>
 8003b34:	f04f 0000 	mov.w	r0, #0
 8003b38:	f380 8811 	msr	BASEPRI, r0
 8003b3c:	bc08      	pop	{r3}
 8003b3e:	6819      	ldr	r1, [r3, #0]
 8003b40:	6808      	ldr	r0, [r1, #0]
 8003b42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b46:	f01e 0f10 	tst.w	lr, #16
 8003b4a:	bf08      	it	eq
 8003b4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003b50:	f380 8809 	msr	PSP, r0
 8003b54:	f3bf 8f6f 	isb	sy
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	f3af 8000 	nop.w

08003b60 <pxCurrentTCBConst>:
 8003b60:	200141b0 	.word	0x200141b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003b64:	bf00      	nop
 8003b66:	bf00      	nop

08003b68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
	__asm volatile
 8003b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b72:	f383 8811 	msr	BASEPRI, r3
 8003b76:	f3bf 8f6f 	isb	sy
 8003b7a:	f3bf 8f4f 	dsb	sy
 8003b7e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003b80:	f002 f90e 	bl	8005da0 <xTaskIncrementTick>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d003      	beq.n	8003b92 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003b8a:	4b06      	ldr	r3, [pc, #24]	; (8003ba4 <SysTick_Handler+0x3c>)
 8003b8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b90:	601a      	str	r2, [r3, #0]
 8003b92:	2300      	movs	r3, #0
 8003b94:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8003b9c:	bf00      	nop
 8003b9e:	3708      	adds	r7, #8
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	e000ed04 	.word	0xe000ed04

08003ba8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003ba8:	b480      	push	{r7}
 8003baa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003bac:	4a08      	ldr	r2, [pc, #32]	; (8003bd0 <vPortSetupTimerInterrupt+0x28>)
 8003bae:	4b09      	ldr	r3, [pc, #36]	; (8003bd4 <vPortSetupTimerInterrupt+0x2c>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4909      	ldr	r1, [pc, #36]	; (8003bd8 <vPortSetupTimerInterrupt+0x30>)
 8003bb4:	fba1 1303 	umull	r1, r3, r1, r3
 8003bb8:	099b      	lsrs	r3, r3, #6
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003bbe:	4b07      	ldr	r3, [pc, #28]	; (8003bdc <vPortSetupTimerInterrupt+0x34>)
 8003bc0:	2207      	movs	r2, #7
 8003bc2:	601a      	str	r2, [r3, #0]
}
 8003bc4:	bf00      	nop
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	e000e014 	.word	0xe000e014
 8003bd4:	20000024 	.word	0x20000024
 8003bd8:	10624dd3 	.word	0x10624dd3
 8003bdc:	e000e010 	.word	0xe000e010

08003be0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003be0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003bf0 <vPortEnableVFP+0x10>
 8003be4:	6801      	ldr	r1, [r0, #0]
 8003be6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003bea:	6001      	str	r1, [r0, #0]
 8003bec:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003bee:	bf00      	nop
 8003bf0:	e000ed88 	.word	0xe000ed88

08003bf4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b085      	sub	sp, #20
 8003bf8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8003bfa:	f3ef 8305 	mrs	r3, IPSR
 8003bfe:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2b0f      	cmp	r3, #15
 8003c04:	d913      	bls.n	8003c2e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003c06:	4a16      	ldr	r2, [pc, #88]	; (8003c60 <vPortValidateInterruptPriority+0x6c>)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003c10:	4b14      	ldr	r3, [pc, #80]	; (8003c64 <vPortValidateInterruptPriority+0x70>)
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	7afa      	ldrb	r2, [r7, #11]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d209      	bcs.n	8003c2e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8003c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c1e:	f383 8811 	msr	BASEPRI, r3
 8003c22:	f3bf 8f6f 	isb	sy
 8003c26:	f3bf 8f4f 	dsb	sy
 8003c2a:	607b      	str	r3, [r7, #4]
 8003c2c:	e7fe      	b.n	8003c2c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003c2e:	4b0e      	ldr	r3, [pc, #56]	; (8003c68 <vPortValidateInterruptPriority+0x74>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003c36:	4b0d      	ldr	r3, [pc, #52]	; (8003c6c <vPortValidateInterruptPriority+0x78>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d909      	bls.n	8003c52 <vPortValidateInterruptPriority+0x5e>
 8003c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c42:	f383 8811 	msr	BASEPRI, r3
 8003c46:	f3bf 8f6f 	isb	sy
 8003c4a:	f3bf 8f4f 	dsb	sy
 8003c4e:	603b      	str	r3, [r7, #0]
 8003c50:	e7fe      	b.n	8003c50 <vPortValidateInterruptPriority+0x5c>
	}
 8003c52:	bf00      	nop
 8003c54:	3714      	adds	r7, #20
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	e000e3f0 	.word	0xe000e3f0
 8003c64:	20000190 	.word	0x20000190
 8003c68:	e000ed0c 	.word	0xe000ed0c
 8003c6c:	20000194 	.word	0x20000194

08003c70 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b08a      	sub	sp, #40	; 0x28
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003c7c:	f001 ffc6 	bl	8005c0c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003c80:	4b5c      	ldr	r3, [pc, #368]	; (8003df4 <pvPortMalloc+0x184>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d101      	bne.n	8003c8c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003c88:	f000 f91e 	bl	8003ec8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003c8c:	4b5a      	ldr	r3, [pc, #360]	; (8003df8 <pvPortMalloc+0x188>)
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4013      	ands	r3, r2
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f040 808c 	bne.w	8003db2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d01c      	beq.n	8003cda <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8003ca0:	2208      	movs	r2, #8
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f003 0307 	and.w	r3, r3, #7
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d013      	beq.n	8003cda <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f023 0307 	bic.w	r3, r3, #7
 8003cb8:	3308      	adds	r3, #8
 8003cba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f003 0307 	and.w	r3, r3, #7
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d009      	beq.n	8003cda <pvPortMalloc+0x6a>
 8003cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cca:	f383 8811 	msr	BASEPRI, r3
 8003cce:	f3bf 8f6f 	isb	sy
 8003cd2:	f3bf 8f4f 	dsb	sy
 8003cd6:	617b      	str	r3, [r7, #20]
 8003cd8:	e7fe      	b.n	8003cd8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d068      	beq.n	8003db2 <pvPortMalloc+0x142>
 8003ce0:	4b46      	ldr	r3, [pc, #280]	; (8003dfc <pvPortMalloc+0x18c>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d863      	bhi.n	8003db2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003cea:	4b45      	ldr	r3, [pc, #276]	; (8003e00 <pvPortMalloc+0x190>)
 8003cec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003cee:	4b44      	ldr	r3, [pc, #272]	; (8003e00 <pvPortMalloc+0x190>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003cf4:	e004      	b.n	8003d00 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d02:	685a      	ldr	r2, [r3, #4]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d203      	bcs.n	8003d12 <pvPortMalloc+0xa2>
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1f1      	bne.n	8003cf6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003d12:	4b38      	ldr	r3, [pc, #224]	; (8003df4 <pvPortMalloc+0x184>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d04a      	beq.n	8003db2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003d1c:	6a3b      	ldr	r3, [r7, #32]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2208      	movs	r2, #8
 8003d22:	4413      	add	r3, r2
 8003d24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	6a3b      	ldr	r3, [r7, #32]
 8003d2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d30:	685a      	ldr	r2, [r3, #4]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	1ad2      	subs	r2, r2, r3
 8003d36:	2308      	movs	r3, #8
 8003d38:	005b      	lsls	r3, r3, #1
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d91e      	bls.n	8003d7c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003d3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4413      	add	r3, r2
 8003d44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	f003 0307 	and.w	r3, r3, #7
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d009      	beq.n	8003d64 <pvPortMalloc+0xf4>
 8003d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d54:	f383 8811 	msr	BASEPRI, r3
 8003d58:	f3bf 8f6f 	isb	sy
 8003d5c:	f3bf 8f4f 	dsb	sy
 8003d60:	613b      	str	r3, [r7, #16]
 8003d62:	e7fe      	b.n	8003d62 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d66:	685a      	ldr	r2, [r3, #4]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	1ad2      	subs	r2, r2, r3
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003d76:	69b8      	ldr	r0, [r7, #24]
 8003d78:	f000 f908 	bl	8003f8c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003d7c:	4b1f      	ldr	r3, [pc, #124]	; (8003dfc <pvPortMalloc+0x18c>)
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	4a1d      	ldr	r2, [pc, #116]	; (8003dfc <pvPortMalloc+0x18c>)
 8003d88:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003d8a:	4b1c      	ldr	r3, [pc, #112]	; (8003dfc <pvPortMalloc+0x18c>)
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	4b1d      	ldr	r3, [pc, #116]	; (8003e04 <pvPortMalloc+0x194>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d203      	bcs.n	8003d9e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003d96:	4b19      	ldr	r3, [pc, #100]	; (8003dfc <pvPortMalloc+0x18c>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a1a      	ldr	r2, [pc, #104]	; (8003e04 <pvPortMalloc+0x194>)
 8003d9c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da0:	685a      	ldr	r2, [r3, #4]
 8003da2:	4b15      	ldr	r3, [pc, #84]	; (8003df8 <pvPortMalloc+0x188>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	431a      	orrs	r2, r3
 8003da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003daa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dae:	2200      	movs	r2, #0
 8003db0:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	4619      	mov	r1, r3
 8003db8:	2038      	movs	r0, #56	; 0x38
 8003dba:	f004 f9ef 	bl	800819c <prvTraceStoreEvent2>
	}
	( void ) xTaskResumeAll();
 8003dbe:	f001 ff33 	bl	8005c28 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d101      	bne.n	8003dcc <pvPortMalloc+0x15c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8003dc8:	f005 f8a0 	bl	8008f0c <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	f003 0307 	and.w	r3, r3, #7
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d009      	beq.n	8003dea <pvPortMalloc+0x17a>
 8003dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dda:	f383 8811 	msr	BASEPRI, r3
 8003dde:	f3bf 8f6f 	isb	sy
 8003de2:	f3bf 8f4f 	dsb	sy
 8003de6:	60fb      	str	r3, [r7, #12]
 8003de8:	e7fe      	b.n	8003de8 <pvPortMalloc+0x178>
	return pvReturn;
 8003dea:	69fb      	ldr	r3, [r7, #28]
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3728      	adds	r7, #40	; 0x28
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	200141a0 	.word	0x200141a0
 8003df8:	200141ac 	.word	0x200141ac
 8003dfc:	200141a4 	.word	0x200141a4
 8003e00:	20014198 	.word	0x20014198
 8003e04:	200141a8 	.word	0x200141a8

08003e08 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b086      	sub	sp, #24
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d04e      	beq.n	8003eb8 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003e1a:	2308      	movs	r3, #8
 8003e1c:	425b      	negs	r3, r3
 8003e1e:	697a      	ldr	r2, [r7, #20]
 8003e20:	4413      	add	r3, r2
 8003e22:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	685a      	ldr	r2, [r3, #4]
 8003e2c:	4b24      	ldr	r3, [pc, #144]	; (8003ec0 <vPortFree+0xb8>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4013      	ands	r3, r2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d109      	bne.n	8003e4a <vPortFree+0x42>
 8003e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e3a:	f383 8811 	msr	BASEPRI, r3
 8003e3e:	f3bf 8f6f 	isb	sy
 8003e42:	f3bf 8f4f 	dsb	sy
 8003e46:	60fb      	str	r3, [r7, #12]
 8003e48:	e7fe      	b.n	8003e48 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d009      	beq.n	8003e66 <vPortFree+0x5e>
 8003e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e56:	f383 8811 	msr	BASEPRI, r3
 8003e5a:	f3bf 8f6f 	isb	sy
 8003e5e:	f3bf 8f4f 	dsb	sy
 8003e62:	60bb      	str	r3, [r7, #8]
 8003e64:	e7fe      	b.n	8003e64 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	685a      	ldr	r2, [r3, #4]
 8003e6a:	4b15      	ldr	r3, [pc, #84]	; (8003ec0 <vPortFree+0xb8>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4013      	ands	r3, r2
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d021      	beq.n	8003eb8 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d11d      	bne.n	8003eb8 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	685a      	ldr	r2, [r3, #4]
 8003e80:	4b0f      	ldr	r3, [pc, #60]	; (8003ec0 <vPortFree+0xb8>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	43db      	mvns	r3, r3
 8003e86:	401a      	ands	r2, r3
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003e8c:	f001 febe 	bl	8005c0c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	685a      	ldr	r2, [r3, #4]
 8003e94:	4b0b      	ldr	r3, [pc, #44]	; (8003ec4 <vPortFree+0xbc>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4413      	add	r3, r2
 8003e9a:	4a0a      	ldr	r2, [pc, #40]	; (8003ec4 <vPortFree+0xbc>)
 8003e9c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
 8003e9e:	6879      	ldr	r1, [r7, #4]
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	425b      	negs	r3, r3
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	2039      	movs	r0, #57	; 0x39
 8003eaa:	f004 f977 	bl	800819c <prvTraceStoreEvent2>
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003eae:	6938      	ldr	r0, [r7, #16]
 8003eb0:	f000 f86c 	bl	8003f8c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003eb4:	f001 feb8 	bl	8005c28 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003eb8:	bf00      	nop
 8003eba:	3718      	adds	r7, #24
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	200141ac 	.word	0x200141ac
 8003ec4:	200141a4 	.word	0x200141a4

08003ec8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003ece:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
 8003ed2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003ed4:	4b27      	ldr	r3, [pc, #156]	; (8003f74 <prvHeapInit+0xac>)
 8003ed6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f003 0307 	and.w	r3, r3, #7
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00c      	beq.n	8003efc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	3307      	adds	r3, #7
 8003ee6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f023 0307 	bic.w	r3, r3, #7
 8003eee:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003ef0:	68ba      	ldr	r2, [r7, #8]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	4a1f      	ldr	r2, [pc, #124]	; (8003f74 <prvHeapInit+0xac>)
 8003ef8:	4413      	add	r3, r2
 8003efa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003f00:	4a1d      	ldr	r2, [pc, #116]	; (8003f78 <prvHeapInit+0xb0>)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003f06:	4b1c      	ldr	r3, [pc, #112]	; (8003f78 <prvHeapInit+0xb0>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	4413      	add	r3, r2
 8003f12:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003f14:	2208      	movs	r2, #8
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	1a9b      	subs	r3, r3, r2
 8003f1a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f023 0307 	bic.w	r3, r3, #7
 8003f22:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	4a15      	ldr	r2, [pc, #84]	; (8003f7c <prvHeapInit+0xb4>)
 8003f28:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003f2a:	4b14      	ldr	r3, [pc, #80]	; (8003f7c <prvHeapInit+0xb4>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003f32:	4b12      	ldr	r3, [pc, #72]	; (8003f7c <prvHeapInit+0xb4>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2200      	movs	r2, #0
 8003f38:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	68fa      	ldr	r2, [r7, #12]
 8003f42:	1ad2      	subs	r2, r2, r3
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003f48:	4b0c      	ldr	r3, [pc, #48]	; (8003f7c <prvHeapInit+0xb4>)
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	4a0a      	ldr	r2, [pc, #40]	; (8003f80 <prvHeapInit+0xb8>)
 8003f56:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	4a09      	ldr	r2, [pc, #36]	; (8003f84 <prvHeapInit+0xbc>)
 8003f5e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003f60:	4b09      	ldr	r3, [pc, #36]	; (8003f88 <prvHeapInit+0xc0>)
 8003f62:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003f66:	601a      	str	r2, [r3, #0]
}
 8003f68:	bf00      	nop
 8003f6a:	3714      	adds	r7, #20
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr
 8003f74:	20000198 	.word	0x20000198
 8003f78:	20014198 	.word	0x20014198
 8003f7c:	200141a0 	.word	0x200141a0
 8003f80:	200141a8 	.word	0x200141a8
 8003f84:	200141a4 	.word	0x200141a4
 8003f88:	200141ac 	.word	0x200141ac

08003f8c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b085      	sub	sp, #20
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003f94:	4b28      	ldr	r3, [pc, #160]	; (8004038 <prvInsertBlockIntoFreeList+0xac>)
 8003f96:	60fb      	str	r3, [r7, #12]
 8003f98:	e002      	b.n	8003fa0 <prvInsertBlockIntoFreeList+0x14>
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	60fb      	str	r3, [r7, #12]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d3f7      	bcc.n	8003f9a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	68ba      	ldr	r2, [r7, #8]
 8003fb4:	441a      	add	r2, r3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d108      	bne.n	8003fce <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	685a      	ldr	r2, [r3, #4]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	441a      	add	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	68ba      	ldr	r2, [r7, #8]
 8003fd8:	441a      	add	r2, r3
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d118      	bne.n	8004014 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	4b15      	ldr	r3, [pc, #84]	; (800403c <prvInsertBlockIntoFreeList+0xb0>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d00d      	beq.n	800400a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685a      	ldr	r2, [r3, #4]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	441a      	add	r2, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	601a      	str	r2, [r3, #0]
 8004008:	e008      	b.n	800401c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800400a:	4b0c      	ldr	r3, [pc, #48]	; (800403c <prvInsertBlockIntoFreeList+0xb0>)
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	601a      	str	r2, [r3, #0]
 8004012:	e003      	b.n	800401c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	429a      	cmp	r2, r3
 8004022:	d002      	beq.n	800402a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800402a:	bf00      	nop
 800402c:	3714      	adds	r7, #20
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop
 8004038:	20014198 	.word	0x20014198
 800403c:	200141a0 	.word	0x200141a0

08004040 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d109      	bne.n	8004068 <xQueueGenericReset+0x28>
 8004054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004058:	f383 8811 	msr	BASEPRI, r3
 800405c:	f3bf 8f6f 	isb	sy
 8004060:	f3bf 8f4f 	dsb	sy
 8004064:	60bb      	str	r3, [r7, #8]
 8004066:	e7fe      	b.n	8004066 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004068:	f7ff fcf2 	bl	8003a50 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004074:	68f9      	ldr	r1, [r7, #12]
 8004076:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004078:	fb01 f303 	mul.w	r3, r1, r3
 800407c:	441a      	add	r2, r3
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004098:	3b01      	subs	r3, #1
 800409a:	68f9      	ldr	r1, [r7, #12]
 800409c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800409e:	fb01 f303 	mul.w	r3, r1, r3
 80040a2:	441a      	add	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	22ff      	movs	r2, #255	; 0xff
 80040ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	22ff      	movs	r2, #255	; 0xff
 80040b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d114      	bne.n	80040e8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d01a      	beq.n	80040fc <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	3310      	adds	r3, #16
 80040ca:	4618      	mov	r0, r3
 80040cc:	f002 f836 	bl	800613c <xTaskRemoveFromEventList>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d012      	beq.n	80040fc <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80040d6:	4b0d      	ldr	r3, [pc, #52]	; (800410c <xQueueGenericReset+0xcc>)
 80040d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040dc:	601a      	str	r2, [r3, #0]
 80040de:	f3bf 8f4f 	dsb	sy
 80040e2:	f3bf 8f6f 	isb	sy
 80040e6:	e009      	b.n	80040fc <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	3310      	adds	r3, #16
 80040ec:	4618      	mov	r0, r3
 80040ee:	f7ff faf9 	bl	80036e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	3324      	adds	r3, #36	; 0x24
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7ff faf4 	bl	80036e4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80040fc:	f7ff fcd6 	bl	8003aac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004100:	2301      	movs	r3, #1
}
 8004102:	4618      	mov	r0, r3
 8004104:	3710      	adds	r7, #16
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	e000ed04 	.word	0xe000ed04

08004110 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004110:	b580      	push	{r7, lr}
 8004112:	b08a      	sub	sp, #40	; 0x28
 8004114:	af02      	add	r7, sp, #8
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	4613      	mov	r3, r2
 800411c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d109      	bne.n	8004138 <xQueueGenericCreate+0x28>
 8004124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004128:	f383 8811 	msr	BASEPRI, r3
 800412c:	f3bf 8f6f 	isb	sy
 8004130:	f3bf 8f4f 	dsb	sy
 8004134:	613b      	str	r3, [r7, #16]
 8004136:	e7fe      	b.n	8004136 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d102      	bne.n	8004144 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800413e:	2300      	movs	r3, #0
 8004140:	61fb      	str	r3, [r7, #28]
 8004142:	e004      	b.n	800414e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	68ba      	ldr	r2, [r7, #8]
 8004148:	fb02 f303 	mul.w	r3, r2, r3
 800414c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	3350      	adds	r3, #80	; 0x50
 8004152:	4618      	mov	r0, r3
 8004154:	f7ff fd8c 	bl	8003c70 <pvPortMalloc>
 8004158:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d00b      	beq.n	8004178 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	3350      	adds	r3, #80	; 0x50
 8004164:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004166:	79fa      	ldrb	r2, [r7, #7]
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	9300      	str	r3, [sp, #0]
 800416c:	4613      	mov	r3, r2
 800416e:	697a      	ldr	r2, [r7, #20]
 8004170:	68b9      	ldr	r1, [r7, #8]
 8004172:	68f8      	ldr	r0, [r7, #12]
 8004174:	f000 f805 	bl	8004182 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 8004178:	69bb      	ldr	r3, [r7, #24]
	}
 800417a:	4618      	mov	r0, r3
 800417c:	3720      	adds	r7, #32
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}

08004182 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004182:	b580      	push	{r7, lr}
 8004184:	b084      	sub	sp, #16
 8004186:	af00      	add	r7, sp, #0
 8004188:	60f8      	str	r0, [r7, #12]
 800418a:	60b9      	str	r1, [r7, #8]
 800418c:	607a      	str	r2, [r7, #4]
 800418e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d103      	bne.n	800419e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	69ba      	ldr	r2, [r7, #24]
 800419a:	601a      	str	r2, [r3, #0]
 800419c:	e002      	b.n	80041a4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	68ba      	ldr	r2, [r7, #8]
 80041ae:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80041b0:	2101      	movs	r1, #1
 80041b2:	69b8      	ldr	r0, [r7, #24]
 80041b4:	f7ff ff44 	bl	8004040 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	78fa      	ldrb	r2, [r7, #3]
 80041bc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d002      	beq.n	80041d0 <prvInitialiseNewQueue+0x4e>
 80041ca:	2b03      	cmp	r3, #3
 80041cc:	d008      	beq.n	80041e0 <prvInitialiseNewQueue+0x5e>
}
 80041ce:	e00d      	b.n	80041ec <prvInitialiseNewQueue+0x6a>
	traceQUEUE_CREATE( pxNewQueue );
 80041d0:	69b9      	ldr	r1, [r7, #24]
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041d6:	461a      	mov	r2, r3
 80041d8:	2011      	movs	r0, #17
 80041da:	f003 ffdf 	bl	800819c <prvTraceStoreEvent2>
 80041de:	e004      	b.n	80041ea <prvInitialiseNewQueue+0x68>
 80041e0:	69bb      	ldr	r3, [r7, #24]
 80041e2:	4619      	mov	r1, r3
 80041e4:	2012      	movs	r0, #18
 80041e6:	f003 ff8d 	bl	8008104 <prvTraceStoreEvent1>
 80041ea:	bf00      	nop
}
 80041ec:	bf00      	nop
 80041ee:	3710      	adds	r7, #16
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d023      	beq.n	800424a <prvInitialiseMutex+0x56>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800421a:	2b01      	cmp	r3, #1
 800421c:	d002      	beq.n	8004224 <prvInitialiseMutex+0x30>
 800421e:	2b04      	cmp	r3, #4
 8004220:	d006      	beq.n	8004230 <prvInitialiseMutex+0x3c>
 8004222:	e00b      	b.n	800423c <prvInitialiseMutex+0x48>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4619      	mov	r1, r3
 8004228:	2013      	movs	r0, #19
 800422a:	f003 ff6b 	bl	8008104 <prvTraceStoreEvent1>
 800422e:	e004      	b.n	800423a <prvInitialiseMutex+0x46>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4619      	mov	r1, r3
 8004234:	2017      	movs	r0, #23
 8004236:	f003 ff65 	bl	8008104 <prvTraceStoreEvent1>
 800423a:	bf00      	nop

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800423c:	2300      	movs	r3, #0
 800423e:	2200      	movs	r2, #0
 8004240:	2100      	movs	r1, #0
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 f8de 	bl	8004404 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004248:	e002      	b.n	8004250 <prvInitialiseMutex+0x5c>
			traceCREATE_MUTEX_FAILED();
 800424a:	2043      	movs	r0, #67	; 0x43
 800424c:	f003 ff16 	bl	800807c <prvTraceStoreEvent0>
	}
 8004250:	bf00      	nop
 8004252:	3708      	adds	r7, #8
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004258:	b580      	push	{r7, lr}
 800425a:	b086      	sub	sp, #24
 800425c:	af00      	add	r7, sp, #0
 800425e:	4603      	mov	r3, r0
 8004260:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004262:	2301      	movs	r3, #1
 8004264:	617b      	str	r3, [r7, #20]
 8004266:	2300      	movs	r3, #0
 8004268:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800426a:	79fb      	ldrb	r3, [r7, #7]
 800426c:	461a      	mov	r2, r3
 800426e:	6939      	ldr	r1, [r7, #16]
 8004270:	6978      	ldr	r0, [r7, #20]
 8004272:	f7ff ff4d 	bl	8004110 <xQueueGenericCreate>
 8004276:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8004278:	68f8      	ldr	r0, [r7, #12]
 800427a:	f7ff ffbb 	bl	80041f4 <prvInitialiseMutex>

		return pxNewQueue;
 800427e:	68fb      	ldr	r3, [r7, #12]
	}
 8004280:	4618      	mov	r0, r3
 8004282:	3718      	adds	r7, #24
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8004288:	b590      	push	{r4, r7, lr}
 800428a:	b087      	sub	sp, #28
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d109      	bne.n	80042ae <xQueueGiveMutexRecursive+0x26>
 800429a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800429e:	f383 8811 	msr	BASEPRI, r3
 80042a2:	f3bf 8f6f 	isb	sy
 80042a6:	f3bf 8f4f 	dsb	sy
 80042aa:	60fb      	str	r3, [r7, #12]
 80042ac:	e7fe      	b.n	80042ac <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	685c      	ldr	r4, [r3, #4]
 80042b2:	f002 f903 	bl	80064bc <xTaskGetCurrentTaskHandle>
 80042b6:	4603      	mov	r3, r0
 80042b8:	429c      	cmp	r4, r3
 80042ba:	d116      	bne.n	80042ea <xQueueGiveMutexRecursive+0x62>
		{
			traceGIVE_MUTEX_RECURSIVE( pxMutex );
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	4619      	mov	r1, r3
 80042c0:	20c5      	movs	r0, #197	; 0xc5
 80042c2:	f003 ff1f 	bl	8008104 <prvTraceStoreEvent1>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	1e5a      	subs	r2, r3, #1
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d105      	bne.n	80042e4 <xQueueGiveMutexRecursive+0x5c>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80042d8:	2300      	movs	r3, #0
 80042da:	2200      	movs	r2, #0
 80042dc:	2100      	movs	r1, #0
 80042de:	6938      	ldr	r0, [r7, #16]
 80042e0:	f000 f890 	bl	8004404 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80042e4:	2301      	movs	r3, #1
 80042e6:	617b      	str	r3, [r7, #20]
 80042e8:	e006      	b.n	80042f8 <xQueueGiveMutexRecursive+0x70>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80042ea:	2300      	movs	r3, #0
 80042ec:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	4619      	mov	r1, r3
 80042f2:	20c6      	movs	r0, #198	; 0xc6
 80042f4:	f003 ff06 	bl	8008104 <prvTraceStoreEvent1>
		}

		return xReturn;
 80042f8:	697b      	ldr	r3, [r7, #20]
	}
 80042fa:	4618      	mov	r0, r3
 80042fc:	371c      	adds	r7, #28
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd90      	pop	{r4, r7, pc}

08004302 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8004302:	b590      	push	{r4, r7, lr}
 8004304:	b087      	sub	sp, #28
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
 800430a:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d109      	bne.n	800432a <xQueueTakeMutexRecursive+0x28>
 8004316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800431a:	f383 8811 	msr	BASEPRI, r3
 800431e:	f3bf 8f6f 	isb	sy
 8004322:	f3bf 8f4f 	dsb	sy
 8004326:	60fb      	str	r3, [r7, #12]
 8004328:	e7fe      	b.n	8004328 <xQueueTakeMutexRecursive+0x26>

		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	683a      	ldr	r2, [r7, #0]
 800432e:	4619      	mov	r1, r3
 8004330:	20c7      	movs	r0, #199	; 0xc7
 8004332:	f003 ff33 	bl	800819c <prvTraceStoreEvent2>

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	685c      	ldr	r4, [r3, #4]
 800433a:	f002 f8bf 	bl	80064bc <xTaskGetCurrentTaskHandle>
 800433e:	4603      	mov	r3, r0
 8004340:	429c      	cmp	r4, r3
 8004342:	d107      	bne.n	8004354 <xQueueTakeMutexRecursive+0x52>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	1c5a      	adds	r2, r3, #1
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800434e:	2301      	movs	r3, #1
 8004350:	617b      	str	r3, [r7, #20]
 8004352:	e015      	b.n	8004380 <xQueueTakeMutexRecursive+0x7e>
		}
		else
		{
			xReturn = xQueueGenericReceive( pxMutex, NULL, xTicksToWait, pdFALSE );
 8004354:	2300      	movs	r3, #0
 8004356:	683a      	ldr	r2, [r7, #0]
 8004358:	2100      	movs	r1, #0
 800435a:	6938      	ldr	r0, [r7, #16]
 800435c:	f000 fbb6 	bl	8004acc <xQueueGenericReceive>
 8004360:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d005      	beq.n	8004374 <xQueueTakeMutexRecursive+0x72>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	1c5a      	adds	r2, r3, #1
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	60da      	str	r2, [r3, #12]
 8004372:	e005      	b.n	8004380 <xQueueTakeMutexRecursive+0x7e>
			}
			else
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	683a      	ldr	r2, [r7, #0]
 8004378:	4619      	mov	r1, r3
 800437a:	20c8      	movs	r0, #200	; 0xc8
 800437c:	f003 ff0e 	bl	800819c <prvTraceStoreEvent2>
			}
		}

		return xReturn;
 8004380:	697b      	ldr	r3, [r7, #20]
	}
 8004382:	4618      	mov	r0, r3
 8004384:	371c      	adds	r7, #28
 8004386:	46bd      	mov	sp, r7
 8004388:	bd90      	pop	{r4, r7, pc}

0800438a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800438a:	b580      	push	{r7, lr}
 800438c:	b086      	sub	sp, #24
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
 8004392:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d109      	bne.n	80043ae <xQueueCreateCountingSemaphore+0x24>
 800439a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800439e:	f383 8811 	msr	BASEPRI, r3
 80043a2:	f3bf 8f6f 	isb	sy
 80043a6:	f3bf 8f4f 	dsb	sy
 80043aa:	613b      	str	r3, [r7, #16]
 80043ac:	e7fe      	b.n	80043ac <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 80043ae:	683a      	ldr	r2, [r7, #0]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d909      	bls.n	80043ca <xQueueCreateCountingSemaphore+0x40>
 80043b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ba:	f383 8811 	msr	BASEPRI, r3
 80043be:	f3bf 8f6f 	isb	sy
 80043c2:	f3bf 8f4f 	dsb	sy
 80043c6:	60fb      	str	r3, [r7, #12]
 80043c8:	e7fe      	b.n	80043c8 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80043ca:	2202      	movs	r2, #2
 80043cc:	2100      	movs	r1, #0
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f7ff fe9e 	bl	8004110 <xQueueGenericCreate>
 80043d4:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d00a      	beq.n	80043f2 <xQueueCreateCountingSemaphore+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	683a      	ldr	r2, [r7, #0]
 80043e0:	639a      	str	r2, [r3, #56]	; 0x38

			traceCREATE_COUNTING_SEMAPHORE();
 80043e2:	6979      	ldr	r1, [r7, #20]
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e8:	461a      	mov	r2, r3
 80043ea:	2016      	movs	r0, #22
 80043ec:	f003 fed6 	bl	800819c <prvTraceStoreEvent2>
 80043f0:	e002      	b.n	80043f8 <xQueueCreateCountingSemaphore+0x6e>
		}
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 80043f2:	2046      	movs	r0, #70	; 0x46
 80043f4:	f003 fe42 	bl	800807c <prvTraceStoreEvent0>
		}

		return xHandle;
 80043f8:	697b      	ldr	r3, [r7, #20]
	}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3718      	adds	r7, #24
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
	...

08004404 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b08e      	sub	sp, #56	; 0x38
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	607a      	str	r2, [r7, #4]
 8004410:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004412:	2300      	movs	r3, #0
 8004414:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800441a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800441c:	2b00      	cmp	r3, #0
 800441e:	d109      	bne.n	8004434 <xQueueGenericSend+0x30>
 8004420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004424:	f383 8811 	msr	BASEPRI, r3
 8004428:	f3bf 8f6f 	isb	sy
 800442c:	f3bf 8f4f 	dsb	sy
 8004430:	62bb      	str	r3, [r7, #40]	; 0x28
 8004432:	e7fe      	b.n	8004432 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d103      	bne.n	8004442 <xQueueGenericSend+0x3e>
 800443a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800443c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443e:	2b00      	cmp	r3, #0
 8004440:	d101      	bne.n	8004446 <xQueueGenericSend+0x42>
 8004442:	2301      	movs	r3, #1
 8004444:	e000      	b.n	8004448 <xQueueGenericSend+0x44>
 8004446:	2300      	movs	r3, #0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d109      	bne.n	8004460 <xQueueGenericSend+0x5c>
 800444c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004450:	f383 8811 	msr	BASEPRI, r3
 8004454:	f3bf 8f6f 	isb	sy
 8004458:	f3bf 8f4f 	dsb	sy
 800445c:	627b      	str	r3, [r7, #36]	; 0x24
 800445e:	e7fe      	b.n	800445e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	2b02      	cmp	r3, #2
 8004464:	d103      	bne.n	800446e <xQueueGenericSend+0x6a>
 8004466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800446a:	2b01      	cmp	r3, #1
 800446c:	d101      	bne.n	8004472 <xQueueGenericSend+0x6e>
 800446e:	2301      	movs	r3, #1
 8004470:	e000      	b.n	8004474 <xQueueGenericSend+0x70>
 8004472:	2300      	movs	r3, #0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d109      	bne.n	800448c <xQueueGenericSend+0x88>
 8004478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800447c:	f383 8811 	msr	BASEPRI, r3
 8004480:	f3bf 8f6f 	isb	sy
 8004484:	f3bf 8f4f 	dsb	sy
 8004488:	623b      	str	r3, [r7, #32]
 800448a:	e7fe      	b.n	800448a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800448c:	f002 f826 	bl	80064dc <xTaskGetSchedulerState>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d102      	bne.n	800449c <xQueueGenericSend+0x98>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d101      	bne.n	80044a0 <xQueueGenericSend+0x9c>
 800449c:	2301      	movs	r3, #1
 800449e:	e000      	b.n	80044a2 <xQueueGenericSend+0x9e>
 80044a0:	2300      	movs	r3, #0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d109      	bne.n	80044ba <xQueueGenericSend+0xb6>
 80044a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044aa:	f383 8811 	msr	BASEPRI, r3
 80044ae:	f3bf 8f6f 	isb	sy
 80044b2:	f3bf 8f4f 	dsb	sy
 80044b6:	61fb      	str	r3, [r7, #28]
 80044b8:	e7fe      	b.n	80044b8 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80044ba:	f7ff fac9 	bl	8003a50 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80044be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d302      	bcc.n	80044d0 <xQueueGenericSend+0xcc>
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d158      	bne.n	8004582 <xQueueGenericSend+0x17e>
			{
				traceQUEUE_SEND( pxQueue );
 80044d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80044d6:	2b04      	cmp	r3, #4
 80044d8:	d829      	bhi.n	800452e <xQueueGenericSend+0x12a>
 80044da:	a201      	add	r2, pc, #4	; (adr r2, 80044e0 <xQueueGenericSend+0xdc>)
 80044dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044e0:	080044f5 	.word	0x080044f5
 80044e4:	08004523 	.word	0x08004523
 80044e8:	08004511 	.word	0x08004511
 80044ec:	08004511 	.word	0x08004511
 80044f0:	08004523 	.word	0x08004523
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d101      	bne.n	80044fe <xQueueGenericSend+0xfa>
 80044fa:	2050      	movs	r0, #80	; 0x50
 80044fc:	e000      	b.n	8004500 <xQueueGenericSend+0xfc>
 80044fe:	20c0      	movs	r0, #192	; 0xc0
 8004500:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004506:	3301      	adds	r3, #1
 8004508:	461a      	mov	r2, r3
 800450a:	f003 fe47 	bl	800819c <prvTraceStoreEvent2>
 800450e:	e00d      	b.n	800452c <xQueueGenericSend+0x128>
 8004510:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004516:	3301      	adds	r3, #1
 8004518:	461a      	mov	r2, r3
 800451a:	2051      	movs	r0, #81	; 0x51
 800451c:	f003 fe3e 	bl	800819c <prvTraceStoreEvent2>
 8004520:	e004      	b.n	800452c <xQueueGenericSend+0x128>
 8004522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004524:	4619      	mov	r1, r3
 8004526:	2052      	movs	r0, #82	; 0x52
 8004528:	f003 fdec 	bl	8008104 <prvTraceStoreEvent1>
 800452c:	bf00      	nop
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800452e:	683a      	ldr	r2, [r7, #0]
 8004530:	68b9      	ldr	r1, [r7, #8]
 8004532:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004534:	f000 fcf7 	bl	8004f26 <prvCopyDataToQueue>
 8004538:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800453a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800453c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453e:	2b00      	cmp	r3, #0
 8004540:	d010      	beq.n	8004564 <xQueueGenericSend+0x160>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004544:	3324      	adds	r3, #36	; 0x24
 8004546:	4618      	mov	r0, r3
 8004548:	f001 fdf8 	bl	800613c <xTaskRemoveFromEventList>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d013      	beq.n	800457a <xQueueGenericSend+0x176>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004552:	4b84      	ldr	r3, [pc, #528]	; (8004764 <xQueueGenericSend+0x360>)
 8004554:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004558:	601a      	str	r2, [r3, #0]
 800455a:	f3bf 8f4f 	dsb	sy
 800455e:	f3bf 8f6f 	isb	sy
 8004562:	e00a      	b.n	800457a <xQueueGenericSend+0x176>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004566:	2b00      	cmp	r3, #0
 8004568:	d007      	beq.n	800457a <xQueueGenericSend+0x176>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800456a:	4b7e      	ldr	r3, [pc, #504]	; (8004764 <xQueueGenericSend+0x360>)
 800456c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004570:	601a      	str	r2, [r3, #0]
 8004572:	f3bf 8f4f 	dsb	sy
 8004576:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800457a:	f7ff fa97 	bl	8003aac <vPortExitCritical>
				return pdPASS;
 800457e:	2301      	movs	r3, #1
 8004580:	e0ec      	b.n	800475c <xQueueGenericSend+0x358>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d130      	bne.n	80045ea <xQueueGenericSend+0x1e6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004588:	f7ff fa90 	bl	8003aac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 800458c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800458e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004592:	2b04      	cmp	r3, #4
 8004594:	d827      	bhi.n	80045e6 <xQueueGenericSend+0x1e2>
 8004596:	a201      	add	r2, pc, #4	; (adr r2, 800459c <xQueueGenericSend+0x198>)
 8004598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800459c:	080045b1 	.word	0x080045b1
 80045a0:	080045db 	.word	0x080045db
 80045a4:	080045cb 	.word	0x080045cb
 80045a8:	080045cb 	.word	0x080045cb
 80045ac:	080045db 	.word	0x080045db
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d101      	bne.n	80045ba <xQueueGenericSend+0x1b6>
 80045b6:	2053      	movs	r0, #83	; 0x53
 80045b8:	e000      	b.n	80045bc <xQueueGenericSend+0x1b8>
 80045ba:	20c1      	movs	r0, #193	; 0xc1
 80045bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80045be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c2:	461a      	mov	r2, r3
 80045c4:	f003 fdea 	bl	800819c <prvTraceStoreEvent2>
 80045c8:	e00c      	b.n	80045e4 <xQueueGenericSend+0x1e0>
 80045ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80045cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d0:	461a      	mov	r2, r3
 80045d2:	2054      	movs	r0, #84	; 0x54
 80045d4:	f003 fde2 	bl	800819c <prvTraceStoreEvent2>
 80045d8:	e004      	b.n	80045e4 <xQueueGenericSend+0x1e0>
 80045da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045dc:	4619      	mov	r1, r3
 80045de:	2055      	movs	r0, #85	; 0x55
 80045e0:	f003 fd90 	bl	8008104 <prvTraceStoreEvent1>
 80045e4:	bf00      	nop
					return errQUEUE_FULL;
 80045e6:	2300      	movs	r3, #0
 80045e8:	e0b8      	b.n	800475c <xQueueGenericSend+0x358>
				}
				else if( xEntryTimeSet == pdFALSE )
 80045ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d106      	bne.n	80045fe <xQueueGenericSend+0x1fa>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 80045f0:	f107 0314 	add.w	r3, r7, #20
 80045f4:	4618      	mov	r0, r3
 80045f6:	f001 fe07 	bl	8006208 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80045fa:	2301      	movs	r3, #1
 80045fc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80045fe:	f7ff fa55 	bl	8003aac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004602:	f001 fb03 	bl	8005c0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004606:	f7ff fa23 	bl	8003a50 <vPortEnterCritical>
 800460a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800460c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004610:	b25b      	sxtb	r3, r3
 8004612:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004616:	d103      	bne.n	8004620 <xQueueGenericSend+0x21c>
 8004618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461a:	2200      	movs	r2, #0
 800461c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004622:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004626:	b25b      	sxtb	r3, r3
 8004628:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800462c:	d103      	bne.n	8004636 <xQueueGenericSend+0x232>
 800462e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004630:	2200      	movs	r2, #0
 8004632:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004636:	f7ff fa39 	bl	8003aac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800463a:	1d3a      	adds	r2, r7, #4
 800463c:	f107 0314 	add.w	r3, r7, #20
 8004640:	4611      	mov	r1, r2
 8004642:	4618      	mov	r0, r3
 8004644:	f001 fe04 	bl	8006250 <xTaskCheckForTimeOut>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d152      	bne.n	80046f4 <xQueueGenericSend+0x2f0>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800464e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004650:	f000 fd61 	bl	8005116 <prvIsQueueFull>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d046      	beq.n	80046e8 <xQueueGenericSend+0x2e4>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 800465a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800465c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004660:	2b04      	cmp	r3, #4
 8004662:	d828      	bhi.n	80046b6 <xQueueGenericSend+0x2b2>
 8004664:	a201      	add	r2, pc, #4	; (adr r2, 800466c <xQueueGenericSend+0x268>)
 8004666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800466a:	bf00      	nop
 800466c:	08004681 	.word	0x08004681
 8004670:	080046ab 	.word	0x080046ab
 8004674:	0800469b 	.word	0x0800469b
 8004678:	0800469b 	.word	0x0800469b
 800467c:	080046ab 	.word	0x080046ab
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d101      	bne.n	800468a <xQueueGenericSend+0x286>
 8004686:	2056      	movs	r0, #86	; 0x56
 8004688:	e000      	b.n	800468c <xQueueGenericSend+0x288>
 800468a:	20c2      	movs	r0, #194	; 0xc2
 800468c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800468e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004692:	461a      	mov	r2, r3
 8004694:	f003 fd82 	bl	800819c <prvTraceStoreEvent2>
 8004698:	e00c      	b.n	80046b4 <xQueueGenericSend+0x2b0>
 800469a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800469c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800469e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a0:	461a      	mov	r2, r3
 80046a2:	2057      	movs	r0, #87	; 0x57
 80046a4:	f003 fd7a 	bl	800819c <prvTraceStoreEvent2>
 80046a8:	e004      	b.n	80046b4 <xQueueGenericSend+0x2b0>
 80046aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ac:	4619      	mov	r1, r3
 80046ae:	2058      	movs	r0, #88	; 0x58
 80046b0:	f003 fd28 	bl	8008104 <prvTraceStoreEvent1>
 80046b4:	bf00      	nop
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80046b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b8:	3310      	adds	r3, #16
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	4611      	mov	r1, r2
 80046be:	4618      	mov	r0, r3
 80046c0:	f001 fce4 	bl	800608c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80046c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046c6:	f000 fcbe 	bl	8005046 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80046ca:	f001 faad 	bl	8005c28 <xTaskResumeAll>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	f47f aef2 	bne.w	80044ba <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80046d6:	4b23      	ldr	r3, [pc, #140]	; (8004764 <xQueueGenericSend+0x360>)
 80046d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046dc:	601a      	str	r2, [r3, #0]
 80046de:	f3bf 8f4f 	dsb	sy
 80046e2:	f3bf 8f6f 	isb	sy
 80046e6:	e6e8      	b.n	80044ba <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80046e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046ea:	f000 fcac 	bl	8005046 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80046ee:	f001 fa9b 	bl	8005c28 <xTaskResumeAll>
 80046f2:	e6e2      	b.n	80044ba <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80046f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046f6:	f000 fca6 	bl	8005046 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80046fa:	f001 fa95 	bl	8005c28 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 80046fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004700:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004704:	2b04      	cmp	r3, #4
 8004706:	d828      	bhi.n	800475a <xQueueGenericSend+0x356>
 8004708:	a201      	add	r2, pc, #4	; (adr r2, 8004710 <xQueueGenericSend+0x30c>)
 800470a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800470e:	bf00      	nop
 8004710:	08004725 	.word	0x08004725
 8004714:	0800474f 	.word	0x0800474f
 8004718:	0800473f 	.word	0x0800473f
 800471c:	0800473f 	.word	0x0800473f
 8004720:	0800474f 	.word	0x0800474f
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d101      	bne.n	800472e <xQueueGenericSend+0x32a>
 800472a:	2053      	movs	r0, #83	; 0x53
 800472c:	e000      	b.n	8004730 <xQueueGenericSend+0x32c>
 800472e:	20c1      	movs	r0, #193	; 0xc1
 8004730:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004736:	461a      	mov	r2, r3
 8004738:	f003 fd30 	bl	800819c <prvTraceStoreEvent2>
 800473c:	e00c      	b.n	8004758 <xQueueGenericSend+0x354>
 800473e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004744:	461a      	mov	r2, r3
 8004746:	2054      	movs	r0, #84	; 0x54
 8004748:	f003 fd28 	bl	800819c <prvTraceStoreEvent2>
 800474c:	e004      	b.n	8004758 <xQueueGenericSend+0x354>
 800474e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004750:	4619      	mov	r1, r3
 8004752:	2055      	movs	r0, #85	; 0x55
 8004754:	f003 fcd6 	bl	8008104 <prvTraceStoreEvent1>
 8004758:	bf00      	nop
			return errQUEUE_FULL;
 800475a:	2300      	movs	r3, #0
		}
	}
}
 800475c:	4618      	mov	r0, r3
 800475e:	3738      	adds	r7, #56	; 0x38
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}
 8004764:	e000ed04 	.word	0xe000ed04

08004768 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b08e      	sub	sp, #56	; 0x38
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	607a      	str	r2, [r7, #4]
 8004774:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800477a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800477c:	2b00      	cmp	r3, #0
 800477e:	d109      	bne.n	8004794 <xQueueGenericSendFromISR+0x2c>
 8004780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004784:	f383 8811 	msr	BASEPRI, r3
 8004788:	f3bf 8f6f 	isb	sy
 800478c:	f3bf 8f4f 	dsb	sy
 8004790:	627b      	str	r3, [r7, #36]	; 0x24
 8004792:	e7fe      	b.n	8004792 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d103      	bne.n	80047a2 <xQueueGenericSendFromISR+0x3a>
 800479a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800479c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d101      	bne.n	80047a6 <xQueueGenericSendFromISR+0x3e>
 80047a2:	2301      	movs	r3, #1
 80047a4:	e000      	b.n	80047a8 <xQueueGenericSendFromISR+0x40>
 80047a6:	2300      	movs	r3, #0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d109      	bne.n	80047c0 <xQueueGenericSendFromISR+0x58>
 80047ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b0:	f383 8811 	msr	BASEPRI, r3
 80047b4:	f3bf 8f6f 	isb	sy
 80047b8:	f3bf 8f4f 	dsb	sy
 80047bc:	623b      	str	r3, [r7, #32]
 80047be:	e7fe      	b.n	80047be <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d103      	bne.n	80047ce <xQueueGenericSendFromISR+0x66>
 80047c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d101      	bne.n	80047d2 <xQueueGenericSendFromISR+0x6a>
 80047ce:	2301      	movs	r3, #1
 80047d0:	e000      	b.n	80047d4 <xQueueGenericSendFromISR+0x6c>
 80047d2:	2300      	movs	r3, #0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d109      	bne.n	80047ec <xQueueGenericSendFromISR+0x84>
 80047d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047dc:	f383 8811 	msr	BASEPRI, r3
 80047e0:	f3bf 8f6f 	isb	sy
 80047e4:	f3bf 8f4f 	dsb	sy
 80047e8:	61fb      	str	r3, [r7, #28]
 80047ea:	e7fe      	b.n	80047ea <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80047ec:	f7ff fa02 	bl	8003bf4 <vPortValidateInterruptPriority>
	__asm volatile
 80047f0:	f3ef 8211 	mrs	r2, BASEPRI
 80047f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f8:	f383 8811 	msr	BASEPRI, r3
 80047fc:	f3bf 8f6f 	isb	sy
 8004800:	f3bf 8f4f 	dsb	sy
 8004804:	61ba      	str	r2, [r7, #24]
 8004806:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004808:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800480a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800480c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800480e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004814:	429a      	cmp	r2, r3
 8004816:	d302      	bcc.n	800481e <xQueueGenericSendFromISR+0xb6>
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	2b02      	cmp	r3, #2
 800481c:	d14e      	bne.n	80048bc <xQueueGenericSendFromISR+0x154>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800481e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004820:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004824:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8004828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800482a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800482e:	2b00      	cmp	r3, #0
 8004830:	d005      	beq.n	800483e <xQueueGenericSendFromISR+0xd6>
 8004832:	2b00      	cmp	r3, #0
 8004834:	db1a      	blt.n	800486c <xQueueGenericSendFromISR+0x104>
 8004836:	3b02      	subs	r3, #2
 8004838:	2b01      	cmp	r3, #1
 800483a:	d817      	bhi.n	800486c <xQueueGenericSendFromISR+0x104>
 800483c:	e00d      	b.n	800485a <xQueueGenericSendFromISR+0xf2>
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d101      	bne.n	8004848 <xQueueGenericSendFromISR+0xe0>
 8004844:	2059      	movs	r0, #89	; 0x59
 8004846:	e000      	b.n	800484a <xQueueGenericSendFromISR+0xe2>
 8004848:	20c3      	movs	r0, #195	; 0xc3
 800484a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800484c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800484e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004850:	3301      	adds	r3, #1
 8004852:	461a      	mov	r2, r3
 8004854:	f003 fca2 	bl	800819c <prvTraceStoreEvent2>
 8004858:	e007      	b.n	800486a <xQueueGenericSendFromISR+0x102>
 800485a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800485c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800485e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004860:	3301      	adds	r3, #1
 8004862:	461a      	mov	r2, r3
 8004864:	205a      	movs	r0, #90	; 0x5a
 8004866:	f003 fc99 	bl	800819c <prvTraceStoreEvent2>
 800486a:	bf00      	nop
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800486c:	683a      	ldr	r2, [r7, #0]
 800486e:	68b9      	ldr	r1, [r7, #8]
 8004870:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004872:	f000 fb58 	bl	8004f26 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004876:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800487a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800487e:	d112      	bne.n	80048a6 <xQueueGenericSendFromISR+0x13e>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004884:	2b00      	cmp	r3, #0
 8004886:	d016      	beq.n	80048b6 <xQueueGenericSendFromISR+0x14e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800488a:	3324      	adds	r3, #36	; 0x24
 800488c:	4618      	mov	r0, r3
 800488e:	f001 fc55 	bl	800613c <xTaskRemoveFromEventList>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d00e      	beq.n	80048b6 <xQueueGenericSendFromISR+0x14e>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d00b      	beq.n	80048b6 <xQueueGenericSendFromISR+0x14e>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2201      	movs	r2, #1
 80048a2:	601a      	str	r2, [r3, #0]
 80048a4:	e007      	b.n	80048b6 <xQueueGenericSendFromISR+0x14e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80048a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80048aa:	3301      	adds	r3, #1
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	b25a      	sxtb	r2, r3
 80048b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80048b6:	2301      	movs	r3, #1
 80048b8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80048ba:	e021      	b.n	8004900 <xQueueGenericSendFromISR+0x198>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 80048bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048be:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d005      	beq.n	80048d2 <xQueueGenericSendFromISR+0x16a>
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	db18      	blt.n	80048fc <xQueueGenericSendFromISR+0x194>
 80048ca:	3b02      	subs	r3, #2
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d815      	bhi.n	80048fc <xQueueGenericSendFromISR+0x194>
 80048d0:	e00c      	b.n	80048ec <xQueueGenericSendFromISR+0x184>
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d101      	bne.n	80048dc <xQueueGenericSendFromISR+0x174>
 80048d8:	205c      	movs	r0, #92	; 0x5c
 80048da:	e000      	b.n	80048de <xQueueGenericSendFromISR+0x176>
 80048dc:	20c4      	movs	r0, #196	; 0xc4
 80048de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e4:	461a      	mov	r2, r3
 80048e6:	f003 fc59 	bl	800819c <prvTraceStoreEvent2>
 80048ea:	e006      	b.n	80048fa <xQueueGenericSendFromISR+0x192>
 80048ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f2:	461a      	mov	r2, r3
 80048f4:	205d      	movs	r0, #93	; 0x5d
 80048f6:	f003 fc51 	bl	800819c <prvTraceStoreEvent2>
 80048fa:	bf00      	nop
			xReturn = errQUEUE_FULL;
 80048fc:	2300      	movs	r3, #0
 80048fe:	637b      	str	r3, [r7, #52]	; 0x34
 8004900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004902:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800490a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800490c:	4618      	mov	r0, r3
 800490e:	3738      	adds	r7, #56	; 0x38
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
 8004914:	b580      	push	{r7, lr}
 8004916:	b082      	sub	sp, #8
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
 800491e:	2200      	movs	r2, #0
 8004920:	6839      	ldr	r1, [r7, #0]
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 f805 	bl	8004932 <MyWrapper>
 8004928:	4603      	mov	r3, r0
 800492a:	4618      	mov	r0, r3
 800492c:	3708      	adds	r7, #8
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}

08004932 <MyWrapper>:
{
 8004932:	b580      	push	{r7, lr}
 8004934:	b090      	sub	sp, #64	; 0x40
 8004936:	af00      	add	r7, sp, #0
 8004938:	60f8      	str	r0, [r7, #12]
 800493a:	60b9      	str	r1, [r7, #8]
 800493c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	63bb      	str	r3, [r7, #56]	; 0x38
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004944:	2b00      	cmp	r3, #0
 8004946:	d109      	bne.n	800495c <MyWrapper+0x2a>
	__asm volatile
 8004948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800494c:	f383 8811 	msr	BASEPRI, r3
 8004950:	f3bf 8f6f 	isb	sy
 8004954:	f3bf 8f4f 	dsb	sy
 8004958:	62bb      	str	r3, [r7, #40]	; 0x28
 800495a:	e7fe      	b.n	800495a <MyWrapper+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800495c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800495e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004960:	2b00      	cmp	r3, #0
 8004962:	d009      	beq.n	8004978 <MyWrapper+0x46>
 8004964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004968:	f383 8811 	msr	BASEPRI, r3
 800496c:	f3bf 8f6f 	isb	sy
 8004970:	f3bf 8f4f 	dsb	sy
 8004974:	627b      	str	r3, [r7, #36]	; 0x24
 8004976:	e7fe      	b.n	8004976 <MyWrapper+0x44>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8004978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d103      	bne.n	8004988 <MyWrapper+0x56>
 8004980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d101      	bne.n	800498c <MyWrapper+0x5a>
 8004988:	2301      	movs	r3, #1
 800498a:	e000      	b.n	800498e <MyWrapper+0x5c>
 800498c:	2300      	movs	r3, #0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d109      	bne.n	80049a6 <MyWrapper+0x74>
 8004992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004996:	f383 8811 	msr	BASEPRI, r3
 800499a:	f3bf 8f6f 	isb	sy
 800499e:	f3bf 8f4f 	dsb	sy
 80049a2:	623b      	str	r3, [r7, #32]
 80049a4:	e7fe      	b.n	80049a4 <MyWrapper+0x72>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80049a6:	f7ff f925 	bl	8003bf4 <vPortValidateInterruptPriority>
	__asm volatile
 80049aa:	f3ef 8211 	mrs	r2, BASEPRI
 80049ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b2:	f383 8811 	msr	BASEPRI, r3
 80049b6:	f3bf 8f6f 	isb	sy
 80049ba:	f3bf 8f4f 	dsb	sy
 80049be:	61fa      	str	r2, [r7, #28]
 80049c0:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 80049c2:	69fb      	ldr	r3, [r7, #28]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80049c4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ca:	633b      	str	r3, [r7, #48]	; 0x30

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80049cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d94d      	bls.n	8004a72 <MyWrapper+0x140>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80049d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 80049e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d005      	beq.n	80049f6 <MyWrapper+0xc4>
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	db1a      	blt.n	8004a24 <MyWrapper+0xf2>
 80049ee:	3b02      	subs	r3, #2
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d817      	bhi.n	8004a24 <MyWrapper+0xf2>
 80049f4:	e00d      	b.n	8004a12 <MyWrapper+0xe0>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d101      	bne.n	8004a00 <MyWrapper+0xce>
 80049fc:	2059      	movs	r0, #89	; 0x59
 80049fe:	e000      	b.n	8004a02 <MyWrapper+0xd0>
 8004a00:	20c3      	movs	r0, #195	; 0xc3
 8004a02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a08:	3301      	adds	r3, #1
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	f003 fbc6 	bl	800819c <prvTraceStoreEvent2>
 8004a10:	e007      	b.n	8004a22 <MyWrapper+0xf0>
 8004a12:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a18:	3301      	adds	r3, #1
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	205a      	movs	r0, #90	; 0x5a
 8004a1e:	f003 fbbd 	bl	800819c <prvTraceStoreEvent2>
 8004a22:	bf00      	nop
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8004a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a26:	1c5a      	adds	r2, r3, #1
 8004a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a2a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004a2c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004a30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a34:	d112      	bne.n	8004a5c <MyWrapper+0x12a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d016      	beq.n	8004a6c <MyWrapper+0x13a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a40:	3324      	adds	r3, #36	; 0x24
 8004a42:	4618      	mov	r0, r3
 8004a44:	f001 fb7a 	bl	800613c <xTaskRemoveFromEventList>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00e      	beq.n	8004a6c <MyWrapper+0x13a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d00b      	beq.n	8004a6c <MyWrapper+0x13a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	2201      	movs	r2, #1
 8004a58:	601a      	str	r2, [r3, #0]
 8004a5a:	e007      	b.n	8004a6c <MyWrapper+0x13a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004a5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004a60:	3301      	adds	r3, #1
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	b25a      	sxtb	r2, r3
 8004a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a70:	e021      	b.n	8004ab6 <MyWrapper+0x184>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8004a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a74:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d005      	beq.n	8004a88 <MyWrapper+0x156>
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	db18      	blt.n	8004ab2 <MyWrapper+0x180>
 8004a80:	3b02      	subs	r3, #2
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d815      	bhi.n	8004ab2 <MyWrapper+0x180>
 8004a86:	e00c      	b.n	8004aa2 <MyWrapper+0x170>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d101      	bne.n	8004a92 <MyWrapper+0x160>
 8004a8e:	205c      	movs	r0, #92	; 0x5c
 8004a90:	e000      	b.n	8004a94 <MyWrapper+0x162>
 8004a92:	20c4      	movs	r0, #196	; 0xc4
 8004a94:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	f003 fb7e 	bl	800819c <prvTraceStoreEvent2>
 8004aa0:	e006      	b.n	8004ab0 <MyWrapper+0x17e>
 8004aa2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	205d      	movs	r0, #93	; 0x5d
 8004aac:	f003 fb76 	bl	800819c <prvTraceStoreEvent2>
 8004ab0:	bf00      	nop
			xReturn = errQUEUE_FULL;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ab8:	617b      	str	r3, [r7, #20]
	__asm volatile
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004ac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3740      	adds	r7, #64	; 0x40
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
	...

08004acc <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b08e      	sub	sp, #56	; 0x38
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	607a      	str	r2, [r7, #4]
 8004ad8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004ada:	2300      	movs	r3, #0
 8004adc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d109      	bne.n	8004afc <xQueueGenericReceive+0x30>
	__asm volatile
 8004ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aec:	f383 8811 	msr	BASEPRI, r3
 8004af0:	f3bf 8f6f 	isb	sy
 8004af4:	f3bf 8f4f 	dsb	sy
 8004af8:	627b      	str	r3, [r7, #36]	; 0x24
 8004afa:	e7fe      	b.n	8004afa <xQueueGenericReceive+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d103      	bne.n	8004b0a <xQueueGenericReceive+0x3e>
 8004b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d101      	bne.n	8004b0e <xQueueGenericReceive+0x42>
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e000      	b.n	8004b10 <xQueueGenericReceive+0x44>
 8004b0e:	2300      	movs	r3, #0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d109      	bne.n	8004b28 <xQueueGenericReceive+0x5c>
 8004b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b18:	f383 8811 	msr	BASEPRI, r3
 8004b1c:	f3bf 8f6f 	isb	sy
 8004b20:	f3bf 8f4f 	dsb	sy
 8004b24:	623b      	str	r3, [r7, #32]
 8004b26:	e7fe      	b.n	8004b26 <xQueueGenericReceive+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b28:	f001 fcd8 	bl	80064dc <xTaskGetSchedulerState>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d102      	bne.n	8004b38 <xQueueGenericReceive+0x6c>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d101      	bne.n	8004b3c <xQueueGenericReceive+0x70>
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e000      	b.n	8004b3e <xQueueGenericReceive+0x72>
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d109      	bne.n	8004b56 <xQueueGenericReceive+0x8a>
 8004b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b46:	f383 8811 	msr	BASEPRI, r3
 8004b4a:	f3bf 8f6f 	isb	sy
 8004b4e:	f3bf 8f4f 	dsb	sy
 8004b52:	61fb      	str	r3, [r7, #28]
 8004b54:	e7fe      	b.n	8004b54 <xQueueGenericReceive+0x88>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b56:	f7fe ff7b 	bl	8003a50 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b5e:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	f000 809b 	beq.w	8004c9e <xQueueGenericReceive+0x1d2>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8004b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004b6e:	68b9      	ldr	r1, [r7, #8]
 8004b70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b72:	f000 fa42 	bl	8004ffa <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d14c      	bne.n	8004c16 <xQueueGenericReceive+0x14a>
				{
					traceQUEUE_RECEIVE( pxQueue );
 8004b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b7e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004b82:	2b04      	cmp	r3, #4
 8004b84:	d825      	bhi.n	8004bd2 <xQueueGenericReceive+0x106>
 8004b86:	a201      	add	r2, pc, #4	; (adr r2, 8004b8c <xQueueGenericReceive+0xc0>)
 8004b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b8c:	08004ba1 	.word	0x08004ba1
 8004b90:	08004bc5 	.word	0x08004bc5
 8004b94:	08004bb3 	.word	0x08004bb3
 8004b98:	08004bb3 	.word	0x08004bb3
 8004b9c:	08004bc5 	.word	0x08004bc5
 8004ba0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	2060      	movs	r0, #96	; 0x60
 8004bac:	f003 fb46 	bl	800823c <prvTraceStoreEvent3>
 8004bb0:	e00e      	b.n	8004bd0 <xQueueGenericReceive+0x104>
 8004bb2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bba:	3b01      	subs	r3, #1
 8004bbc:	2061      	movs	r0, #97	; 0x61
 8004bbe:	f003 fb3d 	bl	800823c <prvTraceStoreEvent3>
 8004bc2:	e005      	b.n	8004bd0 <xQueueGenericReceive+0x104>
 8004bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	4619      	mov	r1, r3
 8004bca:	2062      	movs	r0, #98	; 0x62
 8004bcc:	f003 fae6 	bl	800819c <prvTraceStoreEvent2>
 8004bd0:	bf00      	nop

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8004bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd4:	1e5a      	subs	r2, r3, #1
 8004bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd8:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d104      	bne.n	8004bec <xQueueGenericReceive+0x120>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8004be2:	f001 fdad 	bl	8006740 <pvTaskIncrementMutexHeldCount>
 8004be6:	4602      	mov	r2, r0
 8004be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bea:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bee:	691b      	ldr	r3, [r3, #16]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d050      	beq.n	8004c96 <xQueueGenericReceive+0x1ca>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf6:	3310      	adds	r3, #16
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f001 fa9f 	bl	800613c <xTaskRemoveFromEventList>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d048      	beq.n	8004c96 <xQueueGenericReceive+0x1ca>
						{
							queueYIELD_IF_USING_PREEMPTION();
 8004c04:	4bb2      	ldr	r3, [pc, #712]	; (8004ed0 <xQueueGenericReceive+0x404>)
 8004c06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c0a:	601a      	str	r2, [r3, #0]
 8004c0c:	f3bf 8f4f 	dsb	sy
 8004c10:	f3bf 8f6f 	isb	sy
 8004c14:	e03f      	b.n	8004c96 <xQueueGenericReceive+0x1ca>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				else
				{
					traceQUEUE_PEEK( pxQueue );
 8004c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c18:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004c1c:	2b04      	cmp	r3, #4
 8004c1e:	d823      	bhi.n	8004c68 <xQueueGenericReceive+0x19c>
 8004c20:	a201      	add	r2, pc, #4	; (adr r2, 8004c28 <xQueueGenericReceive+0x15c>)
 8004c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c26:	bf00      	nop
 8004c28:	08004c3d 	.word	0x08004c3d
 8004c2c:	08004c5d 	.word	0x08004c5d
 8004c30:	08004c4d 	.word	0x08004c4d
 8004c34:	08004c4d 	.word	0x08004c4d
 8004c38:	08004c5d 	.word	0x08004c5d
 8004c3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c44:	2070      	movs	r0, #112	; 0x70
 8004c46:	f003 faf9 	bl	800823c <prvTraceStoreEvent3>
 8004c4a:	e00c      	b.n	8004c66 <xQueueGenericReceive+0x19a>
 8004c4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c54:	2071      	movs	r0, #113	; 0x71
 8004c56:	f003 faf1 	bl	800823c <prvTraceStoreEvent3>
 8004c5a:	e004      	b.n	8004c66 <xQueueGenericReceive+0x19a>
 8004c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c5e:	4619      	mov	r1, r3
 8004c60:	2072      	movs	r0, #114	; 0x72
 8004c62:	f003 fa4f 	bl	8008104 <prvTraceStoreEvent1>
 8004c66:	bf00      	nop

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8004c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c6c:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d00f      	beq.n	8004c96 <xQueueGenericReceive+0x1ca>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c78:	3324      	adds	r3, #36	; 0x24
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f001 fa5e 	bl	800613c <xTaskRemoveFromEventList>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d007      	beq.n	8004c96 <xQueueGenericReceive+0x1ca>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 8004c86:	4b92      	ldr	r3, [pc, #584]	; (8004ed0 <xQueueGenericReceive+0x404>)
 8004c88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c8c:	601a      	str	r2, [r3, #0]
 8004c8e:	f3bf 8f4f 	dsb	sy
 8004c92:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 8004c96:	f7fe ff09 	bl	8003aac <vPortExitCritical>
				return pdPASS;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e122      	b.n	8004ee4 <xQueueGenericReceive+0x418>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d13b      	bne.n	8004d1c <xQueueGenericReceive+0x250>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ca4:	f7fe ff02 	bl	8003aac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8004ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004caa:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004cae:	2b04      	cmp	r3, #4
 8004cb0:	d832      	bhi.n	8004d18 <xQueueGenericReceive+0x24c>
 8004cb2:	a201      	add	r2, pc, #4	; (adr r2, 8004cb8 <xQueueGenericReceive+0x1ec>)
 8004cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb8:	08004ccd 	.word	0x08004ccd
 8004cbc:	08004d01 	.word	0x08004d01
 8004cc0:	08004ce7 	.word	0x08004ce7
 8004cc4:	08004ce7 	.word	0x08004ce7
 8004cc8:	08004d01 	.word	0x08004d01
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d101      	bne.n	8004cd6 <xQueueGenericReceive+0x20a>
 8004cd2:	2063      	movs	r0, #99	; 0x63
 8004cd4:	e000      	b.n	8004cd8 <xQueueGenericReceive+0x20c>
 8004cd6:	2073      	movs	r0, #115	; 0x73
 8004cd8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce0:	f003 faac 	bl	800823c <prvTraceStoreEvent3>
 8004ce4:	e017      	b.n	8004d16 <xQueueGenericReceive+0x24a>
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d101      	bne.n	8004cf0 <xQueueGenericReceive+0x224>
 8004cec:	2064      	movs	r0, #100	; 0x64
 8004cee:	e000      	b.n	8004cf2 <xQueueGenericReceive+0x226>
 8004cf0:	2074      	movs	r0, #116	; 0x74
 8004cf2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cfa:	f003 fa9f 	bl	800823c <prvTraceStoreEvent3>
 8004cfe:	e00a      	b.n	8004d16 <xQueueGenericReceive+0x24a>
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d101      	bne.n	8004d0a <xQueueGenericReceive+0x23e>
 8004d06:	2365      	movs	r3, #101	; 0x65
 8004d08:	e000      	b.n	8004d0c <xQueueGenericReceive+0x240>
 8004d0a:	2375      	movs	r3, #117	; 0x75
 8004d0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	4618      	mov	r0, r3
 8004d12:	f003 fa43 	bl	800819c <prvTraceStoreEvent2>
 8004d16:	bf00      	nop
					return errQUEUE_EMPTY;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	e0e3      	b.n	8004ee4 <xQueueGenericReceive+0x418>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d106      	bne.n	8004d30 <xQueueGenericReceive+0x264>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8004d22:	f107 0314 	add.w	r3, r7, #20
 8004d26:	4618      	mov	r0, r3
 8004d28:	f001 fa6e 	bl	8006208 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004d30:	f7fe febc 	bl	8003aac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004d34:	f000 ff6a 	bl	8005c0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d38:	f7fe fe8a 	bl	8003a50 <vPortEnterCritical>
 8004d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d42:	b25b      	sxtb	r3, r3
 8004d44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d48:	d103      	bne.n	8004d52 <xQueueGenericReceive+0x286>
 8004d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d58:	b25b      	sxtb	r3, r3
 8004d5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d5e:	d103      	bne.n	8004d68 <xQueueGenericReceive+0x29c>
 8004d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d68:	f7fe fea0 	bl	8003aac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d6c:	1d3a      	adds	r2, r7, #4
 8004d6e:	f107 0314 	add.w	r3, r7, #20
 8004d72:	4611      	mov	r1, r2
 8004d74:	4618      	mov	r0, r3
 8004d76:	f001 fa6b 	bl	8006250 <xTaskCheckForTimeOut>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d169      	bne.n	8004e54 <xQueueGenericReceive+0x388>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d82:	f000 f9b2 	bl	80050ea <prvIsQueueEmpty>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d05d      	beq.n	8004e48 <xQueueGenericReceive+0x37c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8004d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d8e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004d92:	2b04      	cmp	r3, #4
 8004d94:	d832      	bhi.n	8004dfc <xQueueGenericReceive+0x330>
 8004d96:	a201      	add	r2, pc, #4	; (adr r2, 8004d9c <xQueueGenericReceive+0x2d0>)
 8004d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d9c:	08004db1 	.word	0x08004db1
 8004da0:	08004de5 	.word	0x08004de5
 8004da4:	08004dcb 	.word	0x08004dcb
 8004da8:	08004dcb 	.word	0x08004dcb
 8004dac:	08004de5 	.word	0x08004de5
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d101      	bne.n	8004dba <xQueueGenericReceive+0x2ee>
 8004db6:	2066      	movs	r0, #102	; 0x66
 8004db8:	e000      	b.n	8004dbc <xQueueGenericReceive+0x2f0>
 8004dba:	2076      	movs	r0, #118	; 0x76
 8004dbc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc4:	f003 fa3a 	bl	800823c <prvTraceStoreEvent3>
 8004dc8:	e017      	b.n	8004dfa <xQueueGenericReceive+0x32e>
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d101      	bne.n	8004dd4 <xQueueGenericReceive+0x308>
 8004dd0:	2067      	movs	r0, #103	; 0x67
 8004dd2:	e000      	b.n	8004dd6 <xQueueGenericReceive+0x30a>
 8004dd4:	2077      	movs	r0, #119	; 0x77
 8004dd6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dde:	f003 fa2d 	bl	800823c <prvTraceStoreEvent3>
 8004de2:	e00a      	b.n	8004dfa <xQueueGenericReceive+0x32e>
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d101      	bne.n	8004dee <xQueueGenericReceive+0x322>
 8004dea:	2368      	movs	r3, #104	; 0x68
 8004dec:	e000      	b.n	8004df0 <xQueueGenericReceive+0x324>
 8004dee:	2378      	movs	r3, #120	; 0x78
 8004df0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	4618      	mov	r0, r3
 8004df6:	f003 f9d1 	bl	800819c <prvTraceStoreEvent2>
 8004dfa:	bf00      	nop

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d108      	bne.n	8004e16 <xQueueGenericReceive+0x34a>
					{
						taskENTER_CRITICAL();
 8004e04:	f7fe fe24 	bl	8003a50 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8004e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f001 fb83 	bl	8006518 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 8004e12:	f7fe fe4b 	bl	8003aac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e18:	3324      	adds	r3, #36	; 0x24
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	4611      	mov	r1, r2
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f001 f934 	bl	800608c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004e24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e26:	f000 f90e 	bl	8005046 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004e2a:	f000 fefd 	bl	8005c28 <xTaskResumeAll>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	f47f ae90 	bne.w	8004b56 <xQueueGenericReceive+0x8a>
				{
					portYIELD_WITHIN_API();
 8004e36:	4b26      	ldr	r3, [pc, #152]	; (8004ed0 <xQueueGenericReceive+0x404>)
 8004e38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e3c:	601a      	str	r2, [r3, #0]
 8004e3e:	f3bf 8f4f 	dsb	sy
 8004e42:	f3bf 8f6f 	isb	sy
 8004e46:	e686      	b.n	8004b56 <xQueueGenericReceive+0x8a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004e48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e4a:	f000 f8fc 	bl	8005046 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e4e:	f000 feeb 	bl	8005c28 <xTaskResumeAll>
 8004e52:	e680      	b.n	8004b56 <xQueueGenericReceive+0x8a>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8004e54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e56:	f000 f8f6 	bl	8005046 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e5a:	f000 fee5 	bl	8005c28 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e60:	f000 f943 	bl	80050ea <prvIsQueueEmpty>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	f43f ae75 	beq.w	8004b56 <xQueueGenericReceive+0x8a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8004e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e6e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004e72:	2b04      	cmp	r3, #4
 8004e74:	d835      	bhi.n	8004ee2 <xQueueGenericReceive+0x416>
 8004e76:	a201      	add	r2, pc, #4	; (adr r2, 8004e7c <xQueueGenericReceive+0x3b0>)
 8004e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e7c:	08004e91 	.word	0x08004e91
 8004e80:	08004ec5 	.word	0x08004ec5
 8004e84:	08004eab 	.word	0x08004eab
 8004e88:	08004eab 	.word	0x08004eab
 8004e8c:	08004ec5 	.word	0x08004ec5
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d101      	bne.n	8004e9a <xQueueGenericReceive+0x3ce>
 8004e96:	2063      	movs	r0, #99	; 0x63
 8004e98:	e000      	b.n	8004e9c <xQueueGenericReceive+0x3d0>
 8004e9a:	2073      	movs	r0, #115	; 0x73
 8004e9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea4:	f003 f9ca 	bl	800823c <prvTraceStoreEvent3>
 8004ea8:	e01a      	b.n	8004ee0 <xQueueGenericReceive+0x414>
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d101      	bne.n	8004eb4 <xQueueGenericReceive+0x3e8>
 8004eb0:	2064      	movs	r0, #100	; 0x64
 8004eb2:	e000      	b.n	8004eb6 <xQueueGenericReceive+0x3ea>
 8004eb4:	2074      	movs	r0, #116	; 0x74
 8004eb6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ebe:	f003 f9bd 	bl	800823c <prvTraceStoreEvent3>
 8004ec2:	e00d      	b.n	8004ee0 <xQueueGenericReceive+0x414>
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d104      	bne.n	8004ed4 <xQueueGenericReceive+0x408>
 8004eca:	2365      	movs	r3, #101	; 0x65
 8004ecc:	e003      	b.n	8004ed6 <xQueueGenericReceive+0x40a>
 8004ece:	bf00      	nop
 8004ed0:	e000ed04 	.word	0xe000ed04
 8004ed4:	2375      	movs	r3, #117	; 0x75
 8004ed6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	4618      	mov	r0, r3
 8004edc:	f003 f95e 	bl	800819c <prvTraceStoreEvent2>
 8004ee0:	bf00      	nop
				return errQUEUE_EMPTY;
 8004ee2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3738      	adds	r7, #56	; 0x38
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d109      	bne.n	8004f0e <uxQueueMessagesWaiting+0x22>
 8004efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004efe:	f383 8811 	msr	BASEPRI, r3
 8004f02:	f3bf 8f6f 	isb	sy
 8004f06:	f3bf 8f4f 	dsb	sy
 8004f0a:	60bb      	str	r3, [r7, #8]
 8004f0c:	e7fe      	b.n	8004f0c <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 8004f0e:	f7fe fd9f 	bl	8003a50 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f16:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8004f18:	f7fe fdc8 	bl	8003aac <vPortExitCritical>

	return uxReturn;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3710      	adds	r7, #16
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}

08004f26 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004f26:	b580      	push	{r7, lr}
 8004f28:	b086      	sub	sp, #24
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	60f8      	str	r0, [r7, #12]
 8004f2e:	60b9      	str	r1, [r7, #8]
 8004f30:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004f32:	2300      	movs	r3, #0
 8004f34:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f3a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d10d      	bne.n	8004f60 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d14d      	bne.n	8004fe8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	4618      	mov	r0, r3
 8004f52:	f001 fb65 	bl	8006620 <xTaskPriorityDisinherit>
 8004f56:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	605a      	str	r2, [r3, #4]
 8004f5e:	e043      	b.n	8004fe8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d119      	bne.n	8004f9a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6898      	ldr	r0, [r3, #8]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6e:	461a      	mov	r2, r3
 8004f70:	68b9      	ldr	r1, [r7, #8]
 8004f72:	f004 f997 	bl	80092a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	689a      	ldr	r2, [r3, #8]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7e:	441a      	add	r2, r3
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	689a      	ldr	r2, [r3, #8]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d32b      	bcc.n	8004fe8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	609a      	str	r2, [r3, #8]
 8004f98:	e026      	b.n	8004fe8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	68d8      	ldr	r0, [r3, #12]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	68b9      	ldr	r1, [r7, #8]
 8004fa6:	f004 f97d 	bl	80092a4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	68da      	ldr	r2, [r3, #12]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb2:	425b      	negs	r3, r3
 8004fb4:	441a      	add	r2, r3
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	68da      	ldr	r2, [r3, #12]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d207      	bcs.n	8004fd6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	685a      	ldr	r2, [r3, #4]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fce:	425b      	negs	r3, r3
 8004fd0:	441a      	add	r2, r3
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	d105      	bne.n	8004fe8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d002      	beq.n	8004fe8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	3b01      	subs	r3, #1
 8004fe6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	1c5a      	adds	r2, r3, #1
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004ff0:	697b      	ldr	r3, [r7, #20]
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3718      	adds	r7, #24
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}

08004ffa <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004ffa:	b580      	push	{r7, lr}
 8004ffc:	b082      	sub	sp, #8
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
 8005002:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005008:	2b00      	cmp	r3, #0
 800500a:	d018      	beq.n	800503e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	68da      	ldr	r2, [r3, #12]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005014:	441a      	add	r2, r3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	68da      	ldr	r2, [r3, #12]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	429a      	cmp	r2, r3
 8005024:	d303      	bcc.n	800502e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	68d9      	ldr	r1, [r3, #12]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005036:	461a      	mov	r2, r3
 8005038:	6838      	ldr	r0, [r7, #0]
 800503a:	f004 f933 	bl	80092a4 <memcpy>
	}
}
 800503e:	bf00      	nop
 8005040:	3708      	adds	r7, #8
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}

08005046 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005046:	b580      	push	{r7, lr}
 8005048:	b084      	sub	sp, #16
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800504e:	f7fe fcff 	bl	8003a50 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005058:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800505a:	e011      	b.n	8005080 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005060:	2b00      	cmp	r3, #0
 8005062:	d012      	beq.n	800508a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	3324      	adds	r3, #36	; 0x24
 8005068:	4618      	mov	r0, r3
 800506a:	f001 f867 	bl	800613c <xTaskRemoveFromEventList>
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d001      	beq.n	8005078 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005074:	f001 f94a 	bl	800630c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005078:	7bfb      	ldrb	r3, [r7, #15]
 800507a:	3b01      	subs	r3, #1
 800507c:	b2db      	uxtb	r3, r3
 800507e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005080:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005084:	2b00      	cmp	r3, #0
 8005086:	dce9      	bgt.n	800505c <prvUnlockQueue+0x16>
 8005088:	e000      	b.n	800508c <prvUnlockQueue+0x46>
					break;
 800508a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	22ff      	movs	r2, #255	; 0xff
 8005090:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005094:	f7fe fd0a 	bl	8003aac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005098:	f7fe fcda 	bl	8003a50 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050a2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80050a4:	e011      	b.n	80050ca <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	691b      	ldr	r3, [r3, #16]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d012      	beq.n	80050d4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	3310      	adds	r3, #16
 80050b2:	4618      	mov	r0, r3
 80050b4:	f001 f842 	bl	800613c <xTaskRemoveFromEventList>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d001      	beq.n	80050c2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80050be:	f001 f925 	bl	800630c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80050c2:	7bbb      	ldrb	r3, [r7, #14]
 80050c4:	3b01      	subs	r3, #1
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80050ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	dce9      	bgt.n	80050a6 <prvUnlockQueue+0x60>
 80050d2:	e000      	b.n	80050d6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80050d4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	22ff      	movs	r2, #255	; 0xff
 80050da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80050de:	f7fe fce5 	bl	8003aac <vPortExitCritical>
}
 80050e2:	bf00      	nop
 80050e4:	3710      	adds	r7, #16
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}

080050ea <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80050ea:	b580      	push	{r7, lr}
 80050ec:	b084      	sub	sp, #16
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80050f2:	f7fe fcad 	bl	8003a50 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d102      	bne.n	8005104 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80050fe:	2301      	movs	r3, #1
 8005100:	60fb      	str	r3, [r7, #12]
 8005102:	e001      	b.n	8005108 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005104:	2300      	movs	r3, #0
 8005106:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005108:	f7fe fcd0 	bl	8003aac <vPortExitCritical>

	return xReturn;
 800510c:	68fb      	ldr	r3, [r7, #12]
}
 800510e:	4618      	mov	r0, r3
 8005110:	3710      	adds	r7, #16
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}

08005116 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005116:	b580      	push	{r7, lr}
 8005118:	b084      	sub	sp, #16
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800511e:	f7fe fc97 	bl	8003a50 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800512a:	429a      	cmp	r2, r3
 800512c:	d102      	bne.n	8005134 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800512e:	2301      	movs	r3, #1
 8005130:	60fb      	str	r3, [r7, #12]
 8005132:	e001      	b.n	8005138 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005134:	2300      	movs	r3, #0
 8005136:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005138:	f7fe fcb8 	bl	8003aac <vPortExitCritical>

	return xReturn;
 800513c:	68fb      	ldr	r3, [r7, #12]
}
 800513e:	4618      	mov	r0, r3
 8005140:	3710      	adds	r7, #16
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
	...

08005148 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005152:	2300      	movs	r3, #0
 8005154:	60fb      	str	r3, [r7, #12]
 8005156:	e01e      	b.n	8005196 <vQueueAddToRegistry+0x4e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005158:	4a12      	ldr	r2, [pc, #72]	; (80051a4 <vQueueAddToRegistry+0x5c>)
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d115      	bne.n	8005190 <vQueueAddToRegistry+0x48>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005164:	490f      	ldr	r1, [pc, #60]	; (80051a4 <vQueueAddToRegistry+0x5c>)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	683a      	ldr	r2, [r7, #0]
 800516a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800516e:	4a0d      	ldr	r2, [pc, #52]	; (80051a4 <vQueueAddToRegistry+0x5c>)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	00db      	lsls	r3, r3, #3
 8005174:	4413      	add	r3, r2
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 800517a:	6839      	ldr	r1, [r7, #0]
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f003 fa39 	bl	80085f4 <prvTraceSaveSymbol>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	683a      	ldr	r2, [r7, #0]
 8005186:	2103      	movs	r1, #3
 8005188:	2001      	movs	r0, #1
 800518a:	f003 f919 	bl	80083c0 <prvTraceStoreStringEvent>
				break;
 800518e:	e005      	b.n	800519c <vQueueAddToRegistry+0x54>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	3301      	adds	r3, #1
 8005194:	60fb      	str	r3, [r7, #12]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2b07      	cmp	r3, #7
 800519a:	d9dd      	bls.n	8005158 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800519c:	bf00      	nop
 800519e:	3710      	adds	r7, #16
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	20014a18 	.word	0x20014a18

080051a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b086      	sub	sp, #24
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	60b9      	str	r1, [r7, #8]
 80051b2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80051b8:	f7fe fc4a 	bl	8003a50 <vPortEnterCritical>
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051c2:	b25b      	sxtb	r3, r3
 80051c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051c8:	d103      	bne.n	80051d2 <vQueueWaitForMessageRestricted+0x2a>
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051d8:	b25b      	sxtb	r3, r3
 80051da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051de:	d103      	bne.n	80051e8 <vQueueWaitForMessageRestricted+0x40>
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051e8:	f7fe fc60 	bl	8003aac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d106      	bne.n	8005202 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	3324      	adds	r3, #36	; 0x24
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	68b9      	ldr	r1, [r7, #8]
 80051fc:	4618      	mov	r0, r3
 80051fe:	f000 ff69 	bl	80060d4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005202:	6978      	ldr	r0, [r7, #20]
 8005204:	f7ff ff1f 	bl	8005046 <prvUnlockQueue>
	}
 8005208:	bf00      	nop
 800520a:	3718      	adds	r7, #24
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005210:	b580      	push	{r7, lr}
 8005212:	b08c      	sub	sp, #48	; 0x30
 8005214:	af04      	add	r7, sp, #16
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	60b9      	str	r1, [r7, #8]
 800521a:	603b      	str	r3, [r7, #0]
 800521c:	4613      	mov	r3, r2
 800521e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005220:	88fb      	ldrh	r3, [r7, #6]
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	4618      	mov	r0, r3
 8005226:	f7fe fd23 	bl	8003c70 <pvPortMalloc>
 800522a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00e      	beq.n	8005250 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005232:	2058      	movs	r0, #88	; 0x58
 8005234:	f7fe fd1c 	bl	8003c70 <pvPortMalloc>
 8005238:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d003      	beq.n	8005248 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	631a      	str	r2, [r3, #48]	; 0x30
 8005246:	e005      	b.n	8005254 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005248:	6978      	ldr	r0, [r7, #20]
 800524a:	f7fe fddd 	bl	8003e08 <vPortFree>
 800524e:	e001      	b.n	8005254 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005250:	2300      	movs	r3, #0
 8005252:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d013      	beq.n	8005282 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800525a:	88fa      	ldrh	r2, [r7, #6]
 800525c:	2300      	movs	r3, #0
 800525e:	9303      	str	r3, [sp, #12]
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	9302      	str	r3, [sp, #8]
 8005264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005266:	9301      	str	r3, [sp, #4]
 8005268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800526a:	9300      	str	r3, [sp, #0]
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	68b9      	ldr	r1, [r7, #8]
 8005270:	68f8      	ldr	r0, [r7, #12]
 8005272:	f000 f80e 	bl	8005292 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005276:	69f8      	ldr	r0, [r7, #28]
 8005278:	f000 f892 	bl	80053a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800527c:	2301      	movs	r3, #1
 800527e:	61bb      	str	r3, [r7, #24]
 8005280:	e002      	b.n	8005288 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005282:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005286:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005288:	69bb      	ldr	r3, [r7, #24]
	}
 800528a:	4618      	mov	r0, r3
 800528c:	3720      	adds	r7, #32
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}

08005292 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8005292:	b580      	push	{r7, lr}
 8005294:	b088      	sub	sp, #32
 8005296:	af00      	add	r7, sp, #0
 8005298:	60f8      	str	r0, [r7, #12]
 800529a:	60b9      	str	r1, [r7, #8]
 800529c:	607a      	str	r2, [r7, #4]
 800529e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80052a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	461a      	mov	r2, r3
 80052aa:	21a5      	movs	r1, #165	; 0xa5
 80052ac:	f004 f805 	bl	80092ba <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80052b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80052ba:	3b01      	subs	r3, #1
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	4413      	add	r3, r2
 80052c0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	f023 0307 	bic.w	r3, r3, #7
 80052c8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	f003 0307 	and.w	r3, r3, #7
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d009      	beq.n	80052e8 <prvInitialiseNewTask+0x56>
 80052d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d8:	f383 8811 	msr	BASEPRI, r3
 80052dc:	f3bf 8f6f 	isb	sy
 80052e0:	f3bf 8f4f 	dsb	sy
 80052e4:	617b      	str	r3, [r7, #20]
 80052e6:	e7fe      	b.n	80052e6 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80052e8:	2300      	movs	r3, #0
 80052ea:	61fb      	str	r3, [r7, #28]
 80052ec:	e012      	b.n	8005314 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80052ee:	68ba      	ldr	r2, [r7, #8]
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	4413      	add	r3, r2
 80052f4:	7819      	ldrb	r1, [r3, #0]
 80052f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	4413      	add	r3, r2
 80052fc:	3334      	adds	r3, #52	; 0x34
 80052fe:	460a      	mov	r2, r1
 8005300:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005302:	68ba      	ldr	r2, [r7, #8]
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	4413      	add	r3, r2
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d006      	beq.n	800531c <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	3301      	adds	r3, #1
 8005312:	61fb      	str	r3, [r7, #28]
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	2b09      	cmp	r3, #9
 8005318:	d9e9      	bls.n	80052ee <prvInitialiseNewTask+0x5c>
 800531a:	e000      	b.n	800531e <prvInitialiseNewTask+0x8c>
		{
			break;
 800531c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800531e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005320:	2200      	movs	r2, #0
 8005322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005328:	2b04      	cmp	r3, #4
 800532a:	d901      	bls.n	8005330 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800532c:	2304      	movs	r3, #4
 800532e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005332:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005334:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005338:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800533a:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 800533c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533e:	2200      	movs	r2, #0
 8005340:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005344:	3304      	adds	r3, #4
 8005346:	4618      	mov	r0, r3
 8005348:	f7fe f9ec 	bl	8003724 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800534c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800534e:	3318      	adds	r3, #24
 8005350:	4618      	mov	r0, r3
 8005352:	f7fe f9e7 	bl	8003724 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005358:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800535a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800535c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800535e:	f1c3 0205 	rsb	r2, r3, #5
 8005362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005364:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005368:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800536a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800536c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800536e:	2200      	movs	r2, #0
 8005370:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005374:	2200      	movs	r2, #0
 8005376:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800537a:	683a      	ldr	r2, [r7, #0]
 800537c:	68f9      	ldr	r1, [r7, #12]
 800537e:	69b8      	ldr	r0, [r7, #24]
 8005380:	f7fe fa64 	bl	800384c <pxPortInitialiseStack>
 8005384:	4602      	mov	r2, r0
 8005386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005388:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800538a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800538c:	2b00      	cmp	r3, #0
 800538e:	d002      	beq.n	8005396 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005392:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005394:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005396:	bf00      	nop
 8005398:	3720      	adds	r7, #32
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
	...

080053a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b082      	sub	sp, #8
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80053a8:	f7fe fb52 	bl	8003a50 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80053ac:	4b3e      	ldr	r3, [pc, #248]	; (80054a8 <prvAddNewTaskToReadyList+0x108>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	3301      	adds	r3, #1
 80053b2:	4a3d      	ldr	r2, [pc, #244]	; (80054a8 <prvAddNewTaskToReadyList+0x108>)
 80053b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80053b6:	4b3d      	ldr	r3, [pc, #244]	; (80054ac <prvAddNewTaskToReadyList+0x10c>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d109      	bne.n	80053d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80053be:	4a3b      	ldr	r2, [pc, #236]	; (80054ac <prvAddNewTaskToReadyList+0x10c>)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80053c4:	4b38      	ldr	r3, [pc, #224]	; (80054a8 <prvAddNewTaskToReadyList+0x108>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d110      	bne.n	80053ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80053cc:	f000 ffc4 	bl	8006358 <prvInitialiseTaskLists>
 80053d0:	e00d      	b.n	80053ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80053d2:	4b37      	ldr	r3, [pc, #220]	; (80054b0 <prvAddNewTaskToReadyList+0x110>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d109      	bne.n	80053ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80053da:	4b34      	ldr	r3, [pc, #208]	; (80054ac <prvAddNewTaskToReadyList+0x10c>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d802      	bhi.n	80053ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80053e8:	4a30      	ldr	r2, [pc, #192]	; (80054ac <prvAddNewTaskToReadyList+0x10c>)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80053ee:	4b31      	ldr	r3, [pc, #196]	; (80054b4 <prvAddNewTaskToReadyList+0x114>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	3301      	adds	r3, #1
 80053f4:	4a2f      	ldr	r2, [pc, #188]	; (80054b4 <prvAddNewTaskToReadyList+0x114>)
 80053f6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80053f8:	4b2e      	ldr	r3, [pc, #184]	; (80054b4 <prvAddNewTaskToReadyList+0x114>)
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d01a      	beq.n	800543c <prvAddNewTaskToReadyList+0x9c>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	3334      	adds	r3, #52	; 0x34
 800540a:	4619      	mov	r1, r3
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f003 f8f1 	bl	80085f4 <prvTraceSaveSymbol>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005416:	4619      	mov	r1, r3
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f003 f9dd 	bl	80087d8 <prvTraceSaveObjectData>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2103      	movs	r1, #3
 8005428:	2001      	movs	r0, #1
 800542a:	f002 ffc9 	bl	80083c0 <prvTraceStoreStringEvent>
 800542e:	6879      	ldr	r1, [r7, #4]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005434:	461a      	mov	r2, r3
 8005436:	2010      	movs	r0, #16
 8005438:	f002 feb0 	bl	800819c <prvTraceStoreEvent2>

		prvAddTaskToReadyList( pxNewTCB );
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4619      	mov	r1, r3
 8005440:	2030      	movs	r0, #48	; 0x30
 8005442:	f002 fe5f 	bl	8008104 <prvTraceStoreEvent1>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800544a:	2201      	movs	r2, #1
 800544c:	409a      	lsls	r2, r3
 800544e:	4b1a      	ldr	r3, [pc, #104]	; (80054b8 <prvAddNewTaskToReadyList+0x118>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4313      	orrs	r3, r2
 8005454:	4a18      	ldr	r2, [pc, #96]	; (80054b8 <prvAddNewTaskToReadyList+0x118>)
 8005456:	6013      	str	r3, [r2, #0]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800545c:	4613      	mov	r3, r2
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	4413      	add	r3, r2
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	4a15      	ldr	r2, [pc, #84]	; (80054bc <prvAddNewTaskToReadyList+0x11c>)
 8005466:	441a      	add	r2, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	3304      	adds	r3, #4
 800546c:	4619      	mov	r1, r3
 800546e:	4610      	mov	r0, r2
 8005470:	f7fe f965 	bl	800373e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005474:	f7fe fb1a 	bl	8003aac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005478:	4b0d      	ldr	r3, [pc, #52]	; (80054b0 <prvAddNewTaskToReadyList+0x110>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d00e      	beq.n	800549e <prvAddNewTaskToReadyList+0xfe>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005480:	4b0a      	ldr	r3, [pc, #40]	; (80054ac <prvAddNewTaskToReadyList+0x10c>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800548a:	429a      	cmp	r2, r3
 800548c:	d207      	bcs.n	800549e <prvAddNewTaskToReadyList+0xfe>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800548e:	4b0c      	ldr	r3, [pc, #48]	; (80054c0 <prvAddNewTaskToReadyList+0x120>)
 8005490:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005494:	601a      	str	r2, [r3, #0]
 8005496:	f3bf 8f4f 	dsb	sy
 800549a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800549e:	bf00      	nop
 80054a0:	3708      	adds	r7, #8
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	20014288 	.word	0x20014288
 80054ac:	200141b0 	.word	0x200141b0
 80054b0:	20014294 	.word	0x20014294
 80054b4:	200142a4 	.word	0x200142a4
 80054b8:	20014290 	.word	0x20014290
 80054bc:	200141b4 	.word	0x200141b4
 80054c0:	e000ed04 	.word	0xe000ed04

080054c4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80054cc:	f7fe fac0 	bl	8003a50 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d102      	bne.n	80054dc <vTaskDelete+0x18>
 80054d6:	4b41      	ldr	r3, [pc, #260]	; (80055dc <vTaskDelete+0x118>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	e000      	b.n	80054de <vTaskDelete+0x1a>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	3304      	adds	r3, #4
 80054e4:	4618      	mov	r0, r3
 80054e6:	f7fe f987 	bl	80037f8 <uxListRemove>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d115      	bne.n	800551c <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054f4:	493a      	ldr	r1, [pc, #232]	; (80055e0 <vTaskDelete+0x11c>)
 80054f6:	4613      	mov	r3, r2
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	4413      	add	r3, r2
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	440b      	add	r3, r1
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d10a      	bne.n	800551c <vTaskDelete+0x58>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800550a:	2201      	movs	r2, #1
 800550c:	fa02 f303 	lsl.w	r3, r2, r3
 8005510:	43da      	mvns	r2, r3
 8005512:	4b34      	ldr	r3, [pc, #208]	; (80055e4 <vTaskDelete+0x120>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4013      	ands	r3, r2
 8005518:	4a32      	ldr	r2, [pc, #200]	; (80055e4 <vTaskDelete+0x120>)
 800551a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005520:	2b00      	cmp	r3, #0
 8005522:	d004      	beq.n	800552e <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	3318      	adds	r3, #24
 8005528:	4618      	mov	r0, r3
 800552a:	f7fe f965 	bl	80037f8 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800552e:	4b2e      	ldr	r3, [pc, #184]	; (80055e8 <vTaskDelete+0x124>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	3301      	adds	r3, #1
 8005534:	4a2c      	ldr	r2, [pc, #176]	; (80055e8 <vTaskDelete+0x124>)
 8005536:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8005538:	4b28      	ldr	r3, [pc, #160]	; (80055dc <vTaskDelete+0x118>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	68fa      	ldr	r2, [r7, #12]
 800553e:	429a      	cmp	r2, r3
 8005540:	d10b      	bne.n	800555a <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	3304      	adds	r3, #4
 8005546:	4619      	mov	r1, r3
 8005548:	4828      	ldr	r0, [pc, #160]	; (80055ec <vTaskDelete+0x128>)
 800554a:	f7fe f8f8 	bl	800373e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800554e:	4b28      	ldr	r3, [pc, #160]	; (80055f0 <vTaskDelete+0x12c>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	3301      	adds	r3, #1
 8005554:	4a26      	ldr	r2, [pc, #152]	; (80055f0 <vTaskDelete+0x12c>)
 8005556:	6013      	str	r3, [r2, #0]
 8005558:	e009      	b.n	800556e <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800555a:	4b26      	ldr	r3, [pc, #152]	; (80055f4 <vTaskDelete+0x130>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	3b01      	subs	r3, #1
 8005560:	4a24      	ldr	r2, [pc, #144]	; (80055f4 <vTaskDelete+0x130>)
 8005562:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8005564:	68f8      	ldr	r0, [r7, #12]
 8005566:	f000 ff73 	bl	8006450 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800556a:	f000 ff81 	bl	8006470 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
 800556e:	68f9      	ldr	r1, [r7, #12]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d002      	beq.n	800557c <vTaskDelete+0xb8>
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800557a:	e000      	b.n	800557e <vTaskDelete+0xba>
 800557c:	2300      	movs	r3, #0
 800557e:	461a      	mov	r2, r3
 8005580:	2020      	movs	r0, #32
 8005582:	f002 fe0b 	bl	800819c <prvTraceStoreEvent2>
 8005586:	68f8      	ldr	r0, [r7, #12]
 8005588:	f003 f8c0 	bl	800870c <prvTraceDeleteSymbol>
 800558c:	68f8      	ldr	r0, [r7, #12]
 800558e:	f003 f981 	bl	8008894 <prvTraceDeleteObjectData>
		}
		taskEXIT_CRITICAL();
 8005592:	f7fe fa8b 	bl	8003aac <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8005596:	4b18      	ldr	r3, [pc, #96]	; (80055f8 <vTaskDelete+0x134>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d01a      	beq.n	80055d4 <vTaskDelete+0x110>
		{
			if( pxTCB == pxCurrentTCB )
 800559e:	4b0f      	ldr	r3, [pc, #60]	; (80055dc <vTaskDelete+0x118>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d115      	bne.n	80055d4 <vTaskDelete+0x110>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80055a8:	4b14      	ldr	r3, [pc, #80]	; (80055fc <vTaskDelete+0x138>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d009      	beq.n	80055c4 <vTaskDelete+0x100>
 80055b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b4:	f383 8811 	msr	BASEPRI, r3
 80055b8:	f3bf 8f6f 	isb	sy
 80055bc:	f3bf 8f4f 	dsb	sy
 80055c0:	60bb      	str	r3, [r7, #8]
 80055c2:	e7fe      	b.n	80055c2 <vTaskDelete+0xfe>
				portYIELD_WITHIN_API();
 80055c4:	4b0e      	ldr	r3, [pc, #56]	; (8005600 <vTaskDelete+0x13c>)
 80055c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055ca:	601a      	str	r2, [r3, #0]
 80055cc:	f3bf 8f4f 	dsb	sy
 80055d0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80055d4:	bf00      	nop
 80055d6:	3710      	adds	r7, #16
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}
 80055dc:	200141b0 	.word	0x200141b0
 80055e0:	200141b4 	.word	0x200141b4
 80055e4:	20014290 	.word	0x20014290
 80055e8:	200142a4 	.word	0x200142a4
 80055ec:	2001425c 	.word	0x2001425c
 80055f0:	20014270 	.word	0x20014270
 80055f4:	20014288 	.word	0x20014288
 80055f8:	20014294 	.word	0x20014294
 80055fc:	200142b0 	.word	0x200142b0
 8005600:	e000ed04 	.word	0xe000ed04

08005604 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8005604:	b580      	push	{r7, lr}
 8005606:	b08a      	sub	sp, #40	; 0x28
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800560e:	2300      	movs	r3, #0
 8005610:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d109      	bne.n	800562c <vTaskDelayUntil+0x28>
 8005618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800561c:	f383 8811 	msr	BASEPRI, r3
 8005620:	f3bf 8f6f 	isb	sy
 8005624:	f3bf 8f4f 	dsb	sy
 8005628:	617b      	str	r3, [r7, #20]
 800562a:	e7fe      	b.n	800562a <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d109      	bne.n	8005646 <vTaskDelayUntil+0x42>
 8005632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005636:	f383 8811 	msr	BASEPRI, r3
 800563a:	f3bf 8f6f 	isb	sy
 800563e:	f3bf 8f4f 	dsb	sy
 8005642:	613b      	str	r3, [r7, #16]
 8005644:	e7fe      	b.n	8005644 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 8005646:	4b2b      	ldr	r3, [pc, #172]	; (80056f4 <vTaskDelayUntil+0xf0>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d009      	beq.n	8005662 <vTaskDelayUntil+0x5e>
 800564e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005652:	f383 8811 	msr	BASEPRI, r3
 8005656:	f3bf 8f6f 	isb	sy
 800565a:	f3bf 8f4f 	dsb	sy
 800565e:	60fb      	str	r3, [r7, #12]
 8005660:	e7fe      	b.n	8005660 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 8005662:	f000 fad3 	bl	8005c0c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8005666:	4b24      	ldr	r3, [pc, #144]	; (80056f8 <vTaskDelayUntil+0xf4>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	4413      	add	r3, r2
 8005674:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	6a3b      	ldr	r3, [r7, #32]
 800567c:	429a      	cmp	r2, r3
 800567e:	d90b      	bls.n	8005698 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	429a      	cmp	r2, r3
 8005688:	d911      	bls.n	80056ae <vTaskDelayUntil+0xaa>
 800568a:	69fa      	ldr	r2, [r7, #28]
 800568c:	6a3b      	ldr	r3, [r7, #32]
 800568e:	429a      	cmp	r2, r3
 8005690:	d90d      	bls.n	80056ae <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8005692:	2301      	movs	r3, #1
 8005694:	627b      	str	r3, [r7, #36]	; 0x24
 8005696:	e00a      	b.n	80056ae <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	429a      	cmp	r2, r3
 80056a0:	d803      	bhi.n	80056aa <vTaskDelayUntil+0xa6>
 80056a2:	69fa      	ldr	r2, [r7, #28]
 80056a4:	6a3b      	ldr	r3, [r7, #32]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d901      	bls.n	80056ae <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 80056aa:	2301      	movs	r3, #1
 80056ac:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	69fa      	ldr	r2, [r7, #28]
 80056b2:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80056b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d00a      	beq.n	80056d0 <vTaskDelayUntil+0xcc>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );
 80056ba:	69f9      	ldr	r1, [r7, #28]
 80056bc:	2079      	movs	r0, #121	; 0x79
 80056be:	f002 fd21 	bl	8008104 <prvTraceStoreEvent1>

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80056c2:	69fa      	ldr	r2, [r7, #28]
 80056c4:	6a3b      	ldr	r3, [r7, #32]
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	2100      	movs	r1, #0
 80056ca:	4618      	mov	r0, r3
 80056cc:	f001 f84c 	bl	8006768 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80056d0:	f000 faaa 	bl	8005c28 <xTaskResumeAll>
 80056d4:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d107      	bne.n	80056ec <vTaskDelayUntil+0xe8>
		{
			portYIELD_WITHIN_API();
 80056dc:	4b07      	ldr	r3, [pc, #28]	; (80056fc <vTaskDelayUntil+0xf8>)
 80056de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056e2:	601a      	str	r2, [r3, #0]
 80056e4:	f3bf 8f4f 	dsb	sy
 80056e8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80056ec:	bf00      	nop
 80056ee:	3728      	adds	r7, #40	; 0x28
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	200142b0 	.word	0x200142b0
 80056f8:	2001428c 	.word	0x2001428c
 80056fc:	e000ed04 	.word	0xe000ed04

08005700 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005708:	2300      	movs	r3, #0
 800570a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d01a      	beq.n	8005748 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005712:	4b15      	ldr	r3, [pc, #84]	; (8005768 <vTaskDelay+0x68>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d009      	beq.n	800572e <vTaskDelay+0x2e>
 800571a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800571e:	f383 8811 	msr	BASEPRI, r3
 8005722:	f3bf 8f6f 	isb	sy
 8005726:	f3bf 8f4f 	dsb	sy
 800572a:	60bb      	str	r3, [r7, #8]
 800572c:	e7fe      	b.n	800572c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800572e:	f000 fa6d 	bl	8005c0c <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 8005732:	6879      	ldr	r1, [r7, #4]
 8005734:	207a      	movs	r0, #122	; 0x7a
 8005736:	f002 fce5 	bl	8008104 <prvTraceStoreEvent1>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800573a:	2100      	movs	r1, #0
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f001 f813 	bl	8006768 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005742:	f000 fa71 	bl	8005c28 <xTaskResumeAll>
 8005746:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d107      	bne.n	800575e <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800574e:	4b07      	ldr	r3, [pc, #28]	; (800576c <vTaskDelay+0x6c>)
 8005750:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005754:	601a      	str	r2, [r3, #0]
 8005756:	f3bf 8f4f 	dsb	sy
 800575a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800575e:	bf00      	nop
 8005760:	3710      	adds	r7, #16
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	200142b0 	.word	0x200142b0
 800576c:	e000ed04 	.word	0xe000ed04

08005770 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
	{
 8005770:	b580      	push	{r7, lr}
 8005772:	b084      	sub	sp, #16
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
 8005778:	f7fe f96a 	bl	8003a50 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the that
			called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d102      	bne.n	8005788 <uxTaskPriorityGet+0x18>
 8005782:	4b07      	ldr	r3, [pc, #28]	; (80057a0 <uxTaskPriorityGet+0x30>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	e000      	b.n	800578a <uxTaskPriorityGet+0x1a>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005790:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
 8005792:	f7fe f98b 	bl	8003aac <vPortExitCritical>

		return uxReturn;
 8005796:	68bb      	ldr	r3, [r7, #8]
	}
 8005798:	4618      	mov	r0, r3
 800579a:	3710      	adds	r7, #16
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}
 80057a0:	200141b0 	.word	0x200141b0

080057a4 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b088      	sub	sp, #32
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 80057ae:	2300      	movs	r3, #0
 80057b0:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	2b04      	cmp	r3, #4
 80057b6:	d909      	bls.n	80057cc <vTaskPrioritySet+0x28>
 80057b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057bc:	f383 8811 	msr	BASEPRI, r3
 80057c0:	f3bf 8f6f 	isb	sy
 80057c4:	f3bf 8f4f 	dsb	sy
 80057c8:	60fb      	str	r3, [r7, #12]
 80057ca:	e7fe      	b.n	80057ca <vTaskPrioritySet+0x26>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	2b04      	cmp	r3, #4
 80057d0:	d901      	bls.n	80057d6 <vTaskPrioritySet+0x32>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80057d2:	2304      	movs	r3, #4
 80057d4:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 80057d6:	f7fe f93b 	bl	8003a50 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d102      	bne.n	80057e6 <vTaskPrioritySet+0x42>
 80057e0:	4b4a      	ldr	r3, [pc, #296]	; (800590c <vTaskPrioritySet+0x168>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	e000      	b.n	80057e8 <vTaskPrioritySet+0x44>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
 80057ea:	6839      	ldr	r1, [r7, #0]
 80057ec:	69b8      	ldr	r0, [r7, #24]
 80057ee:	f002 fff3 	bl	80087d8 <prvTraceSaveObjectData>
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	683a      	ldr	r2, [r7, #0]
 80057f6:	4619      	mov	r1, r3
 80057f8:	2004      	movs	r0, #4
 80057fa:	f002 fccf 	bl	800819c <prvTraceStoreEvent2>

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005802:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 8005804:	697a      	ldr	r2, [r7, #20]
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	429a      	cmp	r2, r3
 800580a:	d079      	beq.n	8005900 <vTaskPrioritySet+0x15c>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 800580c:	683a      	ldr	r2, [r7, #0]
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	429a      	cmp	r2, r3
 8005812:	d90d      	bls.n	8005830 <vTaskPrioritySet+0x8c>
				{
					if( pxTCB != pxCurrentTCB )
 8005814:	4b3d      	ldr	r3, [pc, #244]	; (800590c <vTaskPrioritySet+0x168>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	69ba      	ldr	r2, [r7, #24]
 800581a:	429a      	cmp	r2, r3
 800581c:	d00f      	beq.n	800583e <vTaskPrioritySet+0x9a>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800581e:	4b3b      	ldr	r3, [pc, #236]	; (800590c <vTaskPrioritySet+0x168>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	429a      	cmp	r2, r3
 8005828:	d809      	bhi.n	800583e <vTaskPrioritySet+0x9a>
						{
							xYieldRequired = pdTRUE;
 800582a:	2301      	movs	r3, #1
 800582c:	61fb      	str	r3, [r7, #28]
 800582e:	e006      	b.n	800583e <vTaskPrioritySet+0x9a>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 8005830:	4b36      	ldr	r3, [pc, #216]	; (800590c <vTaskPrioritySet+0x168>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	69ba      	ldr	r2, [r7, #24]
 8005836:	429a      	cmp	r2, r3
 8005838:	d101      	bne.n	800583e <vTaskPrioritySet+0x9a>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 800583a:	2301      	movs	r3, #1
 800583c:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800583e:	69bb      	ldr	r3, [r7, #24]
 8005840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005842:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8005844:	69bb      	ldr	r3, [r7, #24]
 8005846:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800584c:	429a      	cmp	r2, r3
 800584e:	d102      	bne.n	8005856 <vTaskPrioritySet+0xb2>
					{
						pxTCB->uxPriority = uxNewPriority;
 8005850:	69bb      	ldr	r3, [r7, #24]
 8005852:	683a      	ldr	r2, [r7, #0]
 8005854:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	683a      	ldr	r2, [r7, #0]
 800585a:	649a      	str	r2, [r3, #72]	; 0x48
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	699b      	ldr	r3, [r3, #24]
 8005860:	2b00      	cmp	r3, #0
 8005862:	db04      	blt.n	800586e <vTaskPrioritySet+0xca>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	f1c3 0205 	rsb	r2, r3, #5
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	6959      	ldr	r1, [r3, #20]
 8005872:	693a      	ldr	r2, [r7, #16]
 8005874:	4613      	mov	r3, r2
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	4413      	add	r3, r2
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	4a24      	ldr	r2, [pc, #144]	; (8005910 <vTaskPrioritySet+0x16c>)
 800587e:	4413      	add	r3, r2
 8005880:	4299      	cmp	r1, r3
 8005882:	d101      	bne.n	8005888 <vTaskPrioritySet+0xe4>
 8005884:	2301      	movs	r3, #1
 8005886:	e000      	b.n	800588a <vTaskPrioritySet+0xe6>
 8005888:	2300      	movs	r3, #0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d02d      	beq.n	80058ea <vTaskPrioritySet+0x146>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800588e:	69bb      	ldr	r3, [r7, #24]
 8005890:	3304      	adds	r3, #4
 8005892:	4618      	mov	r0, r3
 8005894:	f7fd ffb0 	bl	80037f8 <uxListRemove>
 8005898:	4603      	mov	r3, r0
 800589a:	2b00      	cmp	r3, #0
 800589c:	d109      	bne.n	80058b2 <vTaskPrioritySet+0x10e>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 800589e:	2201      	movs	r2, #1
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	fa02 f303 	lsl.w	r3, r2, r3
 80058a6:	43da      	mvns	r2, r3
 80058a8:	4b1a      	ldr	r3, [pc, #104]	; (8005914 <vTaskPrioritySet+0x170>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4013      	ands	r3, r2
 80058ae:	4a19      	ldr	r2, [pc, #100]	; (8005914 <vTaskPrioritySet+0x170>)
 80058b0:	6013      	str	r3, [r2, #0]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 80058b2:	69bb      	ldr	r3, [r7, #24]
 80058b4:	4619      	mov	r1, r3
 80058b6:	2030      	movs	r0, #48	; 0x30
 80058b8:	f002 fc24 	bl	8008104 <prvTraceStoreEvent1>
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c0:	2201      	movs	r2, #1
 80058c2:	409a      	lsls	r2, r3
 80058c4:	4b13      	ldr	r3, [pc, #76]	; (8005914 <vTaskPrioritySet+0x170>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4313      	orrs	r3, r2
 80058ca:	4a12      	ldr	r2, [pc, #72]	; (8005914 <vTaskPrioritySet+0x170>)
 80058cc:	6013      	str	r3, [r2, #0]
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058d2:	4613      	mov	r3, r2
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	4413      	add	r3, r2
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	4a0d      	ldr	r2, [pc, #52]	; (8005910 <vTaskPrioritySet+0x16c>)
 80058dc:	441a      	add	r2, r3
 80058de:	69bb      	ldr	r3, [r7, #24]
 80058e0:	3304      	adds	r3, #4
 80058e2:	4619      	mov	r1, r3
 80058e4:	4610      	mov	r0, r2
 80058e6:	f7fd ff2a 	bl	800373e <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d007      	beq.n	8005900 <vTaskPrioritySet+0x15c>
				{
					taskYIELD_IF_USING_PREEMPTION();
 80058f0:	4b09      	ldr	r3, [pc, #36]	; (8005918 <vTaskPrioritySet+0x174>)
 80058f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058f6:	601a      	str	r2, [r3, #0]
 80058f8:	f3bf 8f4f 	dsb	sy
 80058fc:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 8005900:	f7fe f8d4 	bl	8003aac <vPortExitCritical>
	}
 8005904:	bf00      	nop
 8005906:	3720      	adds	r7, #32
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}
 800590c:	200141b0 	.word	0x200141b0
 8005910:	200141b4 	.word	0x200141b4
 8005914:	20014290 	.word	0x20014290
 8005918:	e000ed04 	.word	0xe000ed04

0800591c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800591c:	b580      	push	{r7, lr}
 800591e:	b084      	sub	sp, #16
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8005924:	f7fe f894 	bl	8003a50 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d102      	bne.n	8005934 <vTaskSuspend+0x18>
 800592e:	4b39      	ldr	r3, [pc, #228]	; (8005a14 <vTaskSuspend+0xf8>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	e000      	b.n	8005936 <vTaskSuspend+0x1a>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	4619      	mov	r1, r3
 800593c:	207b      	movs	r0, #123	; 0x7b
 800593e:	f002 fbe1 	bl	8008104 <prvTraceStoreEvent1>

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	3304      	adds	r3, #4
 8005946:	4618      	mov	r0, r3
 8005948:	f7fd ff56 	bl	80037f8 <uxListRemove>
 800594c:	4603      	mov	r3, r0
 800594e:	2b00      	cmp	r3, #0
 8005950:	d115      	bne.n	800597e <vTaskSuspend+0x62>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005956:	4930      	ldr	r1, [pc, #192]	; (8005a18 <vTaskSuspend+0xfc>)
 8005958:	4613      	mov	r3, r2
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	4413      	add	r3, r2
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	440b      	add	r3, r1
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d10a      	bne.n	800597e <vTaskSuspend+0x62>
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800596c:	2201      	movs	r2, #1
 800596e:	fa02 f303 	lsl.w	r3, r2, r3
 8005972:	43da      	mvns	r2, r3
 8005974:	4b29      	ldr	r3, [pc, #164]	; (8005a1c <vTaskSuspend+0x100>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4013      	ands	r3, r2
 800597a:	4a28      	ldr	r2, [pc, #160]	; (8005a1c <vTaskSuspend+0x100>)
 800597c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005982:	2b00      	cmp	r3, #0
 8005984:	d004      	beq.n	8005990 <vTaskSuspend+0x74>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	3318      	adds	r3, #24
 800598a:	4618      	mov	r0, r3
 800598c:	f7fd ff34 	bl	80037f8 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	3304      	adds	r3, #4
 8005994:	4619      	mov	r1, r3
 8005996:	4822      	ldr	r0, [pc, #136]	; (8005a20 <vTaskSuspend+0x104>)
 8005998:	f7fd fed1 	bl	800373e <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
 800599c:	f7fe f886 	bl	8003aac <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80059a0:	4b20      	ldr	r3, [pc, #128]	; (8005a24 <vTaskSuspend+0x108>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d005      	beq.n	80059b4 <vTaskSuspend+0x98>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80059a8:	f7fe f852 	bl	8003a50 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80059ac:	f000 fd60 	bl	8006470 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80059b0:	f7fe f87c 	bl	8003aac <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80059b4:	4b17      	ldr	r3, [pc, #92]	; (8005a14 <vTaskSuspend+0xf8>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	68fa      	ldr	r2, [r7, #12]
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d126      	bne.n	8005a0c <vTaskSuspend+0xf0>
		{
			if( xSchedulerRunning != pdFALSE )
 80059be:	4b19      	ldr	r3, [pc, #100]	; (8005a24 <vTaskSuspend+0x108>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d016      	beq.n	80059f4 <vTaskSuspend+0xd8>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80059c6:	4b18      	ldr	r3, [pc, #96]	; (8005a28 <vTaskSuspend+0x10c>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d009      	beq.n	80059e2 <vTaskSuspend+0xc6>
 80059ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d2:	f383 8811 	msr	BASEPRI, r3
 80059d6:	f3bf 8f6f 	isb	sy
 80059da:	f3bf 8f4f 	dsb	sy
 80059de:	60bb      	str	r3, [r7, #8]
 80059e0:	e7fe      	b.n	80059e0 <vTaskSuspend+0xc4>
				portYIELD_WITHIN_API();
 80059e2:	4b12      	ldr	r3, [pc, #72]	; (8005a2c <vTaskSuspend+0x110>)
 80059e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059e8:	601a      	str	r2, [r3, #0]
 80059ea:	f3bf 8f4f 	dsb	sy
 80059ee:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80059f2:	e00b      	b.n	8005a0c <vTaskSuspend+0xf0>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 80059f4:	4b0a      	ldr	r3, [pc, #40]	; (8005a20 <vTaskSuspend+0x104>)
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	4b0d      	ldr	r3, [pc, #52]	; (8005a30 <vTaskSuspend+0x114>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d103      	bne.n	8005a08 <vTaskSuspend+0xec>
					pxCurrentTCB = NULL;
 8005a00:	4b04      	ldr	r3, [pc, #16]	; (8005a14 <vTaskSuspend+0xf8>)
 8005a02:	2200      	movs	r2, #0
 8005a04:	601a      	str	r2, [r3, #0]
	}
 8005a06:	e001      	b.n	8005a0c <vTaskSuspend+0xf0>
					vTaskSwitchContext();
 8005a08:	f000 faae 	bl	8005f68 <vTaskSwitchContext>
	}
 8005a0c:	bf00      	nop
 8005a0e:	3710      	adds	r7, #16
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	200141b0 	.word	0x200141b0
 8005a18:	200141b4 	.word	0x200141b4
 8005a1c:	20014290 	.word	0x20014290
 8005a20:	20014274 	.word	0x20014274
 8005a24:	20014294 	.word	0x20014294
 8005a28:	200142b0 	.word	0x200142b0
 8005a2c:	e000ed04 	.word	0xe000ed04
 8005a30:	20014288 	.word	0x20014288

08005a34 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8005a34:	b480      	push	{r7}
 8005a36:	b087      	sub	sp, #28
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d109      	bne.n	8005a5e <prvTaskIsTaskSuspended+0x2a>
 8005a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a4e:	f383 8811 	msr	BASEPRI, r3
 8005a52:	f3bf 8f6f 	isb	sy
 8005a56:	f3bf 8f4f 	dsb	sy
 8005a5a:	60fb      	str	r3, [r7, #12]
 8005a5c:	e7fe      	b.n	8005a5c <prvTaskIsTaskSuspended+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	695b      	ldr	r3, [r3, #20]
 8005a62:	4a0f      	ldr	r2, [pc, #60]	; (8005aa0 <prvTaskIsTaskSuspended+0x6c>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d101      	bne.n	8005a6c <prvTaskIsTaskSuspended+0x38>
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e000      	b.n	8005a6e <prvTaskIsTaskSuspended+0x3a>
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d00f      	beq.n	8005a92 <prvTaskIsTaskSuspended+0x5e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a76:	4a0b      	ldr	r2, [pc, #44]	; (8005aa4 <prvTaskIsTaskSuspended+0x70>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d00a      	beq.n	8005a92 <prvTaskIsTaskSuspended+0x5e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d101      	bne.n	8005a88 <prvTaskIsTaskSuspended+0x54>
 8005a84:	2301      	movs	r3, #1
 8005a86:	e000      	b.n	8005a8a <prvTaskIsTaskSuspended+0x56>
 8005a88:	2300      	movs	r3, #0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d001      	beq.n	8005a92 <prvTaskIsTaskSuspended+0x5e>
				{
					xReturn = pdTRUE;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005a92:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8005a94:	4618      	mov	r0, r3
 8005a96:	371c      	adds	r7, #28
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr
 8005aa0:	20014274 	.word	0x20014274
 8005aa4:	20014248 	.word	0x20014248

08005aa8 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d109      	bne.n	8005ace <vTaskResume+0x26>
 8005aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005abe:	f383 8811 	msr	BASEPRI, r3
 8005ac2:	f3bf 8f6f 	isb	sy
 8005ac6:	f3bf 8f4f 	dsb	sy
 8005aca:	60bb      	str	r3, [r7, #8]
 8005acc:	e7fe      	b.n	8005acc <vTaskResume+0x24>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d043      	beq.n	8005b5c <vTaskResume+0xb4>
 8005ad4:	4b23      	ldr	r3, [pc, #140]	; (8005b64 <vTaskResume+0xbc>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	68fa      	ldr	r2, [r7, #12]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d03e      	beq.n	8005b5c <vTaskResume+0xb4>
		{
			taskENTER_CRITICAL();
 8005ade:	f7fd ffb7 	bl	8003a50 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8005ae2:	68f8      	ldr	r0, [r7, #12]
 8005ae4:	f7ff ffa6 	bl	8005a34 <prvTaskIsTaskSuspended>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d034      	beq.n	8005b58 <vTaskResume+0xb0>
				{
					traceTASK_RESUME( pxTCB );
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	4619      	mov	r1, r3
 8005af2:	207c      	movs	r0, #124	; 0x7c
 8005af4:	f002 fb06 	bl	8008104 <prvTraceStoreEvent1>

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	3304      	adds	r3, #4
 8005afc:	4618      	mov	r0, r3
 8005afe:	f7fd fe7b 	bl	80037f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	4619      	mov	r1, r3
 8005b06:	2030      	movs	r0, #48	; 0x30
 8005b08:	f002 fafc 	bl	8008104 <prvTraceStoreEvent1>
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b10:	2201      	movs	r2, #1
 8005b12:	409a      	lsls	r2, r3
 8005b14:	4b14      	ldr	r3, [pc, #80]	; (8005b68 <vTaskResume+0xc0>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	4a13      	ldr	r2, [pc, #76]	; (8005b68 <vTaskResume+0xc0>)
 8005b1c:	6013      	str	r3, [r2, #0]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b22:	4613      	mov	r3, r2
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	4413      	add	r3, r2
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	4a10      	ldr	r2, [pc, #64]	; (8005b6c <vTaskResume+0xc4>)
 8005b2c:	441a      	add	r2, r3
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	3304      	adds	r3, #4
 8005b32:	4619      	mov	r1, r3
 8005b34:	4610      	mov	r0, r2
 8005b36:	f7fd fe02 	bl	800373e <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b3e:	4b09      	ldr	r3, [pc, #36]	; (8005b64 <vTaskResume+0xbc>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d307      	bcc.n	8005b58 <vTaskResume+0xb0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8005b48:	4b09      	ldr	r3, [pc, #36]	; (8005b70 <vTaskResume+0xc8>)
 8005b4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b4e:	601a      	str	r2, [r3, #0]
 8005b50:	f3bf 8f4f 	dsb	sy
 8005b54:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8005b58:	f7fd ffa8 	bl	8003aac <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005b5c:	bf00      	nop
 8005b5e:	3710      	adds	r7, #16
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}
 8005b64:	200141b0 	.word	0x200141b0
 8005b68:	20014290 	.word	0x20014290
 8005b6c:	200141b4 	.word	0x200141b4
 8005b70:	e000ed04 	.word	0xe000ed04

08005b74 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b086      	sub	sp, #24
 8005b78:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8005b7a:	4b1e      	ldr	r3, [pc, #120]	; (8005bf4 <vTaskStartScheduler+0x80>)
 8005b7c:	9301      	str	r3, [sp, #4]
 8005b7e:	2300      	movs	r3, #0
 8005b80:	9300      	str	r3, [sp, #0]
 8005b82:	2300      	movs	r3, #0
 8005b84:	2282      	movs	r2, #130	; 0x82
 8005b86:	491c      	ldr	r1, [pc, #112]	; (8005bf8 <vTaskStartScheduler+0x84>)
 8005b88:	481c      	ldr	r0, [pc, #112]	; (8005bfc <vTaskStartScheduler+0x88>)
 8005b8a:	f7ff fb41 	bl	8005210 <xTaskCreate>
 8005b8e:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d102      	bne.n	8005b9c <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8005b96:	f000 fe4d 	bl	8006834 <xTimerCreateTimerTask>
 8005b9a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d115      	bne.n	8005bce <vTaskStartScheduler+0x5a>
 8005ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba6:	f383 8811 	msr	BASEPRI, r3
 8005baa:	f3bf 8f6f 	isb	sy
 8005bae:	f3bf 8f4f 	dsb	sy
 8005bb2:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005bb4:	4b12      	ldr	r3, [pc, #72]	; (8005c00 <vTaskStartScheduler+0x8c>)
 8005bb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005bba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005bbc:	4b11      	ldr	r3, [pc, #68]	; (8005c04 <vTaskStartScheduler+0x90>)
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005bc2:	4b11      	ldr	r3, [pc, #68]	; (8005c08 <vTaskStartScheduler+0x94>)
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005bc8:	f7fd feb6 	bl	8003938 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005bcc:	e00d      	b.n	8005bea <vTaskStartScheduler+0x76>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bd4:	d109      	bne.n	8005bea <vTaskStartScheduler+0x76>
 8005bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bda:	f383 8811 	msr	BASEPRI, r3
 8005bde:	f3bf 8f6f 	isb	sy
 8005be2:	f3bf 8f4f 	dsb	sy
 8005be6:	607b      	str	r3, [r7, #4]
 8005be8:	e7fe      	b.n	8005be8 <vTaskStartScheduler+0x74>
}
 8005bea:	bf00      	nop
 8005bec:	3710      	adds	r7, #16
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	200142ac 	.word	0x200142ac
 8005bf8:	080099f4 	.word	0x080099f4
 8005bfc:	08006325 	.word	0x08006325
 8005c00:	200142a8 	.word	0x200142a8
 8005c04:	20014294 	.word	0x20014294
 8005c08:	2001428c 	.word	0x2001428c

08005c0c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005c10:	4b04      	ldr	r3, [pc, #16]	; (8005c24 <vTaskSuspendAll+0x18>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	3301      	adds	r3, #1
 8005c16:	4a03      	ldr	r2, [pc, #12]	; (8005c24 <vTaskSuspendAll+0x18>)
 8005c18:	6013      	str	r3, [r2, #0]
}
 8005c1a:	bf00      	nop
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr
 8005c24:	200142b0 	.word	0x200142b0

08005c28 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005c32:	2300      	movs	r3, #0
 8005c34:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005c36:	4b43      	ldr	r3, [pc, #268]	; (8005d44 <xTaskResumeAll+0x11c>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d109      	bne.n	8005c52 <xTaskResumeAll+0x2a>
 8005c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c42:	f383 8811 	msr	BASEPRI, r3
 8005c46:	f3bf 8f6f 	isb	sy
 8005c4a:	f3bf 8f4f 	dsb	sy
 8005c4e:	603b      	str	r3, [r7, #0]
 8005c50:	e7fe      	b.n	8005c50 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005c52:	f7fd fefd 	bl	8003a50 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005c56:	4b3b      	ldr	r3, [pc, #236]	; (8005d44 <xTaskResumeAll+0x11c>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	3b01      	subs	r3, #1
 8005c5c:	4a39      	ldr	r2, [pc, #228]	; (8005d44 <xTaskResumeAll+0x11c>)
 8005c5e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c60:	4b38      	ldr	r3, [pc, #224]	; (8005d44 <xTaskResumeAll+0x11c>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d166      	bne.n	8005d36 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005c68:	4b37      	ldr	r3, [pc, #220]	; (8005d48 <xTaskResumeAll+0x120>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d062      	beq.n	8005d36 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c70:	e033      	b.n	8005cda <xTaskResumeAll+0xb2>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005c72:	4b36      	ldr	r3, [pc, #216]	; (8005d4c <xTaskResumeAll+0x124>)
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	3318      	adds	r3, #24
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f7fd fdba 	bl	80037f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	3304      	adds	r3, #4
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f7fd fdb5 	bl	80037f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	4619      	mov	r1, r3
 8005c92:	2030      	movs	r0, #48	; 0x30
 8005c94:	f002 fa36 	bl	8008104 <prvTraceStoreEvent1>
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	409a      	lsls	r2, r3
 8005ca0:	4b2b      	ldr	r3, [pc, #172]	; (8005d50 <xTaskResumeAll+0x128>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	4a2a      	ldr	r2, [pc, #168]	; (8005d50 <xTaskResumeAll+0x128>)
 8005ca8:	6013      	str	r3, [r2, #0]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cae:	4613      	mov	r3, r2
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	4413      	add	r3, r2
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	4a27      	ldr	r2, [pc, #156]	; (8005d54 <xTaskResumeAll+0x12c>)
 8005cb8:	441a      	add	r2, r3
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	3304      	adds	r3, #4
 8005cbe:	4619      	mov	r1, r3
 8005cc0:	4610      	mov	r0, r2
 8005cc2:	f7fd fd3c 	bl	800373e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cca:	4b23      	ldr	r3, [pc, #140]	; (8005d58 <xTaskResumeAll+0x130>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d302      	bcc.n	8005cda <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8005cd4:	4b21      	ldr	r3, [pc, #132]	; (8005d5c <xTaskResumeAll+0x134>)
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005cda:	4b1c      	ldr	r3, [pc, #112]	; (8005d4c <xTaskResumeAll+0x124>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d1c7      	bne.n	8005c72 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d001      	beq.n	8005cec <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005ce8:	f000 fbc2 	bl	8006470 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005cec:	4b1c      	ldr	r3, [pc, #112]	; (8005d60 <xTaskResumeAll+0x138>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d010      	beq.n	8005d1a <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005cf8:	f000 f852 	bl	8005da0 <xTaskIncrementTick>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d002      	beq.n	8005d08 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8005d02:	4b16      	ldr	r3, [pc, #88]	; (8005d5c <xTaskResumeAll+0x134>)
 8005d04:	2201      	movs	r2, #1
 8005d06:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	3b01      	subs	r3, #1
 8005d0c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d1f1      	bne.n	8005cf8 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8005d14:	4b12      	ldr	r3, [pc, #72]	; (8005d60 <xTaskResumeAll+0x138>)
 8005d16:	2200      	movs	r2, #0
 8005d18:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005d1a:	4b10      	ldr	r3, [pc, #64]	; (8005d5c <xTaskResumeAll+0x134>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d009      	beq.n	8005d36 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005d22:	2301      	movs	r3, #1
 8005d24:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005d26:	4b0f      	ldr	r3, [pc, #60]	; (8005d64 <xTaskResumeAll+0x13c>)
 8005d28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d2c:	601a      	str	r2, [r3, #0]
 8005d2e:	f3bf 8f4f 	dsb	sy
 8005d32:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005d36:	f7fd feb9 	bl	8003aac <vPortExitCritical>

	return xAlreadyYielded;
 8005d3a:	68bb      	ldr	r3, [r7, #8]
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3710      	adds	r7, #16
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	200142b0 	.word	0x200142b0
 8005d48:	20014288 	.word	0x20014288
 8005d4c:	20014248 	.word	0x20014248
 8005d50:	20014290 	.word	0x20014290
 8005d54:	200141b4 	.word	0x200141b4
 8005d58:	200141b0 	.word	0x200141b0
 8005d5c:	2001429c 	.word	0x2001429c
 8005d60:	20014298 	.word	0x20014298
 8005d64:	e000ed04 	.word	0xe000ed04

08005d68 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005d6e:	4b05      	ldr	r3, [pc, #20]	; (8005d84 <xTaskGetTickCount+0x1c>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005d74:	687b      	ldr	r3, [r7, #4]
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	370c      	adds	r7, #12
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr
 8005d82:	bf00      	nop
 8005d84:	2001428c 	.word	0x2001428c

08005d88 <uxTaskGetNumberOfTasks>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8005d88:	b480      	push	{r7}
 8005d8a:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
 8005d8c:	4b03      	ldr	r3, [pc, #12]	; (8005d9c <uxTaskGetNumberOfTasks+0x14>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop
 8005d9c:	20014288 	.word	0x20014288

08005da0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b086      	sub	sp, #24
 8005da4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005da6:	2300      	movs	r3, #0
 8005da8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
 8005daa:	4b63      	ldr	r3, [pc, #396]	; (8005f38 <xTaskIncrementTick+0x198>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d003      	beq.n	8005dba <xTaskIncrementTick+0x1a>
 8005db2:	4b62      	ldr	r3, [pc, #392]	; (8005f3c <xTaskIncrementTick+0x19c>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d104      	bne.n	8005dc4 <xTaskIncrementTick+0x24>
 8005dba:	4b61      	ldr	r3, [pc, #388]	; (8005f40 <xTaskIncrementTick+0x1a0>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	4a5f      	ldr	r2, [pc, #380]	; (8005f40 <xTaskIncrementTick+0x1a0>)
 8005dc2:	6013      	str	r3, [r2, #0]
 8005dc4:	4b5c      	ldr	r3, [pc, #368]	; (8005f38 <xTaskIncrementTick+0x198>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d106      	bne.n	8005dda <xTaskIncrementTick+0x3a>
 8005dcc:	4b5d      	ldr	r3, [pc, #372]	; (8005f44 <xTaskIncrementTick+0x1a4>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	4619      	mov	r1, r3
 8005dd4:	2031      	movs	r0, #49	; 0x31
 8005dd6:	f002 f995 	bl	8008104 <prvTraceStoreEvent1>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005dda:	4b57      	ldr	r3, [pc, #348]	; (8005f38 <xTaskIncrementTick+0x198>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	f040 8097 	bne.w	8005f12 <xTaskIncrementTick+0x172>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8005de4:	4b57      	ldr	r3, [pc, #348]	; (8005f44 <xTaskIncrementTick+0x1a4>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	3301      	adds	r3, #1
 8005dea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005dec:	4a55      	ldr	r2, [pc, #340]	; (8005f44 <xTaskIncrementTick+0x1a4>)
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d11f      	bne.n	8005e38 <xTaskIncrementTick+0x98>
		{
			taskSWITCH_DELAYED_LISTS();
 8005df8:	4b53      	ldr	r3, [pc, #332]	; (8005f48 <xTaskIncrementTick+0x1a8>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d009      	beq.n	8005e16 <xTaskIncrementTick+0x76>
 8005e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e06:	f383 8811 	msr	BASEPRI, r3
 8005e0a:	f3bf 8f6f 	isb	sy
 8005e0e:	f3bf 8f4f 	dsb	sy
 8005e12:	603b      	str	r3, [r7, #0]
 8005e14:	e7fe      	b.n	8005e14 <xTaskIncrementTick+0x74>
 8005e16:	4b4c      	ldr	r3, [pc, #304]	; (8005f48 <xTaskIncrementTick+0x1a8>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	60fb      	str	r3, [r7, #12]
 8005e1c:	4b4b      	ldr	r3, [pc, #300]	; (8005f4c <xTaskIncrementTick+0x1ac>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a49      	ldr	r2, [pc, #292]	; (8005f48 <xTaskIncrementTick+0x1a8>)
 8005e22:	6013      	str	r3, [r2, #0]
 8005e24:	4a49      	ldr	r2, [pc, #292]	; (8005f4c <xTaskIncrementTick+0x1ac>)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6013      	str	r3, [r2, #0]
 8005e2a:	4b49      	ldr	r3, [pc, #292]	; (8005f50 <xTaskIncrementTick+0x1b0>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	3301      	adds	r3, #1
 8005e30:	4a47      	ldr	r2, [pc, #284]	; (8005f50 <xTaskIncrementTick+0x1b0>)
 8005e32:	6013      	str	r3, [r2, #0]
 8005e34:	f000 fb1c 	bl	8006470 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005e38:	4b46      	ldr	r3, [pc, #280]	; (8005f54 <xTaskIncrementTick+0x1b4>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	693a      	ldr	r2, [r7, #16]
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d352      	bcc.n	8005ee8 <xTaskIncrementTick+0x148>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e42:	4b41      	ldr	r3, [pc, #260]	; (8005f48 <xTaskIncrementTick+0x1a8>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d101      	bne.n	8005e50 <xTaskIncrementTick+0xb0>
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	e000      	b.n	8005e52 <xTaskIncrementTick+0xb2>
 8005e50:	2300      	movs	r3, #0
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d004      	beq.n	8005e60 <xTaskIncrementTick+0xc0>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e56:	4b3f      	ldr	r3, [pc, #252]	; (8005f54 <xTaskIncrementTick+0x1b4>)
 8005e58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e5c:	601a      	str	r2, [r3, #0]
					break;
 8005e5e:	e043      	b.n	8005ee8 <xTaskIncrementTick+0x148>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005e60:	4b39      	ldr	r3, [pc, #228]	; (8005f48 <xTaskIncrementTick+0x1a8>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005e70:	693a      	ldr	r2, [r7, #16]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d203      	bcs.n	8005e80 <xTaskIncrementTick+0xe0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005e78:	4a36      	ldr	r2, [pc, #216]	; (8005f54 <xTaskIncrementTick+0x1b4>)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6013      	str	r3, [r2, #0]
						break;
 8005e7e:	e033      	b.n	8005ee8 <xTaskIncrementTick+0x148>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	3304      	adds	r3, #4
 8005e84:	4618      	mov	r0, r3
 8005e86:	f7fd fcb7 	bl	80037f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d004      	beq.n	8005e9c <xTaskIncrementTick+0xfc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	3318      	adds	r3, #24
 8005e96:	4618      	mov	r0, r3
 8005e98:	f7fd fcae 	bl	80037f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	2030      	movs	r0, #48	; 0x30
 8005ea2:	f002 f92f 	bl	8008104 <prvTraceStoreEvent1>
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eaa:	2201      	movs	r2, #1
 8005eac:	409a      	lsls	r2, r3
 8005eae:	4b2a      	ldr	r3, [pc, #168]	; (8005f58 <xTaskIncrementTick+0x1b8>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	4a28      	ldr	r2, [pc, #160]	; (8005f58 <xTaskIncrementTick+0x1b8>)
 8005eb6:	6013      	str	r3, [r2, #0]
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ebc:	4613      	mov	r3, r2
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	4413      	add	r3, r2
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	4a25      	ldr	r2, [pc, #148]	; (8005f5c <xTaskIncrementTick+0x1bc>)
 8005ec6:	441a      	add	r2, r3
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	3304      	adds	r3, #4
 8005ecc:	4619      	mov	r1, r3
 8005ece:	4610      	mov	r0, r2
 8005ed0:	f7fd fc35 	bl	800373e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ed8:	4b21      	ldr	r3, [pc, #132]	; (8005f60 <xTaskIncrementTick+0x1c0>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d3af      	bcc.n	8005e42 <xTaskIncrementTick+0xa2>
						{
							xSwitchRequired = pdTRUE;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ee6:	e7ac      	b.n	8005e42 <xTaskIncrementTick+0xa2>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005ee8:	4b1d      	ldr	r3, [pc, #116]	; (8005f60 <xTaskIncrementTick+0x1c0>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eee:	491b      	ldr	r1, [pc, #108]	; (8005f5c <xTaskIncrementTick+0x1bc>)
 8005ef0:	4613      	mov	r3, r2
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	4413      	add	r3, r2
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	440b      	add	r3, r1
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d901      	bls.n	8005f04 <xTaskIncrementTick+0x164>
			{
				xSwitchRequired = pdTRUE;
 8005f00:	2301      	movs	r3, #1
 8005f02:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 8005f04:	4b0d      	ldr	r3, [pc, #52]	; (8005f3c <xTaskIncrementTick+0x19c>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d109      	bne.n	8005f20 <xTaskIncrementTick+0x180>
			{
				vApplicationTickHook();
 8005f0c:	f002 ff0e 	bl	8008d2c <vApplicationTickHook>
 8005f10:	e006      	b.n	8005f20 <xTaskIncrementTick+0x180>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005f12:	4b0a      	ldr	r3, [pc, #40]	; (8005f3c <xTaskIncrementTick+0x19c>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	3301      	adds	r3, #1
 8005f18:	4a08      	ldr	r2, [pc, #32]	; (8005f3c <xTaskIncrementTick+0x19c>)
 8005f1a:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8005f1c:	f002 ff06 	bl	8008d2c <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005f20:	4b10      	ldr	r3, [pc, #64]	; (8005f64 <xTaskIncrementTick+0x1c4>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d001      	beq.n	8005f2c <xTaskIncrementTick+0x18c>
		{
			xSwitchRequired = pdTRUE;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005f2c:	697b      	ldr	r3, [r7, #20]
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3718      	adds	r7, #24
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	200142b0 	.word	0x200142b0
 8005f3c:	20014298 	.word	0x20014298
 8005f40:	200149d0 	.word	0x200149d0
 8005f44:	2001428c 	.word	0x2001428c
 8005f48:	20014240 	.word	0x20014240
 8005f4c:	20014244 	.word	0x20014244
 8005f50:	200142a0 	.word	0x200142a0
 8005f54:	200142a8 	.word	0x200142a8
 8005f58:	20014290 	.word	0x20014290
 8005f5c:	200141b4 	.word	0x200141b4
 8005f60:	200141b0 	.word	0x200141b0
 8005f64:	2001429c 	.word	0x2001429c

08005f68 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b088      	sub	sp, #32
 8005f6c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005f6e:	4b42      	ldr	r3, [pc, #264]	; (8006078 <vTaskSwitchContext+0x110>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d003      	beq.n	8005f7e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005f76:	4b41      	ldr	r3, [pc, #260]	; (800607c <vTaskSwitchContext+0x114>)
 8005f78:	2201      	movs	r2, #1
 8005f7a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005f7c:	e077      	b.n	800606e <vTaskSwitchContext+0x106>
		xYieldPending = pdFALSE;
 8005f7e:	4b3f      	ldr	r3, [pc, #252]	; (800607c <vTaskSwitchContext+0x114>)
 8005f80:	2200      	movs	r2, #0
 8005f82:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8005f84:	4b3e      	ldr	r3, [pc, #248]	; (8006080 <vTaskSwitchContext+0x118>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f8a:	61fb      	str	r3, [r7, #28]
 8005f8c:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8005f90:	61bb      	str	r3, [r7, #24]
 8005f92:	69fb      	ldr	r3, [r7, #28]
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d111      	bne.n	8005fc0 <vTaskSwitchContext+0x58>
 8005f9c:	69fb      	ldr	r3, [r7, #28]
 8005f9e:	3304      	adds	r3, #4
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	69bb      	ldr	r3, [r7, #24]
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d10b      	bne.n	8005fc0 <vTaskSwitchContext+0x58>
 8005fa8:	69fb      	ldr	r3, [r7, #28]
 8005faa:	3308      	adds	r3, #8
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	69bb      	ldr	r3, [r7, #24]
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d105      	bne.n	8005fc0 <vTaskSwitchContext+0x58>
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	330c      	adds	r3, #12
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	69bb      	ldr	r3, [r7, #24]
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d008      	beq.n	8005fd2 <vTaskSwitchContext+0x6a>
 8005fc0:	4b2f      	ldr	r3, [pc, #188]	; (8006080 <vTaskSwitchContext+0x118>)
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	4b2e      	ldr	r3, [pc, #184]	; (8006080 <vTaskSwitchContext+0x118>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	3334      	adds	r3, #52	; 0x34
 8005fca:	4619      	mov	r1, r3
 8005fcc:	4610      	mov	r0, r2
 8005fce:	f002 ffb1 	bl	8008f34 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005fd2:	4b2c      	ldr	r3, [pc, #176]	; (8006084 <vTaskSwitchContext+0x11c>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	fab3 f383 	clz	r3, r3
 8005fde:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005fe0:	7afb      	ldrb	r3, [r7, #11]
 8005fe2:	f1c3 031f 	rsb	r3, r3, #31
 8005fe6:	617b      	str	r3, [r7, #20]
 8005fe8:	4927      	ldr	r1, [pc, #156]	; (8006088 <vTaskSwitchContext+0x120>)
 8005fea:	697a      	ldr	r2, [r7, #20]
 8005fec:	4613      	mov	r3, r2
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	4413      	add	r3, r2
 8005ff2:	009b      	lsls	r3, r3, #2
 8005ff4:	440b      	add	r3, r1
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d109      	bne.n	8006010 <vTaskSwitchContext+0xa8>
	__asm volatile
 8005ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006000:	f383 8811 	msr	BASEPRI, r3
 8006004:	f3bf 8f6f 	isb	sy
 8006008:	f3bf 8f4f 	dsb	sy
 800600c:	607b      	str	r3, [r7, #4]
 800600e:	e7fe      	b.n	800600e <vTaskSwitchContext+0xa6>
 8006010:	697a      	ldr	r2, [r7, #20]
 8006012:	4613      	mov	r3, r2
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	4413      	add	r3, r2
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	4a1b      	ldr	r2, [pc, #108]	; (8006088 <vTaskSwitchContext+0x120>)
 800601c:	4413      	add	r3, r2
 800601e:	613b      	str	r3, [r7, #16]
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	685a      	ldr	r2, [r3, #4]
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	605a      	str	r2, [r3, #4]
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	685a      	ldr	r2, [r3, #4]
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	3308      	adds	r3, #8
 8006032:	429a      	cmp	r2, r3
 8006034:	d104      	bne.n	8006040 <vTaskSwitchContext+0xd8>
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	685a      	ldr	r2, [r3, #4]
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	605a      	str	r2, [r3, #4]
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	4a0e      	ldr	r2, [pc, #56]	; (8006080 <vTaskSwitchContext+0x118>)
 8006048:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 800604a:	4b0d      	ldr	r3, [pc, #52]	; (8006080 <vTaskSwitchContext+0x118>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4618      	mov	r0, r3
 8006050:	f001 fd42 	bl	8007ad8 <prvIsNewTCB>
 8006054:	4603      	mov	r3, r0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d009      	beq.n	800606e <vTaskSwitchContext+0x106>
 800605a:	4b09      	ldr	r3, [pc, #36]	; (8006080 <vTaskSwitchContext+0x118>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4619      	mov	r1, r3
 8006060:	4b07      	ldr	r3, [pc, #28]	; (8006080 <vTaskSwitchContext+0x118>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006066:	461a      	mov	r2, r3
 8006068:	2037      	movs	r0, #55	; 0x37
 800606a:	f002 f897 	bl	800819c <prvTraceStoreEvent2>
}
 800606e:	bf00      	nop
 8006070:	3720      	adds	r7, #32
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop
 8006078:	200142b0 	.word	0x200142b0
 800607c:	2001429c 	.word	0x2001429c
 8006080:	200141b0 	.word	0x200141b0
 8006084:	20014290 	.word	0x20014290
 8006088:	200141b4 	.word	0x200141b4

0800608c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d109      	bne.n	80060b0 <vTaskPlaceOnEventList+0x24>
 800609c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a0:	f383 8811 	msr	BASEPRI, r3
 80060a4:	f3bf 8f6f 	isb	sy
 80060a8:	f3bf 8f4f 	dsb	sy
 80060ac:	60fb      	str	r3, [r7, #12]
 80060ae:	e7fe      	b.n	80060ae <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80060b0:	4b07      	ldr	r3, [pc, #28]	; (80060d0 <vTaskPlaceOnEventList+0x44>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	3318      	adds	r3, #24
 80060b6:	4619      	mov	r1, r3
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f7fd fb64 	bl	8003786 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80060be:	2101      	movs	r1, #1
 80060c0:	6838      	ldr	r0, [r7, #0]
 80060c2:	f000 fb51 	bl	8006768 <prvAddCurrentTaskToDelayedList>
}
 80060c6:	bf00      	nop
 80060c8:	3710      	adds	r7, #16
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	200141b0 	.word	0x200141b0

080060d4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b086      	sub	sp, #24
 80060d8:	af00      	add	r7, sp, #0
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	60b9      	str	r1, [r7, #8]
 80060de:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d109      	bne.n	80060fa <vTaskPlaceOnEventListRestricted+0x26>
 80060e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ea:	f383 8811 	msr	BASEPRI, r3
 80060ee:	f3bf 8f6f 	isb	sy
 80060f2:	f3bf 8f4f 	dsb	sy
 80060f6:	617b      	str	r3, [r7, #20]
 80060f8:	e7fe      	b.n	80060f8 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80060fa:	4b0e      	ldr	r3, [pc, #56]	; (8006134 <vTaskPlaceOnEventListRestricted+0x60>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	3318      	adds	r3, #24
 8006100:	4619      	mov	r1, r3
 8006102:	68f8      	ldr	r0, [r7, #12]
 8006104:	f7fd fb1b 	bl	800373e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d002      	beq.n	8006114 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800610e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006112:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8006114:	4b08      	ldr	r3, [pc, #32]	; (8006138 <vTaskPlaceOnEventListRestricted+0x64>)
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	4413      	add	r3, r2
 800611c:	4619      	mov	r1, r3
 800611e:	2079      	movs	r0, #121	; 0x79
 8006120:	f001 fff0 	bl	8008104 <prvTraceStoreEvent1>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006124:	6879      	ldr	r1, [r7, #4]
 8006126:	68b8      	ldr	r0, [r7, #8]
 8006128:	f000 fb1e 	bl	8006768 <prvAddCurrentTaskToDelayedList>
	}
 800612c:	bf00      	nop
 800612e:	3718      	adds	r7, #24
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}
 8006134:	200141b0 	.word	0x200141b0
 8006138:	2001428c 	.word	0x2001428c

0800613c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b086      	sub	sp, #24
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	68db      	ldr	r3, [r3, #12]
 800614a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d109      	bne.n	8006166 <xTaskRemoveFromEventList+0x2a>
 8006152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006156:	f383 8811 	msr	BASEPRI, r3
 800615a:	f3bf 8f6f 	isb	sy
 800615e:	f3bf 8f4f 	dsb	sy
 8006162:	60fb      	str	r3, [r7, #12]
 8006164:	e7fe      	b.n	8006164 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	3318      	adds	r3, #24
 800616a:	4618      	mov	r0, r3
 800616c:	f7fd fb44 	bl	80037f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006170:	4b1f      	ldr	r3, [pc, #124]	; (80061f0 <xTaskRemoveFromEventList+0xb4>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d121      	bne.n	80061bc <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	3304      	adds	r3, #4
 800617c:	4618      	mov	r0, r3
 800617e:	f7fd fb3b 	bl	80037f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	4619      	mov	r1, r3
 8006186:	2030      	movs	r0, #48	; 0x30
 8006188:	f001 ffbc 	bl	8008104 <prvTraceStoreEvent1>
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006190:	2201      	movs	r2, #1
 8006192:	409a      	lsls	r2, r3
 8006194:	4b17      	ldr	r3, [pc, #92]	; (80061f4 <xTaskRemoveFromEventList+0xb8>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4313      	orrs	r3, r2
 800619a:	4a16      	ldr	r2, [pc, #88]	; (80061f4 <xTaskRemoveFromEventList+0xb8>)
 800619c:	6013      	str	r3, [r2, #0]
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061a2:	4613      	mov	r3, r2
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	4413      	add	r3, r2
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	4a13      	ldr	r2, [pc, #76]	; (80061f8 <xTaskRemoveFromEventList+0xbc>)
 80061ac:	441a      	add	r2, r3
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	3304      	adds	r3, #4
 80061b2:	4619      	mov	r1, r3
 80061b4:	4610      	mov	r0, r2
 80061b6:	f7fd fac2 	bl	800373e <vListInsertEnd>
 80061ba:	e005      	b.n	80061c8 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	3318      	adds	r3, #24
 80061c0:	4619      	mov	r1, r3
 80061c2:	480e      	ldr	r0, [pc, #56]	; (80061fc <xTaskRemoveFromEventList+0xc0>)
 80061c4:	f7fd fabb 	bl	800373e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061cc:	4b0c      	ldr	r3, [pc, #48]	; (8006200 <xTaskRemoveFromEventList+0xc4>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d905      	bls.n	80061e2 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80061d6:	2301      	movs	r3, #1
 80061d8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80061da:	4b0a      	ldr	r3, [pc, #40]	; (8006204 <xTaskRemoveFromEventList+0xc8>)
 80061dc:	2201      	movs	r2, #1
 80061de:	601a      	str	r2, [r3, #0]
 80061e0:	e001      	b.n	80061e6 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 80061e2:	2300      	movs	r3, #0
 80061e4:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80061e6:	697b      	ldr	r3, [r7, #20]
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3718      	adds	r7, #24
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}
 80061f0:	200142b0 	.word	0x200142b0
 80061f4:	20014290 	.word	0x20014290
 80061f8:	200141b4 	.word	0x200141b4
 80061fc:	20014248 	.word	0x20014248
 8006200:	200141b0 	.word	0x200141b0
 8006204:	2001429c 	.word	0x2001429c

08006208 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006208:	b480      	push	{r7}
 800620a:	b085      	sub	sp, #20
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d109      	bne.n	800622a <vTaskSetTimeOutState+0x22>
 8006216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800621a:	f383 8811 	msr	BASEPRI, r3
 800621e:	f3bf 8f6f 	isb	sy
 8006222:	f3bf 8f4f 	dsb	sy
 8006226:	60fb      	str	r3, [r7, #12]
 8006228:	e7fe      	b.n	8006228 <vTaskSetTimeOutState+0x20>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800622a:	4b07      	ldr	r3, [pc, #28]	; (8006248 <vTaskSetTimeOutState+0x40>)
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006232:	4b06      	ldr	r3, [pc, #24]	; (800624c <vTaskSetTimeOutState+0x44>)
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	605a      	str	r2, [r3, #4]
}
 800623a:	bf00      	nop
 800623c:	3714      	adds	r7, #20
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr
 8006246:	bf00      	nop
 8006248:	200142a0 	.word	0x200142a0
 800624c:	2001428c 	.word	0x2001428c

08006250 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b086      	sub	sp, #24
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d109      	bne.n	8006274 <xTaskCheckForTimeOut+0x24>
 8006260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006264:	f383 8811 	msr	BASEPRI, r3
 8006268:	f3bf 8f6f 	isb	sy
 800626c:	f3bf 8f4f 	dsb	sy
 8006270:	60fb      	str	r3, [r7, #12]
 8006272:	e7fe      	b.n	8006272 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d109      	bne.n	800628e <xTaskCheckForTimeOut+0x3e>
 800627a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800627e:	f383 8811 	msr	BASEPRI, r3
 8006282:	f3bf 8f6f 	isb	sy
 8006286:	f3bf 8f4f 	dsb	sy
 800628a:	60bb      	str	r3, [r7, #8]
 800628c:	e7fe      	b.n	800628c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800628e:	f7fd fbdf 	bl	8003a50 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006292:	4b1c      	ldr	r3, [pc, #112]	; (8006304 <xTaskCheckForTimeOut+0xb4>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	613b      	str	r3, [r7, #16]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062a0:	d102      	bne.n	80062a8 <xTaskCheckForTimeOut+0x58>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80062a2:	2300      	movs	r3, #0
 80062a4:	617b      	str	r3, [r7, #20]
 80062a6:	e026      	b.n	80062f6 <xTaskCheckForTimeOut+0xa6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	4b16      	ldr	r3, [pc, #88]	; (8006308 <xTaskCheckForTimeOut+0xb8>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d007      	beq.n	80062c4 <xTaskCheckForTimeOut+0x74>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	685a      	ldr	r2, [r3, #4]
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	429a      	cmp	r2, r3
 80062bc:	d802      	bhi.n	80062c4 <xTaskCheckForTimeOut+0x74>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80062be:	2301      	movs	r3, #1
 80062c0:	617b      	str	r3, [r7, #20]
 80062c2:	e018      	b.n	80062f6 <xTaskCheckForTimeOut+0xa6>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	693a      	ldr	r2, [r7, #16]
 80062ca:	1ad2      	subs	r2, r2, r3
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d20e      	bcs.n	80062f2 <xTaskCheckForTimeOut+0xa2>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6859      	ldr	r1, [r3, #4]
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	1acb      	subs	r3, r1, r3
 80062e0:	441a      	add	r2, r3
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f7ff ff8e 	bl	8006208 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 80062ec:	2300      	movs	r3, #0
 80062ee:	617b      	str	r3, [r7, #20]
 80062f0:	e001      	b.n	80062f6 <xTaskCheckForTimeOut+0xa6>
		}
		else
		{
			xReturn = pdTRUE;
 80062f2:	2301      	movs	r3, #1
 80062f4:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 80062f6:	f7fd fbd9 	bl	8003aac <vPortExitCritical>

	return xReturn;
 80062fa:	697b      	ldr	r3, [r7, #20]
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3718      	adds	r7, #24
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}
 8006304:	2001428c 	.word	0x2001428c
 8006308:	200142a0 	.word	0x200142a0

0800630c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800630c:	b480      	push	{r7}
 800630e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006310:	4b03      	ldr	r3, [pc, #12]	; (8006320 <vTaskMissedYield+0x14>)
 8006312:	2201      	movs	r2, #1
 8006314:	601a      	str	r2, [r3, #0]
}
 8006316:	bf00      	nop
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr
 8006320:	2001429c 	.word	0x2001429c

08006324 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b082      	sub	sp, #8
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800632c:	f000 f854 	bl	80063d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006330:	4b07      	ldr	r3, [pc, #28]	; (8006350 <prvIdleTask+0x2c>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	2b01      	cmp	r3, #1
 8006336:	d907      	bls.n	8006348 <prvIdleTask+0x24>
			{
				taskYIELD();
 8006338:	4b06      	ldr	r3, [pc, #24]	; (8006354 <prvIdleTask+0x30>)
 800633a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800633e:	601a      	str	r2, [r3, #0]
 8006340:	f3bf 8f4f 	dsb	sy
 8006344:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8006348:	f002 fded 	bl	8008f26 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800634c:	e7ee      	b.n	800632c <prvIdleTask+0x8>
 800634e:	bf00      	nop
 8006350:	200141b4 	.word	0x200141b4
 8006354:	e000ed04 	.word	0xe000ed04

08006358 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b082      	sub	sp, #8
 800635c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800635e:	2300      	movs	r3, #0
 8006360:	607b      	str	r3, [r7, #4]
 8006362:	e00c      	b.n	800637e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	4613      	mov	r3, r2
 8006368:	009b      	lsls	r3, r3, #2
 800636a:	4413      	add	r3, r2
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	4a12      	ldr	r2, [pc, #72]	; (80063b8 <prvInitialiseTaskLists+0x60>)
 8006370:	4413      	add	r3, r2
 8006372:	4618      	mov	r0, r3
 8006374:	f7fd f9b6 	bl	80036e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	3301      	adds	r3, #1
 800637c:	607b      	str	r3, [r7, #4]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2b04      	cmp	r3, #4
 8006382:	d9ef      	bls.n	8006364 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006384:	480d      	ldr	r0, [pc, #52]	; (80063bc <prvInitialiseTaskLists+0x64>)
 8006386:	f7fd f9ad 	bl	80036e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800638a:	480d      	ldr	r0, [pc, #52]	; (80063c0 <prvInitialiseTaskLists+0x68>)
 800638c:	f7fd f9aa 	bl	80036e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006390:	480c      	ldr	r0, [pc, #48]	; (80063c4 <prvInitialiseTaskLists+0x6c>)
 8006392:	f7fd f9a7 	bl	80036e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006396:	480c      	ldr	r0, [pc, #48]	; (80063c8 <prvInitialiseTaskLists+0x70>)
 8006398:	f7fd f9a4 	bl	80036e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800639c:	480b      	ldr	r0, [pc, #44]	; (80063cc <prvInitialiseTaskLists+0x74>)
 800639e:	f7fd f9a1 	bl	80036e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80063a2:	4b0b      	ldr	r3, [pc, #44]	; (80063d0 <prvInitialiseTaskLists+0x78>)
 80063a4:	4a05      	ldr	r2, [pc, #20]	; (80063bc <prvInitialiseTaskLists+0x64>)
 80063a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80063a8:	4b0a      	ldr	r3, [pc, #40]	; (80063d4 <prvInitialiseTaskLists+0x7c>)
 80063aa:	4a05      	ldr	r2, [pc, #20]	; (80063c0 <prvInitialiseTaskLists+0x68>)
 80063ac:	601a      	str	r2, [r3, #0]
}
 80063ae:	bf00      	nop
 80063b0:	3708      	adds	r7, #8
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	bf00      	nop
 80063b8:	200141b4 	.word	0x200141b4
 80063bc:	20014218 	.word	0x20014218
 80063c0:	2001422c 	.word	0x2001422c
 80063c4:	20014248 	.word	0x20014248
 80063c8:	2001425c 	.word	0x2001425c
 80063cc:	20014274 	.word	0x20014274
 80063d0:	20014240 	.word	0x20014240
 80063d4:	20014244 	.word	0x20014244

080063d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b082      	sub	sp, #8
 80063dc:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80063de:	e028      	b.n	8006432 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 80063e0:	f7ff fc14 	bl	8005c0c <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80063e4:	4b17      	ldr	r3, [pc, #92]	; (8006444 <prvCheckTasksWaitingTermination+0x6c>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	bf0c      	ite	eq
 80063ec:	2301      	moveq	r3, #1
 80063ee:	2300      	movne	r3, #0
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 80063f4:	f7ff fc18 	bl	8005c28 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d119      	bne.n	8006432 <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 80063fe:	f7fd fb27 	bl	8003a50 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006402:	4b10      	ldr	r3, [pc, #64]	; (8006444 <prvCheckTasksWaitingTermination+0x6c>)
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	3304      	adds	r3, #4
 800640e:	4618      	mov	r0, r3
 8006410:	f7fd f9f2 	bl	80037f8 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8006414:	4b0c      	ldr	r3, [pc, #48]	; (8006448 <prvCheckTasksWaitingTermination+0x70>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	3b01      	subs	r3, #1
 800641a:	4a0b      	ldr	r2, [pc, #44]	; (8006448 <prvCheckTasksWaitingTermination+0x70>)
 800641c:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 800641e:	4b0b      	ldr	r3, [pc, #44]	; (800644c <prvCheckTasksWaitingTermination+0x74>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	3b01      	subs	r3, #1
 8006424:	4a09      	ldr	r2, [pc, #36]	; (800644c <prvCheckTasksWaitingTermination+0x74>)
 8006426:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 8006428:	f7fd fb40 	bl	8003aac <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 800642c:	6838      	ldr	r0, [r7, #0]
 800642e:	f000 f80f 	bl	8006450 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006432:	4b06      	ldr	r3, [pc, #24]	; (800644c <prvCheckTasksWaitingTermination+0x74>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d1d2      	bne.n	80063e0 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800643a:	bf00      	nop
 800643c:	3708      	adds	r7, #8
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop
 8006444:	2001425c 	.word	0x2001425c
 8006448:	20014288 	.word	0x20014288
 800644c:	20014270 	.word	0x20014270

08006450 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006450:	b580      	push	{r7, lr}
 8006452:	b082      	sub	sp, #8
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800645c:	4618      	mov	r0, r3
 800645e:	f7fd fcd3 	bl	8003e08 <vPortFree>
			vPortFree( pxTCB );
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f7fd fcd0 	bl	8003e08 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006468:	bf00      	nop
 800646a:	3708      	adds	r7, #8
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006470:	b480      	push	{r7}
 8006472:	b083      	sub	sp, #12
 8006474:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006476:	4b0f      	ldr	r3, [pc, #60]	; (80064b4 <prvResetNextTaskUnblockTime+0x44>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d101      	bne.n	8006484 <prvResetNextTaskUnblockTime+0x14>
 8006480:	2301      	movs	r3, #1
 8006482:	e000      	b.n	8006486 <prvResetNextTaskUnblockTime+0x16>
 8006484:	2300      	movs	r3, #0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d004      	beq.n	8006494 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800648a:	4b0b      	ldr	r3, [pc, #44]	; (80064b8 <prvResetNextTaskUnblockTime+0x48>)
 800648c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006490:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006492:	e008      	b.n	80064a6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006494:	4b07      	ldr	r3, [pc, #28]	; (80064b4 <prvResetNextTaskUnblockTime+0x44>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	4a05      	ldr	r2, [pc, #20]	; (80064b8 <prvResetNextTaskUnblockTime+0x48>)
 80064a4:	6013      	str	r3, [r2, #0]
}
 80064a6:	bf00      	nop
 80064a8:	370c      	adds	r7, #12
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr
 80064b2:	bf00      	nop
 80064b4:	20014240 	.word	0x20014240
 80064b8:	200142a8 	.word	0x200142a8

080064bc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80064bc:	b480      	push	{r7}
 80064be:	b083      	sub	sp, #12
 80064c0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80064c2:	4b05      	ldr	r3, [pc, #20]	; (80064d8 <xTaskGetCurrentTaskHandle+0x1c>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	607b      	str	r3, [r7, #4]

		return xReturn;
 80064c8:	687b      	ldr	r3, [r7, #4]
	}
 80064ca:	4618      	mov	r0, r3
 80064cc:	370c      	adds	r7, #12
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr
 80064d6:	bf00      	nop
 80064d8:	200141b0 	.word	0x200141b0

080064dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80064dc:	b480      	push	{r7}
 80064de:	b083      	sub	sp, #12
 80064e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80064e2:	4b0b      	ldr	r3, [pc, #44]	; (8006510 <xTaskGetSchedulerState+0x34>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d102      	bne.n	80064f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80064ea:	2301      	movs	r3, #1
 80064ec:	607b      	str	r3, [r7, #4]
 80064ee:	e008      	b.n	8006502 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064f0:	4b08      	ldr	r3, [pc, #32]	; (8006514 <xTaskGetSchedulerState+0x38>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d102      	bne.n	80064fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80064f8:	2302      	movs	r3, #2
 80064fa:	607b      	str	r3, [r7, #4]
 80064fc:	e001      	b.n	8006502 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80064fe:	2300      	movs	r3, #0
 8006500:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006502:	687b      	ldr	r3, [r7, #4]
	}
 8006504:	4618      	mov	r0, r3
 8006506:	370c      	adds	r7, #12
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr
 8006510:	20014294 	.word	0x20014294
 8006514:	200142b0 	.word	0x200142b0

08006518 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d06f      	beq.n	800660a <vTaskPriorityInherit+0xf2>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800652e:	4b39      	ldr	r3, [pc, #228]	; (8006614 <vTaskPriorityInherit+0xfc>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006534:	429a      	cmp	r2, r3
 8006536:	d268      	bcs.n	800660a <vTaskPriorityInherit+0xf2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	699b      	ldr	r3, [r3, #24]
 800653c:	2b00      	cmp	r3, #0
 800653e:	db06      	blt.n	800654e <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006540:	4b34      	ldr	r3, [pc, #208]	; (8006614 <vTaskPriorityInherit+0xfc>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006546:	f1c3 0205 	rsb	r2, r3, #5
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	6959      	ldr	r1, [r3, #20]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006556:	4613      	mov	r3, r2
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	4413      	add	r3, r2
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	4a2e      	ldr	r2, [pc, #184]	; (8006618 <vTaskPriorityInherit+0x100>)
 8006560:	4413      	add	r3, r2
 8006562:	4299      	cmp	r1, r3
 8006564:	d101      	bne.n	800656a <vTaskPriorityInherit+0x52>
 8006566:	2301      	movs	r3, #1
 8006568:	e000      	b.n	800656c <vTaskPriorityInherit+0x54>
 800656a:	2300      	movs	r3, #0
 800656c:	2b00      	cmp	r3, #0
 800656e:	d03f      	beq.n	80065f0 <vTaskPriorityInherit+0xd8>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	3304      	adds	r3, #4
 8006574:	4618      	mov	r0, r3
 8006576:	f7fd f93f 	bl	80037f8 <uxListRemove>
 800657a:	4603      	mov	r3, r0
 800657c:	2b00      	cmp	r3, #0
 800657e:	d115      	bne.n	80065ac <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006584:	4924      	ldr	r1, [pc, #144]	; (8006618 <vTaskPriorityInherit+0x100>)
 8006586:	4613      	mov	r3, r2
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	4413      	add	r3, r2
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	440b      	add	r3, r1
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d10a      	bne.n	80065ac <vTaskPriorityInherit+0x94>
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800659a:	2201      	movs	r2, #1
 800659c:	fa02 f303 	lsl.w	r3, r2, r3
 80065a0:	43da      	mvns	r2, r3
 80065a2:	4b1e      	ldr	r3, [pc, #120]	; (800661c <vTaskPriorityInherit+0x104>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4013      	ands	r3, r2
 80065a8:	4a1c      	ldr	r2, [pc, #112]	; (800661c <vTaskPriorityInherit+0x104>)
 80065aa:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80065ac:	4b19      	ldr	r3, [pc, #100]	; (8006614 <vTaskPriorityInherit+0xfc>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	4619      	mov	r1, r3
 80065ba:	2030      	movs	r0, #48	; 0x30
 80065bc:	f001 fda2 	bl	8008104 <prvTraceStoreEvent1>
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c4:	2201      	movs	r2, #1
 80065c6:	409a      	lsls	r2, r3
 80065c8:	4b14      	ldr	r3, [pc, #80]	; (800661c <vTaskPriorityInherit+0x104>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4313      	orrs	r3, r2
 80065ce:	4a13      	ldr	r2, [pc, #76]	; (800661c <vTaskPriorityInherit+0x104>)
 80065d0:	6013      	str	r3, [r2, #0]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065d6:	4613      	mov	r3, r2
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	4413      	add	r3, r2
 80065dc:	009b      	lsls	r3, r3, #2
 80065de:	4a0e      	ldr	r2, [pc, #56]	; (8006618 <vTaskPriorityInherit+0x100>)
 80065e0:	441a      	add	r2, r3
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	3304      	adds	r3, #4
 80065e6:	4619      	mov	r1, r3
 80065e8:	4610      	mov	r0, r2
 80065ea:	f7fd f8a8 	bl	800373e <vListInsertEnd>
 80065ee:	e004      	b.n	80065fa <vTaskPriorityInherit+0xe2>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80065f0:	4b08      	ldr	r3, [pc, #32]	; (8006614 <vTaskPriorityInherit+0xfc>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
 80065fa:	68f9      	ldr	r1, [r7, #12]
 80065fc:	4b05      	ldr	r3, [pc, #20]	; (8006614 <vTaskPriorityInherit+0xfc>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006602:	461a      	mov	r2, r3
 8006604:	2005      	movs	r0, #5
 8006606:	f001 fdc9 	bl	800819c <prvTraceStoreEvent2>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800660a:	bf00      	nop
 800660c:	3710      	adds	r7, #16
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
 8006612:	bf00      	nop
 8006614:	200141b0 	.word	0x200141b0
 8006618:	200141b4 	.word	0x200141b4
 800661c:	20014290 	.word	0x20014290

08006620 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006620:	b580      	push	{r7, lr}
 8006622:	b086      	sub	sp, #24
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800662c:	2300      	movs	r3, #0
 800662e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d078      	beq.n	8006728 <xTaskPriorityDisinherit+0x108>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006636:	4b3f      	ldr	r3, [pc, #252]	; (8006734 <xTaskPriorityDisinherit+0x114>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	693a      	ldr	r2, [r7, #16]
 800663c:	429a      	cmp	r2, r3
 800663e:	d009      	beq.n	8006654 <xTaskPriorityDisinherit+0x34>
 8006640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006644:	f383 8811 	msr	BASEPRI, r3
 8006648:	f3bf 8f6f 	isb	sy
 800664c:	f3bf 8f4f 	dsb	sy
 8006650:	60fb      	str	r3, [r7, #12]
 8006652:	e7fe      	b.n	8006652 <xTaskPriorityDisinherit+0x32>

			configASSERT( pxTCB->uxMutexesHeld );
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006658:	2b00      	cmp	r3, #0
 800665a:	d109      	bne.n	8006670 <xTaskPriorityDisinherit+0x50>
 800665c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006660:	f383 8811 	msr	BASEPRI, r3
 8006664:	f3bf 8f6f 	isb	sy
 8006668:	f3bf 8f4f 	dsb	sy
 800666c:	60bb      	str	r3, [r7, #8]
 800666e:	e7fe      	b.n	800666e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006674:	1e5a      	subs	r2, r3, #1
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006682:	429a      	cmp	r2, r3
 8006684:	d050      	beq.n	8006728 <xTaskPriorityDisinherit+0x108>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800668a:	2b00      	cmp	r3, #0
 800668c:	d14c      	bne.n	8006728 <xTaskPriorityDisinherit+0x108>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	3304      	adds	r3, #4
 8006692:	4618      	mov	r0, r3
 8006694:	f7fd f8b0 	bl	80037f8 <uxListRemove>
 8006698:	4603      	mov	r3, r0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d115      	bne.n	80066ca <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066a2:	4925      	ldr	r1, [pc, #148]	; (8006738 <xTaskPriorityDisinherit+0x118>)
 80066a4:	4613      	mov	r3, r2
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	4413      	add	r3, r2
 80066aa:	009b      	lsls	r3, r3, #2
 80066ac:	440b      	add	r3, r1
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d10a      	bne.n	80066ca <xTaskPriorityDisinherit+0xaa>
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b8:	2201      	movs	r2, #1
 80066ba:	fa02 f303 	lsl.w	r3, r2, r3
 80066be:	43da      	mvns	r2, r3
 80066c0:	4b1e      	ldr	r3, [pc, #120]	; (800673c <xTaskPriorityDisinherit+0x11c>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4013      	ands	r3, r2
 80066c6:	4a1d      	ldr	r2, [pc, #116]	; (800673c <xTaskPriorityDisinherit+0x11c>)
 80066c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80066ca:	6939      	ldr	r1, [r7, #16]
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066d0:	461a      	mov	r2, r3
 80066d2:	2006      	movs	r0, #6
 80066d4:	f001 fd62 	bl	800819c <prvTraceStoreEvent2>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e4:	f1c3 0205 	rsb	r2, r3, #5
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	4619      	mov	r1, r3
 80066f0:	2030      	movs	r0, #48	; 0x30
 80066f2:	f001 fd07 	bl	8008104 <prvTraceStoreEvent1>
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066fa:	2201      	movs	r2, #1
 80066fc:	409a      	lsls	r2, r3
 80066fe:	4b0f      	ldr	r3, [pc, #60]	; (800673c <xTaskPriorityDisinherit+0x11c>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4313      	orrs	r3, r2
 8006704:	4a0d      	ldr	r2, [pc, #52]	; (800673c <xTaskPriorityDisinherit+0x11c>)
 8006706:	6013      	str	r3, [r2, #0]
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800670c:	4613      	mov	r3, r2
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	4413      	add	r3, r2
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	4a08      	ldr	r2, [pc, #32]	; (8006738 <xTaskPriorityDisinherit+0x118>)
 8006716:	441a      	add	r2, r3
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	3304      	adds	r3, #4
 800671c:	4619      	mov	r1, r3
 800671e:	4610      	mov	r0, r2
 8006720:	f7fd f80d 	bl	800373e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006724:	2301      	movs	r3, #1
 8006726:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006728:	697b      	ldr	r3, [r7, #20]
	}
 800672a:	4618      	mov	r0, r3
 800672c:	3718      	adds	r7, #24
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}
 8006732:	bf00      	nop
 8006734:	200141b0 	.word	0x200141b0
 8006738:	200141b4 	.word	0x200141b4
 800673c:	20014290 	.word	0x20014290

08006740 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8006740:	b480      	push	{r7}
 8006742:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006744:	4b07      	ldr	r3, [pc, #28]	; (8006764 <pvTaskIncrementMutexHeldCount+0x24>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d004      	beq.n	8006756 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800674c:	4b05      	ldr	r3, [pc, #20]	; (8006764 <pvTaskIncrementMutexHeldCount+0x24>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006752:	3201      	adds	r2, #1
 8006754:	64da      	str	r2, [r3, #76]	; 0x4c
		}

		return pxCurrentTCB;
 8006756:	4b03      	ldr	r3, [pc, #12]	; (8006764 <pvTaskIncrementMutexHeldCount+0x24>)
 8006758:	681b      	ldr	r3, [r3, #0]
	}
 800675a:	4618      	mov	r0, r3
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr
 8006764:	200141b0 	.word	0x200141b0

08006768 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b084      	sub	sp, #16
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006772:	4b29      	ldr	r3, [pc, #164]	; (8006818 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006778:	4b28      	ldr	r3, [pc, #160]	; (800681c <prvAddCurrentTaskToDelayedList+0xb4>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	3304      	adds	r3, #4
 800677e:	4618      	mov	r0, r3
 8006780:	f7fd f83a 	bl	80037f8 <uxListRemove>
 8006784:	4603      	mov	r3, r0
 8006786:	2b00      	cmp	r3, #0
 8006788:	d10b      	bne.n	80067a2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800678a:	4b24      	ldr	r3, [pc, #144]	; (800681c <prvAddCurrentTaskToDelayedList+0xb4>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006790:	2201      	movs	r2, #1
 8006792:	fa02 f303 	lsl.w	r3, r2, r3
 8006796:	43da      	mvns	r2, r3
 8006798:	4b21      	ldr	r3, [pc, #132]	; (8006820 <prvAddCurrentTaskToDelayedList+0xb8>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4013      	ands	r3, r2
 800679e:	4a20      	ldr	r2, [pc, #128]	; (8006820 <prvAddCurrentTaskToDelayedList+0xb8>)
 80067a0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067a8:	d10a      	bne.n	80067c0 <prvAddCurrentTaskToDelayedList+0x58>
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d007      	beq.n	80067c0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067b0:	4b1a      	ldr	r3, [pc, #104]	; (800681c <prvAddCurrentTaskToDelayedList+0xb4>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	3304      	adds	r3, #4
 80067b6:	4619      	mov	r1, r3
 80067b8:	481a      	ldr	r0, [pc, #104]	; (8006824 <prvAddCurrentTaskToDelayedList+0xbc>)
 80067ba:	f7fc ffc0 	bl	800373e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80067be:	e026      	b.n	800680e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80067c0:	68fa      	ldr	r2, [r7, #12]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4413      	add	r3, r2
 80067c6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80067c8:	4b14      	ldr	r3, [pc, #80]	; (800681c <prvAddCurrentTaskToDelayedList+0xb4>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	68ba      	ldr	r2, [r7, #8]
 80067ce:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80067d0:	68ba      	ldr	r2, [r7, #8]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d209      	bcs.n	80067ec <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067d8:	4b13      	ldr	r3, [pc, #76]	; (8006828 <prvAddCurrentTaskToDelayedList+0xc0>)
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	4b0f      	ldr	r3, [pc, #60]	; (800681c <prvAddCurrentTaskToDelayedList+0xb4>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	3304      	adds	r3, #4
 80067e2:	4619      	mov	r1, r3
 80067e4:	4610      	mov	r0, r2
 80067e6:	f7fc ffce 	bl	8003786 <vListInsert>
}
 80067ea:	e010      	b.n	800680e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067ec:	4b0f      	ldr	r3, [pc, #60]	; (800682c <prvAddCurrentTaskToDelayedList+0xc4>)
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	4b0a      	ldr	r3, [pc, #40]	; (800681c <prvAddCurrentTaskToDelayedList+0xb4>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	3304      	adds	r3, #4
 80067f6:	4619      	mov	r1, r3
 80067f8:	4610      	mov	r0, r2
 80067fa:	f7fc ffc4 	bl	8003786 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80067fe:	4b0c      	ldr	r3, [pc, #48]	; (8006830 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	68ba      	ldr	r2, [r7, #8]
 8006804:	429a      	cmp	r2, r3
 8006806:	d202      	bcs.n	800680e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006808:	4a09      	ldr	r2, [pc, #36]	; (8006830 <prvAddCurrentTaskToDelayedList+0xc8>)
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	6013      	str	r3, [r2, #0]
}
 800680e:	bf00      	nop
 8006810:	3710      	adds	r7, #16
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}
 8006816:	bf00      	nop
 8006818:	2001428c 	.word	0x2001428c
 800681c:	200141b0 	.word	0x200141b0
 8006820:	20014290 	.word	0x20014290
 8006824:	20014274 	.word	0x20014274
 8006828:	20014244 	.word	0x20014244
 800682c:	20014240 	.word	0x20014240
 8006830:	200142a8 	.word	0x200142a8

08006834 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800683a:	2300      	movs	r3, #0
 800683c:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800683e:	f000 fb79 	bl	8006f34 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006842:	4b11      	ldr	r3, [pc, #68]	; (8006888 <xTimerCreateTimerTask+0x54>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00b      	beq.n	8006862 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800684a:	4b10      	ldr	r3, [pc, #64]	; (800688c <xTimerCreateTimerTask+0x58>)
 800684c:	9301      	str	r3, [sp, #4]
 800684e:	2302      	movs	r3, #2
 8006850:	9300      	str	r3, [sp, #0]
 8006852:	2300      	movs	r3, #0
 8006854:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006858:	490d      	ldr	r1, [pc, #52]	; (8006890 <xTimerCreateTimerTask+0x5c>)
 800685a:	480e      	ldr	r0, [pc, #56]	; (8006894 <xTimerCreateTimerTask+0x60>)
 800685c:	f7fe fcd8 	bl	8005210 <xTaskCreate>
 8006860:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d109      	bne.n	800687c <xTimerCreateTimerTask+0x48>
 8006868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800686c:	f383 8811 	msr	BASEPRI, r3
 8006870:	f3bf 8f6f 	isb	sy
 8006874:	f3bf 8f4f 	dsb	sy
 8006878:	603b      	str	r3, [r7, #0]
 800687a:	e7fe      	b.n	800687a <xTimerCreateTimerTask+0x46>
	return xReturn;
 800687c:	687b      	ldr	r3, [r7, #4]
}
 800687e:	4618      	mov	r0, r3
 8006880:	3708      	adds	r7, #8
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
 8006886:	bf00      	nop
 8006888:	200142e4 	.word	0x200142e4
 800688c:	200142e8 	.word	0x200142e8
 8006890:	080099fc 	.word	0x080099fc
 8006894:	08006b85 	.word	0x08006b85

08006898 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006898:	b580      	push	{r7, lr}
 800689a:	b088      	sub	sp, #32
 800689c:	af02      	add	r7, sp, #8
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	60b9      	str	r1, [r7, #8]
 80068a2:	607a      	str	r2, [r7, #4]
 80068a4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 80068a6:	202c      	movs	r0, #44	; 0x2c
 80068a8:	f7fd f9e2 	bl	8003c70 <pvPortMalloc>
 80068ac:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d009      	beq.n	80068c8 <xTimerCreate+0x30>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	9301      	str	r3, [sp, #4]
 80068b8:	6a3b      	ldr	r3, [r7, #32]
 80068ba:	9300      	str	r3, [sp, #0]
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	68b9      	ldr	r1, [r7, #8]
 80068c2:	68f8      	ldr	r0, [r7, #12]
 80068c4:	f000 f805 	bl	80068d2 <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 80068c8:	697b      	ldr	r3, [r7, #20]
	}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3718      	adds	r7, #24
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}

080068d2 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 80068d2:	b580      	push	{r7, lr}
 80068d4:	b086      	sub	sp, #24
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	60f8      	str	r0, [r7, #12]
 80068da:	60b9      	str	r1, [r7, #8]
 80068dc:	607a      	str	r2, [r7, #4]
 80068de:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d109      	bne.n	80068fa <prvInitialiseNewTimer+0x28>
 80068e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ea:	f383 8811 	msr	BASEPRI, r3
 80068ee:	f3bf 8f6f 	isb	sy
 80068f2:	f3bf 8f4f 	dsb	sy
 80068f6:	617b      	str	r3, [r7, #20]
 80068f8:	e7fe      	b.n	80068f8 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 80068fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d029      	beq.n	8006954 <prvInitialiseNewTimer+0x82>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8006900:	f000 fb18 	bl	8006f34 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8006904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006906:	68fa      	ldr	r2, [r7, #12]
 8006908:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800690a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690c:	68ba      	ldr	r2, [r7, #8]
 800690e:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8006910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8006916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006918:	683a      	ldr	r2, [r7, #0]
 800691a:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800691c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691e:	6a3a      	ldr	r2, [r7, #32]
 8006920:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006924:	3304      	adds	r3, #4
 8006926:	4618      	mov	r0, r3
 8006928:	f7fc fefc 	bl	8003724 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
 800692c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4619      	mov	r1, r3
 8006932:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006934:	f001 fe5e 	bl	80085f4 <prvTraceSaveSymbol>
 8006938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693e:	2103      	movs	r1, #3
 8006940:	2001      	movs	r0, #1
 8006942:	f001 fd3d 	bl	80083c0 <prvTraceStoreStringEvent>
 8006946:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694a:	699b      	ldr	r3, [r3, #24]
 800694c:	461a      	mov	r2, r3
 800694e:	2014      	movs	r0, #20
 8006950:	f001 fc24 	bl	800819c <prvTraceStoreEvent2>
	}
}
 8006954:	bf00      	nop
 8006956:	3718      	adds	r7, #24
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}

0800695c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b08a      	sub	sp, #40	; 0x28
 8006960:	af00      	add	r7, sp, #0
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	60b9      	str	r1, [r7, #8]
 8006966:	607a      	str	r2, [r7, #4]
 8006968:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800696a:	2300      	movs	r3, #0
 800696c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d109      	bne.n	8006988 <xTimerGenericCommand+0x2c>
 8006974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006978:	f383 8811 	msr	BASEPRI, r3
 800697c:	f3bf 8f6f 	isb	sy
 8006980:	f3bf 8f4f 	dsb	sy
 8006984:	623b      	str	r3, [r7, #32]
 8006986:	e7fe      	b.n	8006986 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006988:	4b5d      	ldr	r3, [pc, #372]	; (8006b00 <xTimerGenericCommand+0x1a4>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	2b00      	cmp	r3, #0
 800698e:	f000 80b1 	beq.w	8006af4 <xTimerGenericCommand+0x198>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	2b05      	cmp	r3, #5
 80069a2:	dc18      	bgt.n	80069d6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80069a4:	f7ff fd9a 	bl	80064dc <xTaskGetSchedulerState>
 80069a8:	4603      	mov	r3, r0
 80069aa:	2b02      	cmp	r3, #2
 80069ac:	d109      	bne.n	80069c2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80069ae:	4b54      	ldr	r3, [pc, #336]	; (8006b00 <xTimerGenericCommand+0x1a4>)
 80069b0:	6818      	ldr	r0, [r3, #0]
 80069b2:	f107 0114 	add.w	r1, r7, #20
 80069b6:	2300      	movs	r3, #0
 80069b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069ba:	f7fd fd23 	bl	8004404 <xQueueGenericSend>
 80069be:	6278      	str	r0, [r7, #36]	; 0x24
 80069c0:	e012      	b.n	80069e8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80069c2:	4b4f      	ldr	r3, [pc, #316]	; (8006b00 <xTimerGenericCommand+0x1a4>)
 80069c4:	6818      	ldr	r0, [r3, #0]
 80069c6:	f107 0114 	add.w	r1, r7, #20
 80069ca:	2300      	movs	r3, #0
 80069cc:	2200      	movs	r2, #0
 80069ce:	f7fd fd19 	bl	8004404 <xQueueGenericSend>
 80069d2:	6278      	str	r0, [r7, #36]	; 0x24
 80069d4:	e008      	b.n	80069e8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80069d6:	4b4a      	ldr	r3, [pc, #296]	; (8006b00 <xTimerGenericCommand+0x1a4>)
 80069d8:	6818      	ldr	r0, [r3, #0]
 80069da:	f107 0114 	add.w	r1, r7, #20
 80069de:	2300      	movs	r3, #0
 80069e0:	683a      	ldr	r2, [r7, #0]
 80069e2:	f7fd fec1 	bl	8004768 <xQueueGenericSendFromISR>
 80069e6:	6278      	str	r0, [r7, #36]	; 0x24
		}

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	3b01      	subs	r3, #1
 80069ec:	2b08      	cmp	r3, #8
 80069ee:	f200 8081 	bhi.w	8006af4 <xTimerGenericCommand+0x198>
 80069f2:	a201      	add	r2, pc, #4	; (adr r2, 80069f8 <xTimerGenericCommand+0x9c>)
 80069f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069f8:	08006a1d 	.word	0x08006a1d
 80069fc:	08006a7d 	.word	0x08006a7d
 8006a00:	08006a35 	.word	0x08006a35
 8006a04:	08006a4d 	.word	0x08006a4d
 8006a08:	08006a65 	.word	0x08006a65
 8006a0c:	08006a95 	.word	0x08006a95
 8006a10:	08006aad 	.word	0x08006aad
 8006a14:	08006ac5 	.word	0x08006ac5
 8006a18:	08006add 	.word	0x08006add
 8006a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d101      	bne.n	8006a26 <xTimerGenericCommand+0xca>
 8006a22:	23a0      	movs	r3, #160	; 0xa0
 8006a24:	e000      	b.n	8006a28 <xTimerGenericCommand+0xcc>
 8006a26:	23a8      	movs	r3, #168	; 0xa8
 8006a28:	68fa      	ldr	r2, [r7, #12]
 8006a2a:	4611      	mov	r1, r2
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f001 fb69 	bl	8008104 <prvTraceStoreEvent1>
 8006a32:	e05f      	b.n	8006af4 <xTimerGenericCommand+0x198>
 8006a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a36:	2b01      	cmp	r3, #1
 8006a38:	d101      	bne.n	8006a3e <xTimerGenericCommand+0xe2>
 8006a3a:	23a2      	movs	r3, #162	; 0xa2
 8006a3c:	e000      	b.n	8006a40 <xTimerGenericCommand+0xe4>
 8006a3e:	23aa      	movs	r3, #170	; 0xaa
 8006a40:	68fa      	ldr	r2, [r7, #12]
 8006a42:	4611      	mov	r1, r2
 8006a44:	4618      	mov	r0, r3
 8006a46:	f001 fb5d 	bl	8008104 <prvTraceStoreEvent1>
 8006a4a:	e053      	b.n	8006af4 <xTimerGenericCommand+0x198>
 8006a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d101      	bne.n	8006a56 <xTimerGenericCommand+0xfa>
 8006a52:	23a3      	movs	r3, #163	; 0xa3
 8006a54:	e000      	b.n	8006a58 <xTimerGenericCommand+0xfc>
 8006a56:	23ab      	movs	r3, #171	; 0xab
 8006a58:	68f9      	ldr	r1, [r7, #12]
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f001 fb9d 	bl	800819c <prvTraceStoreEvent2>
 8006a62:	e047      	b.n	8006af4 <xTimerGenericCommand+0x198>
 8006a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d101      	bne.n	8006a6e <xTimerGenericCommand+0x112>
 8006a6a:	2324      	movs	r3, #36	; 0x24
 8006a6c:	e000      	b.n	8006a70 <xTimerGenericCommand+0x114>
 8006a6e:	2348      	movs	r3, #72	; 0x48
 8006a70:	68fa      	ldr	r2, [r7, #12]
 8006a72:	4611      	mov	r1, r2
 8006a74:	4618      	mov	r0, r3
 8006a76:	f001 fb45 	bl	8008104 <prvTraceStoreEvent1>
 8006a7a:	e03b      	b.n	8006af4 <xTimerGenericCommand+0x198>
 8006a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d101      	bne.n	8006a86 <xTimerGenericCommand+0x12a>
 8006a82:	23a1      	movs	r3, #161	; 0xa1
 8006a84:	e000      	b.n	8006a88 <xTimerGenericCommand+0x12c>
 8006a86:	23a9      	movs	r3, #169	; 0xa9
 8006a88:	68f9      	ldr	r1, [r7, #12]
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f001 fb85 	bl	800819c <prvTraceStoreEvent2>
 8006a92:	e02f      	b.n	8006af4 <xTimerGenericCommand+0x198>
 8006a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d101      	bne.n	8006a9e <xTimerGenericCommand+0x142>
 8006a9a:	23a4      	movs	r3, #164	; 0xa4
 8006a9c:	e000      	b.n	8006aa0 <xTimerGenericCommand+0x144>
 8006a9e:	23ac      	movs	r3, #172	; 0xac
 8006aa0:	68f9      	ldr	r1, [r7, #12]
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f001 fb79 	bl	800819c <prvTraceStoreEvent2>
 8006aaa:	e023      	b.n	8006af4 <xTimerGenericCommand+0x198>
 8006aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	d101      	bne.n	8006ab6 <xTimerGenericCommand+0x15a>
 8006ab2:	23a5      	movs	r3, #165	; 0xa5
 8006ab4:	e000      	b.n	8006ab8 <xTimerGenericCommand+0x15c>
 8006ab6:	23ad      	movs	r3, #173	; 0xad
 8006ab8:	68f9      	ldr	r1, [r7, #12]
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	4618      	mov	r0, r3
 8006abe:	f001 fb6d 	bl	800819c <prvTraceStoreEvent2>
 8006ac2:	e017      	b.n	8006af4 <xTimerGenericCommand+0x198>
 8006ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d101      	bne.n	8006ace <xTimerGenericCommand+0x172>
 8006aca:	23a6      	movs	r3, #166	; 0xa6
 8006acc:	e000      	b.n	8006ad0 <xTimerGenericCommand+0x174>
 8006ace:	23ae      	movs	r3, #174	; 0xae
 8006ad0:	68f9      	ldr	r1, [r7, #12]
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f001 fb61 	bl	800819c <prvTraceStoreEvent2>
 8006ada:	e00b      	b.n	8006af4 <xTimerGenericCommand+0x198>
 8006adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d101      	bne.n	8006ae6 <xTimerGenericCommand+0x18a>
 8006ae2:	23a7      	movs	r3, #167	; 0xa7
 8006ae4:	e000      	b.n	8006ae8 <xTimerGenericCommand+0x18c>
 8006ae6:	23af      	movs	r3, #175	; 0xaf
 8006ae8:	68f9      	ldr	r1, [r7, #12]
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	4618      	mov	r0, r3
 8006aee:	f001 fb55 	bl	800819c <prvTraceStoreEvent2>
 8006af2:	bf00      	nop
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3728      	adds	r7, #40	; 0x28
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
 8006afe:	bf00      	nop
 8006b00:	200142e4 	.word	0x200142e4

08006b04 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b088      	sub	sp, #32
 8006b08:	af02      	add	r7, sp, #8
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b0e:	4b1c      	ldr	r3, [pc, #112]	; (8006b80 <prvProcessExpiredTimer+0x7c>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	68db      	ldr	r3, [r3, #12]
 8006b16:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	3304      	adds	r3, #4
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f7fc fe6b 	bl	80037f8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	69db      	ldr	r3, [r3, #28]
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d121      	bne.n	8006b6e <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	699a      	ldr	r2, [r3, #24]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	18d1      	adds	r1, r2, r3
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	683a      	ldr	r2, [r7, #0]
 8006b36:	6978      	ldr	r0, [r7, #20]
 8006b38:	f000 f8c8 	bl	8006ccc <prvInsertTimerInActiveList>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d015      	beq.n	8006b6e <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006b42:	2300      	movs	r3, #0
 8006b44:	9300      	str	r3, [sp, #0]
 8006b46:	2300      	movs	r3, #0
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	2100      	movs	r1, #0
 8006b4c:	6978      	ldr	r0, [r7, #20]
 8006b4e:	f7ff ff05 	bl	800695c <xTimerGenericCommand>
 8006b52:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d109      	bne.n	8006b6e <prvProcessExpiredTimer+0x6a>
 8006b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b5e:	f383 8811 	msr	BASEPRI, r3
 8006b62:	f3bf 8f6f 	isb	sy
 8006b66:	f3bf 8f4f 	dsb	sy
 8006b6a:	60fb      	str	r3, [r7, #12]
 8006b6c:	e7fe      	b.n	8006b6c <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b72:	6978      	ldr	r0, [r7, #20]
 8006b74:	4798      	blx	r3
}
 8006b76:	bf00      	nop
 8006b78:	3718      	adds	r7, #24
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	bf00      	nop
 8006b80:	200142dc 	.word	0x200142dc

08006b84 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b084      	sub	sp, #16
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006b8c:	f107 0308 	add.w	r3, r7, #8
 8006b90:	4618      	mov	r0, r3
 8006b92:	f000 f857 	bl	8006c44 <prvGetNextExpireTime>
 8006b96:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	68f8      	ldr	r0, [r7, #12]
 8006b9e:	f000 f803 	bl	8006ba8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006ba2:	f000 f8d5 	bl	8006d50 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006ba6:	e7f1      	b.n	8006b8c <prvTimerTask+0x8>

08006ba8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b084      	sub	sp, #16
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006bb2:	f7ff f82b 	bl	8005c0c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006bb6:	f107 0308 	add.w	r3, r7, #8
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f000 f866 	bl	8006c8c <prvSampleTimeNow>
 8006bc0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d130      	bne.n	8006c2a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d10a      	bne.n	8006be4 <prvProcessTimerOrBlockTask+0x3c>
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d806      	bhi.n	8006be4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006bd6:	f7ff f827 	bl	8005c28 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006bda:	68f9      	ldr	r1, [r7, #12]
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f7ff ff91 	bl	8006b04 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006be2:	e024      	b.n	8006c2e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d008      	beq.n	8006bfc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006bea:	4b13      	ldr	r3, [pc, #76]	; (8006c38 <prvProcessTimerOrBlockTask+0x90>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	bf0c      	ite	eq
 8006bf4:	2301      	moveq	r3, #1
 8006bf6:	2300      	movne	r3, #0
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006bfc:	4b0f      	ldr	r3, [pc, #60]	; (8006c3c <prvProcessTimerOrBlockTask+0x94>)
 8006bfe:	6818      	ldr	r0, [r3, #0]
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	1ad3      	subs	r3, r2, r3
 8006c06:	683a      	ldr	r2, [r7, #0]
 8006c08:	4619      	mov	r1, r3
 8006c0a:	f7fe facd 	bl	80051a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006c0e:	f7ff f80b 	bl	8005c28 <xTaskResumeAll>
 8006c12:	4603      	mov	r3, r0
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d10a      	bne.n	8006c2e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006c18:	4b09      	ldr	r3, [pc, #36]	; (8006c40 <prvProcessTimerOrBlockTask+0x98>)
 8006c1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c1e:	601a      	str	r2, [r3, #0]
 8006c20:	f3bf 8f4f 	dsb	sy
 8006c24:	f3bf 8f6f 	isb	sy
}
 8006c28:	e001      	b.n	8006c2e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006c2a:	f7fe fffd 	bl	8005c28 <xTaskResumeAll>
}
 8006c2e:	bf00      	nop
 8006c30:	3710      	adds	r7, #16
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	bf00      	nop
 8006c38:	200142e0 	.word	0x200142e0
 8006c3c:	200142e4 	.word	0x200142e4
 8006c40:	e000ed04 	.word	0xe000ed04

08006c44 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006c44:	b480      	push	{r7}
 8006c46:	b085      	sub	sp, #20
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006c4c:	4b0e      	ldr	r3, [pc, #56]	; (8006c88 <prvGetNextExpireTime+0x44>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	bf0c      	ite	eq
 8006c56:	2301      	moveq	r3, #1
 8006c58:	2300      	movne	r3, #0
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d105      	bne.n	8006c76 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c6a:	4b07      	ldr	r3, [pc, #28]	; (8006c88 <prvGetNextExpireTime+0x44>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	60fb      	str	r3, [r7, #12]
 8006c74:	e001      	b.n	8006c7a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006c76:	2300      	movs	r3, #0
 8006c78:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3714      	adds	r7, #20
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr
 8006c88:	200142dc 	.word	0x200142dc

08006c8c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006c94:	f7ff f868 	bl	8005d68 <xTaskGetTickCount>
 8006c98:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006c9a:	4b0b      	ldr	r3, [pc, #44]	; (8006cc8 <prvSampleTimeNow+0x3c>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	68fa      	ldr	r2, [r7, #12]
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d205      	bcs.n	8006cb0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006ca4:	f000 f8e6 	bl	8006e74 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	601a      	str	r2, [r3, #0]
 8006cae:	e002      	b.n	8006cb6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006cb6:	4a04      	ldr	r2, [pc, #16]	; (8006cc8 <prvSampleTimeNow+0x3c>)
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3710      	adds	r7, #16
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
 8006cc6:	bf00      	nop
 8006cc8:	200142ec 	.word	0x200142ec

08006ccc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b086      	sub	sp, #24
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	60f8      	str	r0, [r7, #12]
 8006cd4:	60b9      	str	r1, [r7, #8]
 8006cd6:	607a      	str	r2, [r7, #4]
 8006cd8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	68ba      	ldr	r2, [r7, #8]
 8006ce2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	68fa      	ldr	r2, [r7, #12]
 8006ce8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006cea:	68ba      	ldr	r2, [r7, #8]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	d812      	bhi.n	8006d18 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	1ad2      	subs	r2, r2, r3
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	699b      	ldr	r3, [r3, #24]
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d302      	bcc.n	8006d06 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006d00:	2301      	movs	r3, #1
 8006d02:	617b      	str	r3, [r7, #20]
 8006d04:	e01b      	b.n	8006d3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006d06:	4b10      	ldr	r3, [pc, #64]	; (8006d48 <prvInsertTimerInActiveList+0x7c>)
 8006d08:	681a      	ldr	r2, [r3, #0]
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	3304      	adds	r3, #4
 8006d0e:	4619      	mov	r1, r3
 8006d10:	4610      	mov	r0, r2
 8006d12:	f7fc fd38 	bl	8003786 <vListInsert>
 8006d16:	e012      	b.n	8006d3e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006d18:	687a      	ldr	r2, [r7, #4]
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d206      	bcs.n	8006d2e <prvInsertTimerInActiveList+0x62>
 8006d20:	68ba      	ldr	r2, [r7, #8]
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d302      	bcc.n	8006d2e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	617b      	str	r3, [r7, #20]
 8006d2c:	e007      	b.n	8006d3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006d2e:	4b07      	ldr	r3, [pc, #28]	; (8006d4c <prvInsertTimerInActiveList+0x80>)
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	3304      	adds	r3, #4
 8006d36:	4619      	mov	r1, r3
 8006d38:	4610      	mov	r0, r2
 8006d3a:	f7fc fd24 	bl	8003786 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006d3e:	697b      	ldr	r3, [r7, #20]
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3718      	adds	r7, #24
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}
 8006d48:	200142e0 	.word	0x200142e0
 8006d4c:	200142dc 	.word	0x200142dc

08006d50 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b08c      	sub	sp, #48	; 0x30
 8006d54:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006d56:	e07a      	b.n	8006e4e <prvProcessReceivedCommands+0xfe>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	db77      	blt.n	8006e4e <prvProcessReceivedCommands+0xfe>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8006d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d64:	695b      	ldr	r3, [r3, #20]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d004      	beq.n	8006d74 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6c:	3304      	adds	r3, #4
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f7fc fd42 	bl	80037f8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006d74:	1d3b      	adds	r3, r7, #4
 8006d76:	4618      	mov	r0, r3
 8006d78:	f7ff ff88 	bl	8006c8c <prvSampleTimeNow>
 8006d7c:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	2b09      	cmp	r3, #9
 8006d82:	d863      	bhi.n	8006e4c <prvProcessReceivedCommands+0xfc>
 8006d84:	a201      	add	r2, pc, #4	; (adr r2, 8006d8c <prvProcessReceivedCommands+0x3c>)
 8006d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d8a:	bf00      	nop
 8006d8c:	08006db5 	.word	0x08006db5
 8006d90:	08006db5 	.word	0x08006db5
 8006d94:	08006db5 	.word	0x08006db5
 8006d98:	08006e4f 	.word	0x08006e4f
 8006d9c:	08006e0f 	.word	0x08006e0f
 8006da0:	08006e45 	.word	0x08006e45
 8006da4:	08006db5 	.word	0x08006db5
 8006da8:	08006db5 	.word	0x08006db5
 8006dac:	08006e4f 	.word	0x08006e4f
 8006db0:	08006e0f 	.word	0x08006e0f
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006db4:	68fa      	ldr	r2, [r7, #12]
 8006db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db8:	699b      	ldr	r3, [r3, #24]
 8006dba:	18d1      	adds	r1, r2, r3
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	6a3a      	ldr	r2, [r7, #32]
 8006dc0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006dc2:	f7ff ff83 	bl	8006ccc <prvInsertTimerInActiveList>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d040      	beq.n	8006e4e <prvProcessReceivedCommands+0xfe>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006dd2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd6:	69db      	ldr	r3, [r3, #28]
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d138      	bne.n	8006e4e <prvProcessReceivedCommands+0xfe>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006ddc:	68fa      	ldr	r2, [r7, #12]
 8006dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de0:	699b      	ldr	r3, [r3, #24]
 8006de2:	441a      	add	r2, r3
 8006de4:	2300      	movs	r3, #0
 8006de6:	9300      	str	r3, [sp, #0]
 8006de8:	2300      	movs	r3, #0
 8006dea:	2100      	movs	r1, #0
 8006dec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006dee:	f7ff fdb5 	bl	800695c <xTimerGenericCommand>
 8006df2:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8006df4:	69fb      	ldr	r3, [r7, #28]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d129      	bne.n	8006e4e <prvProcessReceivedCommands+0xfe>
 8006dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dfe:	f383 8811 	msr	BASEPRI, r3
 8006e02:	f3bf 8f6f 	isb	sy
 8006e06:	f3bf 8f4f 	dsb	sy
 8006e0a:	61bb      	str	r3, [r7, #24]
 8006e0c:	e7fe      	b.n	8006e0c <prvProcessReceivedCommands+0xbc>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006e0e:	68fa      	ldr	r2, [r7, #12]
 8006e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e12:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e16:	699b      	ldr	r3, [r3, #24]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d109      	bne.n	8006e30 <prvProcessReceivedCommands+0xe0>
 8006e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e20:	f383 8811 	msr	BASEPRI, r3
 8006e24:	f3bf 8f6f 	isb	sy
 8006e28:	f3bf 8f4f 	dsb	sy
 8006e2c:	617b      	str	r3, [r7, #20]
 8006e2e:	e7fe      	b.n	8006e2e <prvProcessReceivedCommands+0xde>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e32:	699a      	ldr	r2, [r3, #24]
 8006e34:	6a3b      	ldr	r3, [r7, #32]
 8006e36:	18d1      	adds	r1, r2, r3
 8006e38:	6a3b      	ldr	r3, [r7, #32]
 8006e3a:	6a3a      	ldr	r2, [r7, #32]
 8006e3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006e3e:	f7ff ff45 	bl	8006ccc <prvInsertTimerInActiveList>
					break;
 8006e42:	e004      	b.n	8006e4e <prvProcessReceivedCommands+0xfe>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
 8006e44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006e46:	f7fc ffdf 	bl	8003e08 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006e4a:	e000      	b.n	8006e4e <prvProcessReceivedCommands+0xfe>

				default	:
					/* Don't expect to get here. */
					break;
 8006e4c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006e4e:	4b08      	ldr	r3, [pc, #32]	; (8006e70 <prvProcessReceivedCommands+0x120>)
 8006e50:	6818      	ldr	r0, [r3, #0]
 8006e52:	f107 0108 	add.w	r1, r7, #8
 8006e56:	2300      	movs	r3, #0
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f7fd fe37 	bl	8004acc <xQueueGenericReceive>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	f47f af79 	bne.w	8006d58 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006e66:	bf00      	nop
 8006e68:	3728      	adds	r7, #40	; 0x28
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
 8006e6e:	bf00      	nop
 8006e70:	200142e4 	.word	0x200142e4

08006e74 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b088      	sub	sp, #32
 8006e78:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006e7a:	e044      	b.n	8006f06 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e7c:	4b2b      	ldr	r3, [pc, #172]	; (8006f2c <prvSwitchTimerLists+0xb8>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	68db      	ldr	r3, [r3, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e86:	4b29      	ldr	r3, [pc, #164]	; (8006f2c <prvSwitchTimerLists+0xb8>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	68db      	ldr	r3, [r3, #12]
 8006e8e:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	3304      	adds	r3, #4
 8006e94:	4618      	mov	r0, r3
 8006e96:	f7fc fcaf 	bl	80037f8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9e:	6938      	ldr	r0, [r7, #16]
 8006ea0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	69db      	ldr	r3, [r3, #28]
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d12d      	bne.n	8006f06 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	699a      	ldr	r2, [r3, #24]
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	4413      	add	r3, r2
 8006eb2:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 8006eb4:	68fa      	ldr	r2, [r7, #12]
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d90e      	bls.n	8006eda <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	68fa      	ldr	r2, [r7, #12]
 8006ec0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	693a      	ldr	r2, [r7, #16]
 8006ec6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006ec8:	4b18      	ldr	r3, [pc, #96]	; (8006f2c <prvSwitchTimerLists+0xb8>)
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	3304      	adds	r3, #4
 8006ed0:	4619      	mov	r1, r3
 8006ed2:	4610      	mov	r0, r2
 8006ed4:	f7fc fc57 	bl	8003786 <vListInsert>
 8006ed8:	e015      	b.n	8006f06 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006eda:	2300      	movs	r3, #0
 8006edc:	9300      	str	r3, [sp, #0]
 8006ede:	2300      	movs	r3, #0
 8006ee0:	697a      	ldr	r2, [r7, #20]
 8006ee2:	2100      	movs	r1, #0
 8006ee4:	6938      	ldr	r0, [r7, #16]
 8006ee6:	f7ff fd39 	bl	800695c <xTimerGenericCommand>
 8006eea:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d109      	bne.n	8006f06 <prvSwitchTimerLists+0x92>
 8006ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef6:	f383 8811 	msr	BASEPRI, r3
 8006efa:	f3bf 8f6f 	isb	sy
 8006efe:	f3bf 8f4f 	dsb	sy
 8006f02:	603b      	str	r3, [r7, #0]
 8006f04:	e7fe      	b.n	8006f04 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006f06:	4b09      	ldr	r3, [pc, #36]	; (8006f2c <prvSwitchTimerLists+0xb8>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d1b5      	bne.n	8006e7c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006f10:	4b06      	ldr	r3, [pc, #24]	; (8006f2c <prvSwitchTimerLists+0xb8>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 8006f16:	4b06      	ldr	r3, [pc, #24]	; (8006f30 <prvSwitchTimerLists+0xbc>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a04      	ldr	r2, [pc, #16]	; (8006f2c <prvSwitchTimerLists+0xb8>)
 8006f1c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006f1e:	4a04      	ldr	r2, [pc, #16]	; (8006f30 <prvSwitchTimerLists+0xbc>)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6013      	str	r3, [r2, #0]
}
 8006f24:	bf00      	nop
 8006f26:	3718      	adds	r7, #24
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}
 8006f2c:	200142dc 	.word	0x200142dc
 8006f30:	200142e0 	.word	0x200142e0

08006f34 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006f38:	f7fc fd8a 	bl	8003a50 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006f3c:	4b12      	ldr	r3, [pc, #72]	; (8006f88 <prvCheckForValidListAndQueue+0x54>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d11d      	bne.n	8006f80 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8006f44:	4811      	ldr	r0, [pc, #68]	; (8006f8c <prvCheckForValidListAndQueue+0x58>)
 8006f46:	f7fc fbcd 	bl	80036e4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006f4a:	4811      	ldr	r0, [pc, #68]	; (8006f90 <prvCheckForValidListAndQueue+0x5c>)
 8006f4c:	f7fc fbca 	bl	80036e4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006f50:	4b10      	ldr	r3, [pc, #64]	; (8006f94 <prvCheckForValidListAndQueue+0x60>)
 8006f52:	4a0e      	ldr	r2, [pc, #56]	; (8006f8c <prvCheckForValidListAndQueue+0x58>)
 8006f54:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006f56:	4b10      	ldr	r3, [pc, #64]	; (8006f98 <prvCheckForValidListAndQueue+0x64>)
 8006f58:	4a0d      	ldr	r2, [pc, #52]	; (8006f90 <prvCheckForValidListAndQueue+0x5c>)
 8006f5a:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	210c      	movs	r1, #12
 8006f60:	200a      	movs	r0, #10
 8006f62:	f7fd f8d5 	bl	8004110 <xQueueGenericCreate>
 8006f66:	4602      	mov	r2, r0
 8006f68:	4b07      	ldr	r3, [pc, #28]	; (8006f88 <prvCheckForValidListAndQueue+0x54>)
 8006f6a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006f6c:	4b06      	ldr	r3, [pc, #24]	; (8006f88 <prvCheckForValidListAndQueue+0x54>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d005      	beq.n	8006f80 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006f74:	4b04      	ldr	r3, [pc, #16]	; (8006f88 <prvCheckForValidListAndQueue+0x54>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4908      	ldr	r1, [pc, #32]	; (8006f9c <prvCheckForValidListAndQueue+0x68>)
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f7fe f8e4 	bl	8005148 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f80:	f7fc fd94 	bl	8003aac <vPortExitCritical>
}
 8006f84:	bf00      	nop
 8006f86:	bd80      	pop	{r7, pc}
 8006f88:	200142e4 	.word	0x200142e4
 8006f8c:	200142b4 	.word	0x200142b4
 8006f90:	200142c8 	.word	0x200142c8
 8006f94:	200142dc 	.word	0x200142dc
 8006f98:	200142e0 	.word	0x200142e0
 8006f9c:	08009a04 	.word	0x08009a04

08006fa0 <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b083      	sub	sp, #12
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8006fa8:	4a06      	ldr	r2, [pc, #24]	; (8006fc4 <NVIC_PriorityGroupConfig+0x24>)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006fb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fb4:	60d3      	str	r3, [r2, #12]
}
 8006fb6:	bf00      	nop
 8006fb8:	370c      	adds	r7, #12
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc0:	4770      	bx	lr
 8006fc2:	bf00      	nop
 8006fc4:	e000ed00 	.word	0xe000ed00

08006fc8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b085      	sub	sp, #20
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	73fb      	strb	r3, [r7, #15]
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	73bb      	strb	r3, [r7, #14]
 8006fd8:	230f      	movs	r3, #15
 8006fda:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	78db      	ldrb	r3, [r3, #3]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d039      	beq.n	8007058 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8006fe4:	4b27      	ldr	r3, [pc, #156]	; (8007084 <NVIC_Init+0xbc>)
 8006fe6:	68db      	ldr	r3, [r3, #12]
 8006fe8:	43db      	mvns	r3, r3
 8006fea:	0a1b      	lsrs	r3, r3, #8
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	f003 0307 	and.w	r3, r3, #7
 8006ff2:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8006ff4:	7bfb      	ldrb	r3, [r7, #15]
 8006ff6:	f1c3 0304 	rsb	r3, r3, #4
 8006ffa:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8006ffc:	7b7a      	ldrb	r2, [r7, #13]
 8006ffe:	7bfb      	ldrb	r3, [r7, #15]
 8007000:	fa42 f303 	asr.w	r3, r2, r3
 8007004:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	785b      	ldrb	r3, [r3, #1]
 800700a:	461a      	mov	r2, r3
 800700c:	7bbb      	ldrb	r3, [r7, #14]
 800700e:	fa02 f303 	lsl.w	r3, r2, r3
 8007012:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	789a      	ldrb	r2, [r3, #2]
 8007018:	7b7b      	ldrb	r3, [r7, #13]
 800701a:	4013      	ands	r3, r2
 800701c:	b2da      	uxtb	r2, r3
 800701e:	7bfb      	ldrb	r3, [r7, #15]
 8007020:	4313      	orrs	r3, r2
 8007022:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8007024:	7bfb      	ldrb	r3, [r7, #15]
 8007026:	011b      	lsls	r3, r3, #4
 8007028:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800702a:	4a17      	ldr	r2, [pc, #92]	; (8007088 <NVIC_Init+0xc0>)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	4413      	add	r3, r2
 8007032:	7bfa      	ldrb	r2, [r7, #15]
 8007034:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8007038:	4a13      	ldr	r2, [pc, #76]	; (8007088 <NVIC_Init+0xc0>)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	095b      	lsrs	r3, r3, #5
 8007040:	b2db      	uxtb	r3, r3
 8007042:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	781b      	ldrb	r3, [r3, #0]
 8007048:	f003 031f 	and.w	r3, r3, #31
 800704c:	2101      	movs	r1, #1
 800704e:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8007052:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8007056:	e00f      	b.n	8007078 <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8007058:	490b      	ldr	r1, [pc, #44]	; (8007088 <NVIC_Init+0xc0>)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	095b      	lsrs	r3, r3, #5
 8007060:	b2db      	uxtb	r3, r3
 8007062:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	781b      	ldrb	r3, [r3, #0]
 8007068:	f003 031f 	and.w	r3, r3, #31
 800706c:	2201      	movs	r2, #1
 800706e:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8007070:	f100 0320 	add.w	r3, r0, #32
 8007074:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007078:	bf00      	nop
 800707a:	3714      	adds	r7, #20
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr
 8007084:	e000ed00 	.word	0xe000ed00
 8007088:	e000e100 	.word	0xe000e100

0800708c <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 800708c:	b480      	push	{r7}
 800708e:	b085      	sub	sp, #20
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8007094:	2300      	movs	r3, #0
 8007096:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8007098:	4b34      	ldr	r3, [pc, #208]	; (800716c <EXTI_Init+0xe0>)
 800709a:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	799b      	ldrb	r3, [r3, #6]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d04f      	beq.n	8007144 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 80070a4:	4931      	ldr	r1, [pc, #196]	; (800716c <EXTI_Init+0xe0>)
 80070a6:	4b31      	ldr	r3, [pc, #196]	; (800716c <EXTI_Init+0xe0>)
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	43db      	mvns	r3, r3
 80070b0:	4013      	ands	r3, r2
 80070b2:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 80070b4:	492d      	ldr	r1, [pc, #180]	; (800716c <EXTI_Init+0xe0>)
 80070b6:	4b2d      	ldr	r3, [pc, #180]	; (800716c <EXTI_Init+0xe0>)
 80070b8:	685a      	ldr	r2, [r3, #4]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	43db      	mvns	r3, r3
 80070c0:	4013      	ands	r3, r2
 80070c2:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	791b      	ldrb	r3, [r3, #4]
 80070c8:	461a      	mov	r2, r3
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	4413      	add	r3, r2
 80070ce:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	68fa      	ldr	r2, [r7, #12]
 80070d4:	6811      	ldr	r1, [r2, #0]
 80070d6:	687a      	ldr	r2, [r7, #4]
 80070d8:	6812      	ldr	r2, [r2, #0]
 80070da:	430a      	orrs	r2, r1
 80070dc:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 80070de:	4923      	ldr	r1, [pc, #140]	; (800716c <EXTI_Init+0xe0>)
 80070e0:	4b22      	ldr	r3, [pc, #136]	; (800716c <EXTI_Init+0xe0>)
 80070e2:	689a      	ldr	r2, [r3, #8]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	43db      	mvns	r3, r3
 80070ea:	4013      	ands	r3, r2
 80070ec:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 80070ee:	491f      	ldr	r1, [pc, #124]	; (800716c <EXTI_Init+0xe0>)
 80070f0:	4b1e      	ldr	r3, [pc, #120]	; (800716c <EXTI_Init+0xe0>)
 80070f2:	68da      	ldr	r2, [r3, #12]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	43db      	mvns	r3, r3
 80070fa:	4013      	ands	r3, r2
 80070fc:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	795b      	ldrb	r3, [r3, #5]
 8007102:	2b10      	cmp	r3, #16
 8007104:	d10e      	bne.n	8007124 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8007106:	4919      	ldr	r1, [pc, #100]	; (800716c <EXTI_Init+0xe0>)
 8007108:	4b18      	ldr	r3, [pc, #96]	; (800716c <EXTI_Init+0xe0>)
 800710a:	689a      	ldr	r2, [r3, #8]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4313      	orrs	r3, r2
 8007112:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8007114:	4915      	ldr	r1, [pc, #84]	; (800716c <EXTI_Init+0xe0>)
 8007116:	4b15      	ldr	r3, [pc, #84]	; (800716c <EXTI_Init+0xe0>)
 8007118:	68da      	ldr	r2, [r3, #12]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4313      	orrs	r3, r2
 8007120:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8007122:	e01d      	b.n	8007160 <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
 8007124:	4b11      	ldr	r3, [pc, #68]	; (800716c <EXTI_Init+0xe0>)
 8007126:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	795b      	ldrb	r3, [r3, #5]
 800712c:	461a      	mov	r2, r3
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	4413      	add	r3, r2
 8007132:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	68fa      	ldr	r2, [r7, #12]
 8007138:	6811      	ldr	r1, [r2, #0]
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	6812      	ldr	r2, [r2, #0]
 800713e:	430a      	orrs	r2, r1
 8007140:	601a      	str	r2, [r3, #0]
}
 8007142:	e00d      	b.n	8007160 <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	791b      	ldrb	r3, [r3, #4]
 8007148:	461a      	mov	r2, r3
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	4413      	add	r3, r2
 800714e:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	68fa      	ldr	r2, [r7, #12]
 8007154:	6811      	ldr	r1, [r2, #0]
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	6812      	ldr	r2, [r2, #0]
 800715a:	43d2      	mvns	r2, r2
 800715c:	400a      	ands	r2, r1
 800715e:	601a      	str	r2, [r3, #0]
}
 8007160:	bf00      	nop
 8007162:	3714      	adds	r7, #20
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr
 800716c:	40013c00 	.word	0x40013c00

08007170 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8007170:	b480      	push	{r7}
 8007172:	b083      	sub	sp, #12
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8007178:	4a04      	ldr	r2, [pc, #16]	; (800718c <EXTI_ClearITPendingBit+0x1c>)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6153      	str	r3, [r2, #20]
}
 800717e:	bf00      	nop
 8007180:	370c      	adds	r7, #12
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr
 800718a:	bf00      	nop
 800718c:	40013c00 	.word	0x40013c00

08007190 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8007190:	b480      	push	{r7}
 8007192:	b087      	sub	sp, #28
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800719a:	2300      	movs	r3, #0
 800719c:	617b      	str	r3, [r7, #20]
 800719e:	2300      	movs	r3, #0
 80071a0:	613b      	str	r3, [r7, #16]
 80071a2:	2300      	movs	r3, #0
 80071a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80071a6:	2300      	movs	r3, #0
 80071a8:	617b      	str	r3, [r7, #20]
 80071aa:	e076      	b.n	800729a <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80071ac:	2201      	movs	r2, #1
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	fa02 f303 	lsl.w	r3, r2, r3
 80071b4:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	4013      	ands	r3, r2
 80071be:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80071c0:	68fa      	ldr	r2, [r7, #12]
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d165      	bne.n	8007294 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	005b      	lsls	r3, r3, #1
 80071d0:	2103      	movs	r1, #3
 80071d2:	fa01 f303 	lsl.w	r3, r1, r3
 80071d6:	43db      	mvns	r3, r3
 80071d8:	401a      	ands	r2, r3
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	791b      	ldrb	r3, [r3, #4]
 80071e6:	4619      	mov	r1, r3
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	005b      	lsls	r3, r3, #1
 80071ec:	fa01 f303 	lsl.w	r3, r1, r3
 80071f0:	431a      	orrs	r2, r3
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	791b      	ldrb	r3, [r3, #4]
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	d003      	beq.n	8007206 <GPIO_Init+0x76>
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	791b      	ldrb	r3, [r3, #4]
 8007202:	2b02      	cmp	r3, #2
 8007204:	d12e      	bne.n	8007264 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	689a      	ldr	r2, [r3, #8]
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	005b      	lsls	r3, r3, #1
 800720e:	2103      	movs	r1, #3
 8007210:	fa01 f303 	lsl.w	r3, r1, r3
 8007214:	43db      	mvns	r3, r3
 8007216:	401a      	ands	r2, r3
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	689a      	ldr	r2, [r3, #8]
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	795b      	ldrb	r3, [r3, #5]
 8007224:	4619      	mov	r1, r3
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	005b      	lsls	r3, r3, #1
 800722a:	fa01 f303 	lsl.w	r3, r1, r3
 800722e:	431a      	orrs	r2, r3
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	685a      	ldr	r2, [r3, #4]
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	b29b      	uxth	r3, r3
 800723c:	4619      	mov	r1, r3
 800723e:	2301      	movs	r3, #1
 8007240:	408b      	lsls	r3, r1
 8007242:	43db      	mvns	r3, r3
 8007244:	401a      	ands	r2, r3
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	683a      	ldr	r2, [r7, #0]
 8007250:	7992      	ldrb	r2, [r2, #6]
 8007252:	4611      	mov	r1, r2
 8007254:	697a      	ldr	r2, [r7, #20]
 8007256:	b292      	uxth	r2, r2
 8007258:	fa01 f202 	lsl.w	r2, r1, r2
 800725c:	b292      	uxth	r2, r2
 800725e:	431a      	orrs	r2, r3
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	68da      	ldr	r2, [r3, #12]
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	b29b      	uxth	r3, r3
 800726c:	005b      	lsls	r3, r3, #1
 800726e:	2103      	movs	r1, #3
 8007270:	fa01 f303 	lsl.w	r3, r1, r3
 8007274:	43db      	mvns	r3, r3
 8007276:	401a      	ands	r2, r3
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	68da      	ldr	r2, [r3, #12]
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	79db      	ldrb	r3, [r3, #7]
 8007284:	4619      	mov	r1, r3
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	005b      	lsls	r3, r3, #1
 800728a:	fa01 f303 	lsl.w	r3, r1, r3
 800728e:	431a      	orrs	r2, r3
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	3301      	adds	r3, #1
 8007298:	617b      	str	r3, [r7, #20]
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	2b0f      	cmp	r3, #15
 800729e:	d985      	bls.n	80071ac <GPIO_Init+0x1c>
    }
  }
}
 80072a0:	bf00      	nop
 80072a2:	371c      	adds	r7, #28
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr

080072ac <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b083      	sub	sp, #12
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	460b      	mov	r3, r1
 80072b6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80072b8:	78fb      	ldrb	r3, [r7, #3]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d006      	beq.n	80072cc <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80072be:	490a      	ldr	r1, [pc, #40]	; (80072e8 <RCC_AHB1PeriphClockCmd+0x3c>)
 80072c0:	4b09      	ldr	r3, [pc, #36]	; (80072e8 <RCC_AHB1PeriphClockCmd+0x3c>)
 80072c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	4313      	orrs	r3, r2
 80072c8:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80072ca:	e006      	b.n	80072da <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80072cc:	4906      	ldr	r1, [pc, #24]	; (80072e8 <RCC_AHB1PeriphClockCmd+0x3c>)
 80072ce:	4b06      	ldr	r3, [pc, #24]	; (80072e8 <RCC_AHB1PeriphClockCmd+0x3c>)
 80072d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	43db      	mvns	r3, r3
 80072d6:	4013      	ands	r3, r2
 80072d8:	630b      	str	r3, [r1, #48]	; 0x30
}
 80072da:	bf00      	nop
 80072dc:	370c      	adds	r7, #12
 80072de:	46bd      	mov	sp, r7
 80072e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e4:	4770      	bx	lr
 80072e6:	bf00      	nop
 80072e8:	40023800 	.word	0x40023800

080072ec <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b083      	sub	sp, #12
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	460b      	mov	r3, r1
 80072f6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80072f8:	78fb      	ldrb	r3, [r7, #3]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d006      	beq.n	800730c <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80072fe:	490a      	ldr	r1, [pc, #40]	; (8007328 <RCC_APB2PeriphClockCmd+0x3c>)
 8007300:	4b09      	ldr	r3, [pc, #36]	; (8007328 <RCC_APB2PeriphClockCmd+0x3c>)
 8007302:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	4313      	orrs	r3, r2
 8007308:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 800730a:	e006      	b.n	800731a <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 800730c:	4906      	ldr	r1, [pc, #24]	; (8007328 <RCC_APB2PeriphClockCmd+0x3c>)
 800730e:	4b06      	ldr	r3, [pc, #24]	; (8007328 <RCC_APB2PeriphClockCmd+0x3c>)
 8007310:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	43db      	mvns	r3, r3
 8007316:	4013      	ands	r3, r2
 8007318:	644b      	str	r3, [r1, #68]	; 0x44
}
 800731a:	bf00      	nop
 800731c:	370c      	adds	r7, #12
 800731e:	46bd      	mov	sp, r7
 8007320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007324:	4770      	bx	lr
 8007326:	bf00      	nop
 8007328:	40023800 	.word	0x40023800

0800732c <SYSCFG_EXTILineConfig>:
  *           be (0..7) for STM32F42xxx/43xxx devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 800732c:	b490      	push	{r4, r7}
 800732e:	b084      	sub	sp, #16
 8007330:	af00      	add	r7, sp, #0
 8007332:	4603      	mov	r3, r0
 8007334:	460a      	mov	r2, r1
 8007336:	71fb      	strb	r3, [r7, #7]
 8007338:	4613      	mov	r3, r2
 800733a:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 800733c:	2300      	movs	r3, #0
 800733e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8007340:	79bb      	ldrb	r3, [r7, #6]
 8007342:	f003 0303 	and.w	r3, r3, #3
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	220f      	movs	r2, #15
 800734a:	fa02 f303 	lsl.w	r3, r2, r3
 800734e:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8007350:	4916      	ldr	r1, [pc, #88]	; (80073ac <SYSCFG_EXTILineConfig+0x80>)
 8007352:	79bb      	ldrb	r3, [r7, #6]
 8007354:	089b      	lsrs	r3, r3, #2
 8007356:	b2db      	uxtb	r3, r3
 8007358:	4618      	mov	r0, r3
 800735a:	4a14      	ldr	r2, [pc, #80]	; (80073ac <SYSCFG_EXTILineConfig+0x80>)
 800735c:	79bb      	ldrb	r3, [r7, #6]
 800735e:	089b      	lsrs	r3, r3, #2
 8007360:	b2db      	uxtb	r3, r3
 8007362:	3302      	adds	r3, #2
 8007364:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	43db      	mvns	r3, r3
 800736c:	401a      	ands	r2, r3
 800736e:	1c83      	adds	r3, r0, #2
 8007370:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8007374:	480d      	ldr	r0, [pc, #52]	; (80073ac <SYSCFG_EXTILineConfig+0x80>)
 8007376:	79bb      	ldrb	r3, [r7, #6]
 8007378:	089b      	lsrs	r3, r3, #2
 800737a:	b2db      	uxtb	r3, r3
 800737c:	461c      	mov	r4, r3
 800737e:	4a0b      	ldr	r2, [pc, #44]	; (80073ac <SYSCFG_EXTILineConfig+0x80>)
 8007380:	79bb      	ldrb	r3, [r7, #6]
 8007382:	089b      	lsrs	r3, r3, #2
 8007384:	b2db      	uxtb	r3, r3
 8007386:	3302      	adds	r3, #2
 8007388:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800738c:	79f9      	ldrb	r1, [r7, #7]
 800738e:	79bb      	ldrb	r3, [r7, #6]
 8007390:	f003 0303 	and.w	r3, r3, #3
 8007394:	009b      	lsls	r3, r3, #2
 8007396:	fa01 f303 	lsl.w	r3, r1, r3
 800739a:	431a      	orrs	r2, r3
 800739c:	1ca3      	adds	r3, r4, #2
 800739e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80073a2:	bf00      	nop
 80073a4:	3710      	adds	r7, #16
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bc90      	pop	{r4, r7}
 80073aa:	4770      	bx	lr
 80073ac:	40013800 	.word	0x40013800

080073b0 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 80073b0:	b480      	push	{r7}
 80073b2:	b083      	sub	sp, #12
 80073b4:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 80073b6:	4b21      	ldr	r3, [pc, #132]	; (800743c <_DoInit+0x8c>)
 80073b8:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2203      	movs	r2, #3
 80073be:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2203      	movs	r2, #3
 80073c4:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	4a1d      	ldr	r2, [pc, #116]	; (8007440 <_DoInit+0x90>)
 80073ca:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	4a1d      	ldr	r2, [pc, #116]	; (8007444 <_DoInit+0x94>)
 80073d0:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2240      	movs	r2, #64	; 0x40
 80073d6:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2200      	movs	r2, #0
 80073dc:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2200      	movs	r2, #0
 80073e2:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2200      	movs	r2, #0
 80073e8:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	4a14      	ldr	r2, [pc, #80]	; (8007440 <_DoInit+0x90>)
 80073ee:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	4a15      	ldr	r2, [pc, #84]	; (8007448 <_DoInit+0x98>)
 80073f4:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2210      	movs	r2, #16
 80073fa:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2200      	movs	r2, #0
 8007400:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2200      	movs	r2, #0
 8007406:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	3307      	adds	r3, #7
 8007412:	4a0e      	ldr	r2, [pc, #56]	; (800744c <_DoInit+0x9c>)
 8007414:	6810      	ldr	r0, [r2, #0]
 8007416:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	4a0d      	ldr	r2, [pc, #52]	; (8007450 <_DoInit+0xa0>)
 800741c:	6810      	ldr	r0, [r2, #0]
 800741e:	6018      	str	r0, [r3, #0]
 8007420:	8891      	ldrh	r1, [r2, #4]
 8007422:	7992      	ldrb	r2, [r2, #6]
 8007424:	8099      	strh	r1, [r3, #4]
 8007426:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2220      	movs	r2, #32
 800742c:	719a      	strb	r2, [r3, #6]
}
 800742e:	bf00      	nop
 8007430:	370c      	adds	r7, #12
 8007432:	46bd      	mov	sp, r7
 8007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007438:	4770      	bx	lr
 800743a:	bf00      	nop
 800743c:	20014a58 	.word	0x20014a58
 8007440:	08009a0c 	.word	0x08009a0c
 8007444:	200142f0 	.word	0x200142f0
 8007448:	20014330 	.word	0x20014330
 800744c:	08009a18 	.word	0x08009a18
 8007450:	08009a1c 	.word	0x08009a1c

08007454 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8007454:	b580      	push	{r7, lr}
 8007456:	b088      	sub	sp, #32
 8007458:	af00      	add	r7, sp, #0
 800745a:	60f8      	str	r0, [r7, #12]
 800745c:	60b9      	str	r1, [r7, #8]
 800745e:	607a      	str	r2, [r7, #4]
  unsigned RdOff;
  unsigned WrOff;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8007460:	2300      	movs	r3, #0
 8007462:	61bb      	str	r3, [r7, #24]
  WrOff = pRing->WrOff;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	68db      	ldr	r3, [r3, #12]
 8007468:	617b      	str	r3, [r7, #20]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	691b      	ldr	r3, [r3, #16]
 800746e:	613b      	str	r3, [r7, #16]
    if (RdOff > WrOff) {
 8007470:	693a      	ldr	r2, [r7, #16]
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	429a      	cmp	r2, r3
 8007476:	d905      	bls.n	8007484 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8007478:	693a      	ldr	r2, [r7, #16]
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	1ad3      	subs	r3, r2, r3
 800747e:	3b01      	subs	r3, #1
 8007480:	61fb      	str	r3, [r7, #28]
 8007482:	e007      	b.n	8007494 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	689a      	ldr	r2, [r3, #8]
 8007488:	6939      	ldr	r1, [r7, #16]
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	1acb      	subs	r3, r1, r3
 800748e:	4413      	add	r3, r2
 8007490:	3b01      	subs	r3, #1
 8007492:	61fb      	str	r3, [r7, #28]
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	689a      	ldr	r2, [r3, #8]
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	1ad3      	subs	r3, r2, r3
 800749c:	69fa      	ldr	r2, [r7, #28]
 800749e:	4293      	cmp	r3, r2
 80074a0:	bf28      	it	cs
 80074a2:	4613      	movcs	r3, r2
 80074a4:	61fb      	str	r3, [r7, #28]
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80074a6:	69fa      	ldr	r2, [r7, #28]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	4293      	cmp	r3, r2
 80074ac:	bf28      	it	cs
 80074ae:	4613      	movcs	r3, r2
 80074b0:	61fb      	str	r3, [r7, #28]
    memcpy(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	685a      	ldr	r2, [r3, #4]
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	4413      	add	r3, r2
 80074ba:	69fa      	ldr	r2, [r7, #28]
 80074bc:	68b9      	ldr	r1, [r7, #8]
 80074be:	4618      	mov	r0, r3
 80074c0:	f001 fef0 	bl	80092a4 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80074c4:	69ba      	ldr	r2, [r7, #24]
 80074c6:	69fb      	ldr	r3, [r7, #28]
 80074c8:	4413      	add	r3, r2
 80074ca:	61bb      	str	r3, [r7, #24]
    pBuffer         += NumBytesToWrite;
 80074cc:	68ba      	ldr	r2, [r7, #8]
 80074ce:	69fb      	ldr	r3, [r7, #28]
 80074d0:	4413      	add	r3, r2
 80074d2:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80074d4:	687a      	ldr	r2, [r7, #4]
 80074d6:	69fb      	ldr	r3, [r7, #28]
 80074d8:	1ad3      	subs	r3, r2, r3
 80074da:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80074dc:	697a      	ldr	r2, [r7, #20]
 80074de:	69fb      	ldr	r3, [r7, #28]
 80074e0:	4413      	add	r3, r2
 80074e2:	617b      	str	r3, [r7, #20]
    if (WrOff == pRing->SizeOfBuffer) {
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	689a      	ldr	r2, [r3, #8]
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d101      	bne.n	80074f2 <_WriteBlocking+0x9e>
      WrOff = 0u;
 80074ee:	2300      	movs	r3, #0
 80074f0:	617b      	str	r3, [r7, #20]
    }
    pRing->WrOff = WrOff;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	697a      	ldr	r2, [r7, #20]
 80074f6:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d1b5      	bne.n	800746a <_WriteBlocking+0x16>
  //
  return NumBytesWritten;
 80074fe:	69bb      	ldr	r3, [r7, #24]
}
 8007500:	4618      	mov	r0, r3
 8007502:	3720      	adds	r7, #32
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8007508:	b580      	push	{r7, lr}
 800750a:	b088      	sub	sp, #32
 800750c:	af00      	add	r7, sp, #0
 800750e:	60f8      	str	r0, [r7, #12]
 8007510:	60b9      	str	r1, [r7, #8]
 8007512:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;

  WrOff = pRing->WrOff;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	68db      	ldr	r3, [r3, #12]
 8007518:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	689a      	ldr	r2, [r3, #8]
 800751e:	69fb      	ldr	r3, [r7, #28]
 8007520:	1ad3      	subs	r3, r2, r3
 8007522:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8007524:	69ba      	ldr	r2, [r7, #24]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	429a      	cmp	r2, r3
 800752a:	d90e      	bls.n	800754a <_WriteNoCheck+0x42>
    //
    // All data fits before wrap around
    //
    memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	685a      	ldr	r2, [r3, #4]
 8007530:	69fb      	ldr	r3, [r7, #28]
 8007532:	4413      	add	r3, r2
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	68b9      	ldr	r1, [r7, #8]
 8007538:	4618      	mov	r0, r3
 800753a:	f001 feb3 	bl	80092a4 <memcpy>
    pRing->WrOff = WrOff + NumBytes;
 800753e:	69fa      	ldr	r2, [r7, #28]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	441a      	add	r2, r3
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	60da      	str	r2, [r3, #12]
    memcpy(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
    NumBytesAtOnce = NumBytes - Rem;
    memcpy(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
    pRing->WrOff = NumBytesAtOnce;
  }
}
 8007548:	e01a      	b.n	8007580 <_WriteNoCheck+0x78>
    NumBytesAtOnce = Rem;
 800754a:	69bb      	ldr	r3, [r7, #24]
 800754c:	617b      	str	r3, [r7, #20]
    memcpy(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	685a      	ldr	r2, [r3, #4]
 8007552:	69fb      	ldr	r3, [r7, #28]
 8007554:	4413      	add	r3, r2
 8007556:	697a      	ldr	r2, [r7, #20]
 8007558:	68b9      	ldr	r1, [r7, #8]
 800755a:	4618      	mov	r0, r3
 800755c:	f001 fea2 	bl	80092a4 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8007560:	687a      	ldr	r2, [r7, #4]
 8007562:	69bb      	ldr	r3, [r7, #24]
 8007564:	1ad3      	subs	r3, r2, r3
 8007566:	617b      	str	r3, [r7, #20]
    memcpy(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	6858      	ldr	r0, [r3, #4]
 800756c:	68ba      	ldr	r2, [r7, #8]
 800756e:	69bb      	ldr	r3, [r7, #24]
 8007570:	4413      	add	r3, r2
 8007572:	697a      	ldr	r2, [r7, #20]
 8007574:	4619      	mov	r1, r3
 8007576:	f001 fe95 	bl	80092a4 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	697a      	ldr	r2, [r7, #20]
 800757e:	60da      	str	r2, [r3, #12]
}
 8007580:	bf00      	nop
 8007582:	3720      	adds	r7, #32
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}

08007588 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8007588:	b480      	push	{r7}
 800758a:	b087      	sub	sp, #28
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	691b      	ldr	r3, [r3, #16]
 8007594:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	68db      	ldr	r3, [r3, #12]
 800759a:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800759c:	693a      	ldr	r2, [r7, #16]
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d808      	bhi.n	80075b6 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	689a      	ldr	r2, [r3, #8]
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	1ad2      	subs	r2, r2, r3
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	4413      	add	r3, r2
 80075b0:	3b01      	subs	r3, #1
 80075b2:	617b      	str	r3, [r7, #20]
 80075b4:	e004      	b.n	80075c0 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80075b6:	693a      	ldr	r2, [r7, #16]
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	1ad3      	subs	r3, r2, r3
 80075bc:	3b01      	subs	r3, #1
 80075be:	617b      	str	r3, [r7, #20]
  }
  return r;
 80075c0:	697b      	ldr	r3, [r7, #20]
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	371c      	adds	r7, #28
 80075c6:	46bd      	mov	sp, r7
 80075c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075cc:	4770      	bx	lr
	...

080075d0 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b08a      	sub	sp, #40	; 0x28
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	60b9      	str	r1, [r7, #8]
 80075da:	607a      	str	r2, [r7, #4]
  unsigned                RdOff;
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  //
  INIT();
 80075dc:	4b3c      	ldr	r3, [pc, #240]	; (80076d0 <SEGGER_RTT_ReadNoLock+0x100>)
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d101      	bne.n	80075e8 <SEGGER_RTT_ReadNoLock+0x18>
 80075e4:	f7ff fee4 	bl	80073b0 <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 80075e8:	68fa      	ldr	r2, [r7, #12]
 80075ea:	4613      	mov	r3, r2
 80075ec:	005b      	lsls	r3, r3, #1
 80075ee:	4413      	add	r3, r2
 80075f0:	00db      	lsls	r3, r3, #3
 80075f2:	3360      	adds	r3, #96	; 0x60
 80075f4:	4a36      	ldr	r2, [pc, #216]	; (80076d0 <SEGGER_RTT_ReadNoLock+0x100>)
 80075f6:	4413      	add	r3, r2
 80075f8:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 80075fe:	69bb      	ldr	r3, [r7, #24]
 8007600:	691b      	ldr	r3, [r3, #16]
 8007602:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8007604:	69bb      	ldr	r3, [r7, #24]
 8007606:	68db      	ldr	r3, [r3, #12]
 8007608:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 800760a:	2300      	movs	r3, #0
 800760c:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800760e:	6a3a      	ldr	r2, [r7, #32]
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	429a      	cmp	r2, r3
 8007614:	d92a      	bls.n	800766c <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8007616:	69bb      	ldr	r3, [r7, #24]
 8007618:	689a      	ldr	r2, [r3, #8]
 800761a:	6a3b      	ldr	r3, [r7, #32]
 800761c:	1ad3      	subs	r3, r2, r3
 800761e:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8007620:	693a      	ldr	r2, [r7, #16]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	4293      	cmp	r3, r2
 8007626:	bf28      	it	cs
 8007628:	4613      	movcs	r3, r2
 800762a:	613b      	str	r3, [r7, #16]
    memcpy(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 800762c:	69bb      	ldr	r3, [r7, #24]
 800762e:	685a      	ldr	r2, [r3, #4]
 8007630:	6a3b      	ldr	r3, [r7, #32]
 8007632:	4413      	add	r3, r2
 8007634:	693a      	ldr	r2, [r7, #16]
 8007636:	4619      	mov	r1, r3
 8007638:	69f8      	ldr	r0, [r7, #28]
 800763a:	f001 fe33 	bl	80092a4 <memcpy>
    NumBytesRead += NumBytesRem;
 800763e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	4413      	add	r3, r2
 8007644:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8007646:	69fa      	ldr	r2, [r7, #28]
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	4413      	add	r3, r2
 800764c:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 800764e:	687a      	ldr	r2, [r7, #4]
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	1ad3      	subs	r3, r2, r3
 8007654:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8007656:	6a3a      	ldr	r2, [r7, #32]
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	4413      	add	r3, r2
 800765c:	623b      	str	r3, [r7, #32]
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800765e:	69bb      	ldr	r3, [r7, #24]
 8007660:	689a      	ldr	r2, [r3, #8]
 8007662:	6a3b      	ldr	r3, [r7, #32]
 8007664:	429a      	cmp	r2, r3
 8007666:	d101      	bne.n	800766c <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 8007668:	2300      	movs	r3, #0
 800766a:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800766c:	697a      	ldr	r2, [r7, #20]
 800766e:	6a3b      	ldr	r3, [r7, #32]
 8007670:	1ad3      	subs	r3, r2, r3
 8007672:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8007674:	693a      	ldr	r2, [r7, #16]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	4293      	cmp	r3, r2
 800767a:	bf28      	it	cs
 800767c:	4613      	movcs	r3, r2
 800767e:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d018      	beq.n	80076b8 <SEGGER_RTT_ReadNoLock+0xe8>
    memcpy(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8007686:	69bb      	ldr	r3, [r7, #24]
 8007688:	685a      	ldr	r2, [r3, #4]
 800768a:	6a3b      	ldr	r3, [r7, #32]
 800768c:	4413      	add	r3, r2
 800768e:	693a      	ldr	r2, [r7, #16]
 8007690:	4619      	mov	r1, r3
 8007692:	69f8      	ldr	r0, [r7, #28]
 8007694:	f001 fe06 	bl	80092a4 <memcpy>
    NumBytesRead += NumBytesRem;
 8007698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	4413      	add	r3, r2
 800769e:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 80076a0:	69fa      	ldr	r2, [r7, #28]
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	4413      	add	r3, r2
 80076a6:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	1ad3      	subs	r3, r2, r3
 80076ae:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80076b0:	6a3a      	ldr	r2, [r7, #32]
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	4413      	add	r3, r2
 80076b6:	623b      	str	r3, [r7, #32]
  }
  if (NumBytesRead) {
 80076b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d002      	beq.n	80076c4 <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 80076be:	69bb      	ldr	r3, [r7, #24]
 80076c0:	6a3a      	ldr	r2, [r7, #32]
 80076c2:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80076c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3728      	adds	r7, #40	; 0x28
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}
 80076ce:	bf00      	nop
 80076d0:	20014a58 	.word	0x20014a58

080076d4 <SEGGER_RTT_Read>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_Read(unsigned BufferIndex, void* pBuffer, unsigned BufferSize) {
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b086      	sub	sp, #24
 80076d8:	af00      	add	r7, sp, #0
 80076da:	60f8      	str	r0, [r7, #12]
 80076dc:	60b9      	str	r1, [r7, #8]
 80076de:	607a      	str	r2, [r7, #4]
  unsigned NumBytesRead;
  //
  SEGGER_RTT_LOCK();
 80076e0:	f3ef 8311 	mrs	r3, BASEPRI
 80076e4:	f04f 0120 	mov.w	r1, #32
 80076e8:	f381 8811 	msr	BASEPRI, r1
 80076ec:	617b      	str	r3, [r7, #20]
  //
  // Call the non-locking read function
  //
  NumBytesRead = SEGGER_RTT_ReadNoLock(BufferIndex, pBuffer, BufferSize);
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	68b9      	ldr	r1, [r7, #8]
 80076f2:	68f8      	ldr	r0, [r7, #12]
 80076f4:	f7ff ff6c 	bl	80075d0 <SEGGER_RTT_ReadNoLock>
 80076f8:	6138      	str	r0, [r7, #16]
  //
  // Finish up.
  //
  SEGGER_RTT_UNLOCK();
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	f383 8811 	msr	BASEPRI, r3
  //
  return NumBytesRead;
 8007700:	693b      	ldr	r3, [r7, #16]
}
 8007702:	4618      	mov	r0, r3
 8007704:	3718      	adds	r7, #24
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}
	...

0800770c <SEGGER_RTT_WriteNoLock>:
*    (1) If there is not enough space in the "Up"-buffer, remaining characters of pBuffer are dropped.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800770c:	b580      	push	{r7, lr}
 800770e:	b088      	sub	sp, #32
 8007710:	af00      	add	r7, sp, #0
 8007712:	60f8      	str	r0, [r7, #12]
 8007714:	60b9      	str	r1, [r7, #8]
 8007716:	607a      	str	r2, [r7, #4]
  unsigned              Status;
  unsigned              Avail;
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;

  pData = (const char *)pBuffer;
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	61bb      	str	r3, [r7, #24]
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	1c5a      	adds	r2, r3, #1
 8007720:	4613      	mov	r3, r2
 8007722:	005b      	lsls	r3, r3, #1
 8007724:	4413      	add	r3, r2
 8007726:	00db      	lsls	r3, r3, #3
 8007728:	4a1e      	ldr	r2, [pc, #120]	; (80077a4 <SEGGER_RTT_WriteNoLock+0x98>)
 800772a:	4413      	add	r3, r2
 800772c:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	695b      	ldr	r3, [r3, #20]
 8007732:	2b01      	cmp	r3, #1
 8007734:	d017      	beq.n	8007766 <SEGGER_RTT_WriteNoLock+0x5a>
 8007736:	2b01      	cmp	r3, #1
 8007738:	d302      	bcc.n	8007740 <SEGGER_RTT_WriteNoLock+0x34>
 800773a:	2b02      	cmp	r3, #2
 800773c:	d023      	beq.n	8007786 <SEGGER_RTT_WriteNoLock+0x7a>
 800773e:	e029      	b.n	8007794 <SEGGER_RTT_WriteNoLock+0x88>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8007740:	6978      	ldr	r0, [r7, #20]
 8007742:	f7ff ff21 	bl	8007588 <_GetAvailWriteSpace>
 8007746:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8007748:	693a      	ldr	r2, [r7, #16]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	429a      	cmp	r2, r3
 800774e:	d202      	bcs.n	8007756 <SEGGER_RTT_WriteNoLock+0x4a>
      Status = 0u;
 8007750:	2300      	movs	r3, #0
 8007752:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8007754:	e021      	b.n	800779a <SEGGER_RTT_WriteNoLock+0x8e>
      Status = NumBytes;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	69b9      	ldr	r1, [r7, #24]
 800775e:	6978      	ldr	r0, [r7, #20]
 8007760:	f7ff fed2 	bl	8007508 <_WriteNoCheck>
    break;
 8007764:	e019      	b.n	800779a <SEGGER_RTT_WriteNoLock+0x8e>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8007766:	6978      	ldr	r0, [r7, #20]
 8007768:	f7ff ff0e 	bl	8007588 <_GetAvailWriteSpace>
 800776c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800776e:	687a      	ldr	r2, [r7, #4]
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	4293      	cmp	r3, r2
 8007774:	bf28      	it	cs
 8007776:	4613      	movcs	r3, r2
 8007778:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800777a:	69fa      	ldr	r2, [r7, #28]
 800777c:	69b9      	ldr	r1, [r7, #24]
 800777e:	6978      	ldr	r0, [r7, #20]
 8007780:	f7ff fec2 	bl	8007508 <_WriteNoCheck>
    break;
 8007784:	e009      	b.n	800779a <SEGGER_RTT_WriteNoLock+0x8e>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8007786:	687a      	ldr	r2, [r7, #4]
 8007788:	69b9      	ldr	r1, [r7, #24]
 800778a:	6978      	ldr	r0, [r7, #20]
 800778c:	f7ff fe62 	bl	8007454 <_WriteBlocking>
 8007790:	61f8      	str	r0, [r7, #28]
    break;
 8007792:	e002      	b.n	800779a <SEGGER_RTT_WriteNoLock+0x8e>
  default:
    Status = 0u;
 8007794:	2300      	movs	r3, #0
 8007796:	61fb      	str	r3, [r7, #28]
    break;
 8007798:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800779a:	69fb      	ldr	r3, [r7, #28]
}
 800779c:	4618      	mov	r0, r3
 800779e:	3720      	adds	r7, #32
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}
 80077a4:	20014a58 	.word	0x20014a58

080077a8 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) If there is not enough space in the "Up"-buffer, remaining characters of pBuffer are dropped.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b086      	sub	sp, #24
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	60f8      	str	r0, [r7, #12]
 80077b0:	60b9      	str	r1, [r7, #8]
 80077b2:	607a      	str	r2, [r7, #4]
  unsigned Status;
  //
  INIT();
 80077b4:	4b0d      	ldr	r3, [pc, #52]	; (80077ec <SEGGER_RTT_Write+0x44>)
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d101      	bne.n	80077c0 <SEGGER_RTT_Write+0x18>
 80077bc:	f7ff fdf8 	bl	80073b0 <_DoInit>
  SEGGER_RTT_LOCK();
 80077c0:	f3ef 8311 	mrs	r3, BASEPRI
 80077c4:	f04f 0120 	mov.w	r1, #32
 80077c8:	f381 8811 	msr	BASEPRI, r1
 80077cc:	617b      	str	r3, [r7, #20]
  //
  // Call the non-locking write function
  //
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	68b9      	ldr	r1, [r7, #8]
 80077d2:	68f8      	ldr	r0, [r7, #12]
 80077d4:	f7ff ff9a 	bl	800770c <SEGGER_RTT_WriteNoLock>
 80077d8:	6138      	str	r0, [r7, #16]
  //
  // Finish up.
  //
  SEGGER_RTT_UNLOCK();
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	f383 8811 	msr	BASEPRI, r3
  //
  return Status;
 80077e0:	693b      	ldr	r3, [r7, #16]
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3718      	adds	r7, #24
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}
 80077ea:	bf00      	nop
 80077ec:	20014a58 	.word	0x20014a58

080077f0 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b086      	sub	sp, #24
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	60f8      	str	r0, [r7, #12]
 80077f8:	60b9      	str	r1, [r7, #8]
 80077fa:	607a      	str	r2, [r7, #4]
 80077fc:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 80077fe:	4b30      	ldr	r3, [pc, #192]	; (80078c0 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8007800:	781b      	ldrb	r3, [r3, #0]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d101      	bne.n	800780a <SEGGER_RTT_ConfigUpBuffer+0x1a>
 8007806:	f7ff fdd3 	bl	80073b0 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 800780a:	4b2d      	ldr	r3, [pc, #180]	; (80078c0 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800780c:	691b      	ldr	r3, [r3, #16]
 800780e:	461a      	mov	r2, r3
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	429a      	cmp	r2, r3
 8007814:	d94c      	bls.n	80078b0 <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
 8007816:	f3ef 8311 	mrs	r3, BASEPRI
 800781a:	f04f 0120 	mov.w	r1, #32
 800781e:	f381 8811 	msr	BASEPRI, r1
 8007822:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d032      	beq.n	8007890 <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 800782a:	4925      	ldr	r1, [pc, #148]	; (80078c0 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	1c5a      	adds	r2, r3, #1
 8007830:	4613      	mov	r3, r2
 8007832:	005b      	lsls	r3, r3, #1
 8007834:	4413      	add	r3, r2
 8007836:	00db      	lsls	r3, r3, #3
 8007838:	440b      	add	r3, r1
 800783a:	68ba      	ldr	r2, [r7, #8]
 800783c:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800783e:	4920      	ldr	r1, [pc, #128]	; (80078c0 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	1c5a      	adds	r2, r3, #1
 8007844:	4613      	mov	r3, r2
 8007846:	005b      	lsls	r3, r3, #1
 8007848:	4413      	add	r3, r2
 800784a:	00db      	lsls	r3, r3, #3
 800784c:	440b      	add	r3, r1
 800784e:	3304      	adds	r3, #4
 8007850:	687a      	ldr	r2, [r7, #4]
 8007852:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8007854:	491a      	ldr	r1, [pc, #104]	; (80078c0 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8007856:	68fa      	ldr	r2, [r7, #12]
 8007858:	4613      	mov	r3, r2
 800785a:	005b      	lsls	r3, r3, #1
 800785c:	4413      	add	r3, r2
 800785e:	00db      	lsls	r3, r3, #3
 8007860:	440b      	add	r3, r1
 8007862:	3320      	adds	r3, #32
 8007864:	683a      	ldr	r2, [r7, #0]
 8007866:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 8007868:	4915      	ldr	r1, [pc, #84]	; (80078c0 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800786a:	68fa      	ldr	r2, [r7, #12]
 800786c:	4613      	mov	r3, r2
 800786e:	005b      	lsls	r3, r3, #1
 8007870:	4413      	add	r3, r2
 8007872:	00db      	lsls	r3, r3, #3
 8007874:	440b      	add	r3, r1
 8007876:	3328      	adds	r3, #40	; 0x28
 8007878:	2200      	movs	r2, #0
 800787a:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 800787c:	4910      	ldr	r1, [pc, #64]	; (80078c0 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800787e:	68fa      	ldr	r2, [r7, #12]
 8007880:	4613      	mov	r3, r2
 8007882:	005b      	lsls	r3, r3, #1
 8007884:	4413      	add	r3, r2
 8007886:	00db      	lsls	r3, r3, #3
 8007888:	440b      	add	r3, r1
 800788a:	3324      	adds	r3, #36	; 0x24
 800788c:	2200      	movs	r2, #0
 800788e:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 8007890:	490b      	ldr	r1, [pc, #44]	; (80078c0 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8007892:	68fa      	ldr	r2, [r7, #12]
 8007894:	4613      	mov	r3, r2
 8007896:	005b      	lsls	r3, r3, #1
 8007898:	4413      	add	r3, r2
 800789a:	00db      	lsls	r3, r3, #3
 800789c:	440b      	add	r3, r1
 800789e:	332c      	adds	r3, #44	; 0x2c
 80078a0:	6a3a      	ldr	r2, [r7, #32]
 80078a2:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80078aa:	2300      	movs	r3, #0
 80078ac:	617b      	str	r3, [r7, #20]
 80078ae:	e002      	b.n	80078b6 <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
 80078b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80078b4:	617b      	str	r3, [r7, #20]
  }
  return r;
 80078b6:	697b      	ldr	r3, [r7, #20]
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	3718      	adds	r7, #24
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}
 80078c0:	20014a58 	.word	0x20014a58

080078c4 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b086      	sub	sp, #24
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	60f8      	str	r0, [r7, #12]
 80078cc:	60b9      	str	r1, [r7, #8]
 80078ce:	607a      	str	r2, [r7, #4]
 80078d0:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 80078d2:	4b30      	ldr	r3, [pc, #192]	; (8007994 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80078d4:	781b      	ldrb	r3, [r3, #0]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d101      	bne.n	80078de <SEGGER_RTT_ConfigDownBuffer+0x1a>
 80078da:	f7ff fd69 	bl	80073b0 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 80078de:	4b2d      	ldr	r3, [pc, #180]	; (8007994 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80078e0:	695b      	ldr	r3, [r3, #20]
 80078e2:	461a      	mov	r2, r3
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	429a      	cmp	r2, r3
 80078e8:	d94b      	bls.n	8007982 <SEGGER_RTT_ConfigDownBuffer+0xbe>
    SEGGER_RTT_LOCK();
 80078ea:	f3ef 8311 	mrs	r3, BASEPRI
 80078ee:	f04f 0120 	mov.w	r1, #32
 80078f2:	f381 8811 	msr	BASEPRI, r1
 80078f6:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d031      	beq.n	8007962 <SEGGER_RTT_ConfigDownBuffer+0x9e>
      _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 80078fe:	4925      	ldr	r1, [pc, #148]	; (8007994 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8007900:	68fa      	ldr	r2, [r7, #12]
 8007902:	4613      	mov	r3, r2
 8007904:	005b      	lsls	r3, r3, #1
 8007906:	4413      	add	r3, r2
 8007908:	00db      	lsls	r3, r3, #3
 800790a:	440b      	add	r3, r1
 800790c:	3360      	adds	r3, #96	; 0x60
 800790e:	68ba      	ldr	r2, [r7, #8]
 8007910:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8007912:	4920      	ldr	r1, [pc, #128]	; (8007994 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8007914:	68fa      	ldr	r2, [r7, #12]
 8007916:	4613      	mov	r3, r2
 8007918:	005b      	lsls	r3, r3, #1
 800791a:	4413      	add	r3, r2
 800791c:	00db      	lsls	r3, r3, #3
 800791e:	440b      	add	r3, r1
 8007920:	3364      	adds	r3, #100	; 0x64
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8007926:	491b      	ldr	r1, [pc, #108]	; (8007994 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8007928:	68fa      	ldr	r2, [r7, #12]
 800792a:	4613      	mov	r3, r2
 800792c:	005b      	lsls	r3, r3, #1
 800792e:	4413      	add	r3, r2
 8007930:	00db      	lsls	r3, r3, #3
 8007932:	440b      	add	r3, r1
 8007934:	3368      	adds	r3, #104	; 0x68
 8007936:	683a      	ldr	r2, [r7, #0]
 8007938:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 800793a:	4916      	ldr	r1, [pc, #88]	; (8007994 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800793c:	68fa      	ldr	r2, [r7, #12]
 800793e:	4613      	mov	r3, r2
 8007940:	005b      	lsls	r3, r3, #1
 8007942:	4413      	add	r3, r2
 8007944:	00db      	lsls	r3, r3, #3
 8007946:	440b      	add	r3, r1
 8007948:	3370      	adds	r3, #112	; 0x70
 800794a:	2200      	movs	r2, #0
 800794c:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 800794e:	4911      	ldr	r1, [pc, #68]	; (8007994 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8007950:	68fa      	ldr	r2, [r7, #12]
 8007952:	4613      	mov	r3, r2
 8007954:	005b      	lsls	r3, r3, #1
 8007956:	4413      	add	r3, r2
 8007958:	00db      	lsls	r3, r3, #3
 800795a:	440b      	add	r3, r1
 800795c:	336c      	adds	r3, #108	; 0x6c
 800795e:	2200      	movs	r2, #0
 8007960:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 8007962:	490c      	ldr	r1, [pc, #48]	; (8007994 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8007964:	68fa      	ldr	r2, [r7, #12]
 8007966:	4613      	mov	r3, r2
 8007968:	005b      	lsls	r3, r3, #1
 800796a:	4413      	add	r3, r2
 800796c:	00db      	lsls	r3, r3, #3
 800796e:	440b      	add	r3, r1
 8007970:	3374      	adds	r3, #116	; 0x74
 8007972:	6a3a      	ldr	r2, [r7, #32]
 8007974:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800797c:	2300      	movs	r3, #0
 800797e:	617b      	str	r3, [r7, #20]
 8007980:	e002      	b.n	8007988 <SEGGER_RTT_ConfigDownBuffer+0xc4>
  } else {
    r = -1;
 8007982:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007986:	617b      	str	r3, [r7, #20]
  }
  return r;
 8007988:	697b      	ldr	r3, [r7, #20]
}
 800798a:	4618      	mov	r0, r3
 800798c:	3718      	adds	r7, #24
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}
 8007992:	bf00      	nop
 8007994:	20014a58 	.word	0x20014a58

08007998 <vTraceEnable>:
 * Function that enables the tracing and creates the control task. It will halt
 * execution until a Start command has been received if haltUntilStart is true.
 *
 ******************************************************************************/
void vTraceEnable(int startOption)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b088      	sub	sp, #32
 800799c:	af02      	add	r7, sp, #8
 800799e:	6078      	str	r0, [r7, #4]
	int bytes = 0;
 80079a0:	2300      	movs	r3, #0
 80079a2:	617b      	str	r3, [r7, #20]
	extern uint32_t RecorderEnabled;
	TracealyzerCommandType msg;
	
	if (HandleTzCtrl != NULL)
 80079a4:	4b37      	ldr	r3, [pc, #220]	; (8007a84 <vTraceEnable+0xec>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d166      	bne.n	8007a7a <vTraceEnable+0xe2>
		return;	/* Seems we already initiated */
	
	TRC_STREAM_PORT_INIT();
 80079ac:	2302      	movs	r3, #2
 80079ae:	9300      	str	r3, [sp, #0]
 80079b0:	f241 3388 	movw	r3, #5000	; 0x1388
 80079b4:	4a34      	ldr	r2, [pc, #208]	; (8007a88 <vTraceEnable+0xf0>)
 80079b6:	4935      	ldr	r1, [pc, #212]	; (8007a8c <vTraceEnable+0xf4>)
 80079b8:	2001      	movs	r0, #1
 80079ba:	f7ff ff19 	bl	80077f0 <SEGGER_RTT_ConfigUpBuffer>
 80079be:	2302      	movs	r3, #2
 80079c0:	9300      	str	r3, [sp, #0]
 80079c2:	2320      	movs	r3, #32
 80079c4:	4a32      	ldr	r2, [pc, #200]	; (8007a90 <vTraceEnable+0xf8>)
 80079c6:	4933      	ldr	r1, [pc, #204]	; (8007a94 <vTraceEnable+0xfc>)
 80079c8:	2001      	movs	r0, #1
 80079ca:	f7ff ff7b 	bl	80078c4 <SEGGER_RTT_ConfigDownBuffer>
	
	if (startOption == TRC_START_AWAIT_HOST)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2b02      	cmp	r3, #2
 80079d2:	d12f      	bne.n	8007a34 <vTraceEnable+0x9c>
	{
		/* We keep trying to read commands until the recorder has been started */
		do
		{
			bytes = 0;
 80079d4:	2300      	movs	r3, #0
 80079d6:	617b      	str	r3, [r7, #20]
			TRC_STREAM_PORT_READ_DATA(&msg, sizeof(TracealyzerCommandType), &bytes);
 80079d8:	4b2f      	ldr	r3, [pc, #188]	; (8007a98 <vTraceEnable+0x100>)
 80079da:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80079de:	4b2e      	ldr	r3, [pc, #184]	; (8007a98 <vTraceEnable+0x100>)
 80079e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d008      	beq.n	80079fa <vTraceEnable+0x62>
 80079e8:	f107 030c 	add.w	r3, r7, #12
 80079ec:	2208      	movs	r2, #8
 80079ee:	4619      	mov	r1, r3
 80079f0:	2001      	movs	r0, #1
 80079f2:	f7ff fe6f 	bl	80076d4 <SEGGER_RTT_Read>
 80079f6:	4603      	mov	r3, r0
 80079f8:	617b      	str	r3, [r7, #20]

			if (bytes == sizeof(TracealyzerCommandType))
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	2b08      	cmp	r3, #8
 80079fe:	d114      	bne.n	8007a2a <vTraceEnable+0x92>
			{
				if (prvIsValidCommand(&msg))
 8007a00:	f107 030c 	add.w	r3, r7, #12
 8007a04:	4618      	mov	r0, r3
 8007a06:	f000 ffab 	bl	8008960 <prvIsValidCommand>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d00c      	beq.n	8007a2a <vTraceEnable+0x92>
				{
					if (msg.cmdCode == CMD_SET_ACTIVE && msg.param1 == 1)
 8007a10:	7b3b      	ldrb	r3, [r7, #12]
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d104      	bne.n	8007a20 <vTraceEnable+0x88>
 8007a16:	7b7b      	ldrb	r3, [r7, #13]
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d101      	bne.n	8007a20 <vTraceEnable+0x88>
					{
						/* On start, init and reset the timestamping */
						TRC_PORT_SPECIFIC_INIT();
 8007a1c:	f001 f814 	bl	8008a48 <prvTraceInitCortexM>
					}
					
					prvProcessCommand(&msg);
 8007a20:	f107 030c 	add.w	r3, r7, #12
 8007a24:	4618      	mov	r0, r3
 8007a26:	f000 ffdc 	bl	80089e2 <prvProcessCommand>
				}
			}
		}
		while (RecorderEnabled == 0);
 8007a2a:	4b1c      	ldr	r3, [pc, #112]	; (8007a9c <vTraceEnable+0x104>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d0d0      	beq.n	80079d4 <vTraceEnable+0x3c>
 8007a32:	e010      	b.n	8007a56 <vTraceEnable+0xbe>
	}
	else if (startOption == TRC_START)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2b01      	cmp	r3, #1
 8007a38:	d10b      	bne.n	8007a52 <vTraceEnable+0xba>
	{
		/* We start streaming directly - this assumes that the interface is ready! */
		TRC_PORT_SPECIFIC_INIT();
 8007a3a:	f001 f805 	bl	8008a48 <prvTraceInitCortexM>
		
		msg.cmdCode = CMD_SET_ACTIVE;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	733b      	strb	r3, [r7, #12]
		msg.param1 = 1;
 8007a42:	2301      	movs	r3, #1
 8007a44:	737b      	strb	r3, [r7, #13]
		prvProcessCommand(&msg);
 8007a46:	f107 030c 	add.w	r3, r7, #12
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f000 ffc9 	bl	80089e2 <prvProcessCommand>
 8007a50:	e001      	b.n	8007a56 <vTraceEnable+0xbe>
	}
	else
	{
		/* On TRC_INIT */
		TRC_PORT_SPECIFIC_INIT();
 8007a52:	f000 fff9 	bl	8008a48 <prvTraceInitCortexM>
	}

	trcWarningChannel = xTraceRegisterString("Warnings from Recorder");
 8007a56:	4812      	ldr	r0, [pc, #72]	; (8007aa0 <vTraceEnable+0x108>)
 8007a58:	f000 f8f6 	bl	8007c48 <xTraceRegisterString>
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	4b11      	ldr	r3, [pc, #68]	; (8007aa4 <vTraceEnable+0x10c>)
 8007a60:	601a      	str	r2, [r3, #0]
  	/* Creates the TzCtrl task - receives trace commands (start, stop, ...) */
#if (configSUPPORT_STATIC_ALLOCATION == 1)
	HandleTzCtrl = xTaskCreateStatic(TzCtrl, "TzCtrl", TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, stackTzCtrl, &tcbTzCtrl);
	(void)HandleTzCtrl;
#else 
	xTaskCreate( TzCtrl, "TzCtrl", TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, &HandleTzCtrl );
 8007a62:	4b08      	ldr	r3, [pc, #32]	; (8007a84 <vTraceEnable+0xec>)
 8007a64:	9301      	str	r3, [sp, #4]
 8007a66:	2301      	movs	r3, #1
 8007a68:	9300      	str	r3, [sp, #0]
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007a70:	4908      	ldr	r1, [pc, #32]	; (8007a94 <vTraceEnable+0xfc>)
 8007a72:	480d      	ldr	r0, [pc, #52]	; (8007aa8 <vTraceEnable+0x110>)
 8007a74:	f7fd fbcc 	bl	8005210 <xTaskCreate>
 8007a78:	e000      	b.n	8007a7c <vTraceEnable+0xe4>
		return;	/* Seems we already initiated */
 8007a7a:	bf00      	nop
#endif
}
 8007a7c:	3718      	adds	r7, #24
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	bf00      	nop
 8007a84:	20014344 	.word	0x20014344
 8007a88:	20014b00 	.word	0x20014b00
 8007a8c:	08009a24 	.word	0x08009a24
 8007a90:	20014358 	.word	0x20014358
 8007a94:	08009a2c 	.word	0x08009a2c
 8007a98:	20014a58 	.word	0x20014a58
 8007a9c:	200149c8 	.word	0x200149c8
 8007aa0:	08009a34 	.word	0x08009a34
 8007aa4:	20015e88 	.word	0x20015e88
 8007aa8:	08007bdd 	.word	0x08007bdd

08007aac <prvTraceOnBegin>:
 * prvTraceOnBegin
 *
 * Called on trace begin.
 ******************************************************************************/
void prvTraceOnBegin()
{
 8007aac:	b480      	push	{r7}
 8007aae:	af00      	add	r7, sp, #0
	TRC_STREAM_PORT_ON_TRACE_BEGIN();
}
 8007ab0:	bf00      	nop
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab8:	4770      	bx	lr

08007aba <prvTraceOnEnd>:
 * prvTraceOnEnd
 *
 * Called on trace end.
 ******************************************************************************/
void prvTraceOnEnd()
{
 8007aba:	b480      	push	{r7}
 8007abc:	af00      	add	r7, sp, #0
	TRC_STREAM_PORT_ON_TRACE_END();
}
 8007abe:	bf00      	nop
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr

08007ac8 <prvTraceGetCurrentTaskHandle>:
 *
 * Function that returns the handle to the currently executing task.
 *
 ******************************************************************************/
void* prvTraceGetCurrentTaskHandle(void)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
 8007acc:	f7fe fcf6 	bl	80064bc <xTaskGetCurrentTaskHandle>
 8007ad0:	4603      	mov	r3, r0
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	bd80      	pop	{r7, pc}
	...

08007ad8 <prvIsNewTCB>:
 *
 * Tells if this task is already executing, or if there has been a task-switch.
 * Assumed to be called within a trace hook in kernel context.
 ******************************************************************************/
uint32_t prvIsNewTCB(void* pNewTCB)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b083      	sub	sp, #12
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
	if (pCurrentTCB != pNewTCB)
 8007ae0:	4b08      	ldr	r3, [pc, #32]	; (8007b04 <prvIsNewTCB+0x2c>)
 8007ae2:	681a      	ldr	r2, [r3, #0]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d004      	beq.n	8007af4 <prvIsNewTCB+0x1c>
	{
		pCurrentTCB = pNewTCB;
 8007aea:	4a06      	ldr	r2, [pc, #24]	; (8007b04 <prvIsNewTCB+0x2c>)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6013      	str	r3, [r2, #0]
		return 1;
 8007af0:	2301      	movs	r3, #1
 8007af2:	e000      	b.n	8007af6 <prvIsNewTCB+0x1e>
	}
	return 0;
 8007af4:	2300      	movs	r3, #0
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	370c      	adds	r7, #12
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr
 8007b02:	bf00      	nop
 8007b04:	20014340 	.word	0x20014340

08007b08 <prvCheckRecorderStatus>:
 * Called by TzCtrl task periodically (every 100 ms - seems reasonable).
 * Checks a number of diagnostic variables and give warnings as user events,
 * in most cases including a suggested solution.
 ******************************************************************************/
static void prvCheckRecorderStatus(void)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	af00      	add	r7, sp, #0
	if (NoRoomForSymbol > NoRoomForSymbol_last)
 8007b0c:	4b26      	ldr	r3, [pc, #152]	; (8007ba8 <prvCheckRecorderStatus+0xa0>)
 8007b0e:	681a      	ldr	r2, [r3, #0]
 8007b10:	4b26      	ldr	r3, [pc, #152]	; (8007bac <prvCheckRecorderStatus+0xa4>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d90b      	bls.n	8007b30 <prvCheckRecorderStatus+0x28>
	{
		vTracePrintF(trcWarningChannel, "TRC_CFG_SYMBOL_TABLE_SLOTS too small. Add %d slots.",
 8007b18:	4b25      	ldr	r3, [pc, #148]	; (8007bb0 <prvCheckRecorderStatus+0xa8>)
 8007b1a:	6818      	ldr	r0, [r3, #0]
 8007b1c:	4b22      	ldr	r3, [pc, #136]	; (8007ba8 <prvCheckRecorderStatus+0xa0>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	461a      	mov	r2, r3
 8007b22:	4924      	ldr	r1, [pc, #144]	; (8007bb4 <prvCheckRecorderStatus+0xac>)
 8007b24:	f000 f8a3 	bl	8007c6e <vTracePrintF>
			NoRoomForSymbol);

		NoRoomForSymbol_last = NoRoomForSymbol;
 8007b28:	4b1f      	ldr	r3, [pc, #124]	; (8007ba8 <prvCheckRecorderStatus+0xa0>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a1f      	ldr	r2, [pc, #124]	; (8007bac <prvCheckRecorderStatus+0xa4>)
 8007b2e:	6013      	str	r3, [r2, #0]
	}

	if (NoRoomForObjectData > NoRoomForObjectData_last)
 8007b30:	4b21      	ldr	r3, [pc, #132]	; (8007bb8 <prvCheckRecorderStatus+0xb0>)
 8007b32:	681a      	ldr	r2, [r3, #0]
 8007b34:	4b21      	ldr	r3, [pc, #132]	; (8007bbc <prvCheckRecorderStatus+0xb4>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	d90b      	bls.n	8007b54 <prvCheckRecorderStatus+0x4c>
	{
		vTracePrintF(trcWarningChannel, "TRC_CFG_OBJECT_DATA_SLOTS too small. Add %d slots.",
 8007b3c:	4b1c      	ldr	r3, [pc, #112]	; (8007bb0 <prvCheckRecorderStatus+0xa8>)
 8007b3e:	6818      	ldr	r0, [r3, #0]
 8007b40:	4b1d      	ldr	r3, [pc, #116]	; (8007bb8 <prvCheckRecorderStatus+0xb0>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	461a      	mov	r2, r3
 8007b46:	491e      	ldr	r1, [pc, #120]	; (8007bc0 <prvCheckRecorderStatus+0xb8>)
 8007b48:	f000 f891 	bl	8007c6e <vTracePrintF>
			NoRoomForObjectData);

		NoRoomForObjectData_last = NoRoomForObjectData;
 8007b4c:	4b1a      	ldr	r3, [pc, #104]	; (8007bb8 <prvCheckRecorderStatus+0xb0>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4a1a      	ldr	r2, [pc, #104]	; (8007bbc <prvCheckRecorderStatus+0xb4>)
 8007b52:	6013      	str	r3, [r2, #0]
	}

	if (LongestSymbolName > LongestSymbolName_last)
 8007b54:	4b1b      	ldr	r3, [pc, #108]	; (8007bc4 <prvCheckRecorderStatus+0xbc>)
 8007b56:	681a      	ldr	r2, [r3, #0]
 8007b58:	4b1b      	ldr	r3, [pc, #108]	; (8007bc8 <prvCheckRecorderStatus+0xc0>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d90f      	bls.n	8007b80 <prvCheckRecorderStatus+0x78>
	{
		if (LongestSymbolName > TRC_CFG_SYMBOL_MAX_LENGTH)
 8007b60:	4b18      	ldr	r3, [pc, #96]	; (8007bc4 <prvCheckRecorderStatus+0xbc>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	2b19      	cmp	r3, #25
 8007b66:	d907      	bls.n	8007b78 <prvCheckRecorderStatus+0x70>
		{
			vTracePrintF(trcWarningChannel, "TRC_CFG_SYMBOL_MAX_LENGTH too small. Add %d chars.",
 8007b68:	4b11      	ldr	r3, [pc, #68]	; (8007bb0 <prvCheckRecorderStatus+0xa8>)
 8007b6a:	6818      	ldr	r0, [r3, #0]
 8007b6c:	4b15      	ldr	r3, [pc, #84]	; (8007bc4 <prvCheckRecorderStatus+0xbc>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	461a      	mov	r2, r3
 8007b72:	4916      	ldr	r1, [pc, #88]	; (8007bcc <prvCheckRecorderStatus+0xc4>)
 8007b74:	f000 f87b 	bl	8007c6e <vTracePrintF>
				LongestSymbolName);
		}
		LongestSymbolName_last = LongestSymbolName;
 8007b78:	4b12      	ldr	r3, [pc, #72]	; (8007bc4 <prvCheckRecorderStatus+0xbc>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a12      	ldr	r2, [pc, #72]	; (8007bc8 <prvCheckRecorderStatus+0xc0>)
 8007b7e:	6013      	str	r3, [r2, #0]
	}

	if (MaxBytesTruncated > MaxBytesTruncated_last)
 8007b80:	4b13      	ldr	r3, [pc, #76]	; (8007bd0 <prvCheckRecorderStatus+0xc8>)
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	4b13      	ldr	r3, [pc, #76]	; (8007bd4 <prvCheckRecorderStatus+0xcc>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d90b      	bls.n	8007ba4 <prvCheckRecorderStatus+0x9c>

		A PSF event may store maximum 60 bytes payload, including data arguments
		and string characters. For User Events, also the User Event Channel ptr
		must be squeezed in, if a channel is specified. */

		vTracePrintF(trcWarningChannel, "String event too long, up to %d bytes truncated.",
 8007b8c:	4b08      	ldr	r3, [pc, #32]	; (8007bb0 <prvCheckRecorderStatus+0xa8>)
 8007b8e:	6818      	ldr	r0, [r3, #0]
 8007b90:	4b0f      	ldr	r3, [pc, #60]	; (8007bd0 <prvCheckRecorderStatus+0xc8>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	461a      	mov	r2, r3
 8007b96:	4910      	ldr	r1, [pc, #64]	; (8007bd8 <prvCheckRecorderStatus+0xd0>)
 8007b98:	f000 f869 	bl	8007c6e <vTracePrintF>
			MaxBytesTruncated);

		MaxBytesTruncated_last = MaxBytesTruncated;
 8007b9c:	4b0c      	ldr	r3, [pc, #48]	; (8007bd0 <prvCheckRecorderStatus+0xc8>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a0c      	ldr	r2, [pc, #48]	; (8007bd4 <prvCheckRecorderStatus+0xcc>)
 8007ba2:	6013      	str	r3, [r2, #0]
	}
}
 8007ba4:	bf00      	nop
 8007ba6:	bd80      	pop	{r7, pc}
 8007ba8:	200149d8 	.word	0x200149d8
 8007bac:	20014348 	.word	0x20014348
 8007bb0:	20015e88 	.word	0x20015e88
 8007bb4:	08009a4c 	.word	0x08009a4c
 8007bb8:	200149dc 	.word	0x200149dc
 8007bbc:	2001434c 	.word	0x2001434c
 8007bc0:	08009a80 	.word	0x08009a80
 8007bc4:	200149e0 	.word	0x200149e0
 8007bc8:	20014350 	.word	0x20014350
 8007bcc:	08009ab4 	.word	0x08009ab4
 8007bd0:	200149e4 	.word	0x200149e4
 8007bd4:	20014354 	.word	0x20014354
 8007bd8:	08009ae8 	.word	0x08009ae8

08007bdc <TzCtrl>:
 *
 * Task for receiving commands from Tracealyzer and for recorder diagnostics.
 *
 ******************************************************************************/
static portTASK_FUNCTION( TzCtrl, pvParameters )
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b086      	sub	sp, #24
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
	TracealyzerCommandType msg;
	int bytes = 0;
 8007be4:	2300      	movs	r3, #0
 8007be6:	60fb      	str	r3, [r7, #12]
	while (1)
	{
		do
		{
			/* Listen for new commands */
			bytes = 0;
 8007be8:	2300      	movs	r3, #0
 8007bea:	60fb      	str	r3, [r7, #12]
			TRC_STREAM_PORT_READ_DATA(&msg, sizeof(TracealyzerCommandType), &bytes);
 8007bec:	4b15      	ldr	r3, [pc, #84]	; (8007c44 <TzCtrl+0x68>)
 8007bee:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007bf2:	4b14      	ldr	r3, [pc, #80]	; (8007c44 <TzCtrl+0x68>)
 8007bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d008      	beq.n	8007c0e <TzCtrl+0x32>
 8007bfc:	f107 0310 	add.w	r3, r7, #16
 8007c00:	2208      	movs	r2, #8
 8007c02:	4619      	mov	r1, r3
 8007c04:	2001      	movs	r0, #1
 8007c06:	f7ff fd65 	bl	80076d4 <SEGGER_RTT_Read>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	60fb      	str	r3, [r7, #12]
			if (bytes == sizeof(TracealyzerCommandType))
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2b08      	cmp	r3, #8
 8007c12:	d10c      	bne.n	8007c2e <TzCtrl+0x52>
			{
				if (prvIsValidCommand(&msg))
 8007c14:	f107 0310 	add.w	r3, r7, #16
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f000 fea1 	bl	8008960 <prvIsValidCommand>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d004      	beq.n	8007c2e <TzCtrl+0x52>
				{
					prvProcessCommand(&msg); /* Start or Stop currently... */
 8007c24:	f107 0310 	add.w	r3, r7, #16
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f000 feda 	bl	80089e2 <prvProcessCommand>
				}
			}
			
			/* Send periodic data */
			bytes = 0;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	60fb      	str	r3, [r7, #12]
			TRC_STREAM_PORT_PERIODIC_SEND_DATA(&bytes);
			/* If there was data sent (bytes != 0), immediately loop around and do all this again. Otherwise, step out of this loop and sleep for a while. */
		}
		while (bytes != 0);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d1d7      	bne.n	8007be8 <TzCtrl+0xc>

		prvCheckRecorderStatus();
 8007c38:	f7ff ff66 	bl	8007b08 <prvCheckRecorderStatus>
		vTaskDelay(TRC_CFG_CTRL_TASK_DELAY);	/* 10ms */
 8007c3c:	200a      	movs	r0, #10
 8007c3e:	f7fd fd5f 	bl	8005700 <vTaskDelay>
	while (1)
 8007c42:	e7d1      	b.n	8007be8 <TzCtrl+0xc>
 8007c44:	20014a58 	.word	0x20014a58

08007c48 <xTraceRegisterString>:
 * xTraceRegisterString
 *
 * Stores a name for a user event channel, returns the handle.
 ******************************************************************************/
traceString xTraceRegisterString(const char* name)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b082      	sub	sp, #8
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
    prvTraceSaveSymbol((const void*)name, name);
 8007c50:	6879      	ldr	r1, [r7, #4]
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 fcce 	bl	80085f4 <prvTraceSaveSymbol>

	/* Always save in symbol table, if the recording has not yet started */
	prvTraceStoreStringEvent(1, PSF_EVENT_OBJ_NAME, (const char*)name, (uint32_t)name);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	687a      	ldr	r2, [r7, #4]
 8007c5c:	2103      	movs	r1, #3
 8007c5e:	2001      	movs	r0, #1
 8007c60:	f000 fbae 	bl	80083c0 <prvTraceStoreStringEvent>

	return (traceString)name;
 8007c64:	687b      	ldr	r3, [r7, #4]
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3708      	adds	r7, #8
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}

08007c6e <vTracePrintF>:
 * one data argument, the maximum string length is 48 chars. If this is exceeded
 * the string is truncated (4 bytes at a time).
 *
 ******************************************************************************/
void vTracePrintF(traceString chn, const char* fmt, ...)
{
 8007c6e:	b40e      	push	{r1, r2, r3}
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b089      	sub	sp, #36	; 0x24
 8007c74:	af02      	add	r7, sp, #8
 8007c76:	6078      	str	r0, [r7, #4]
	va_list vl;
	int i = 0;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	617b      	str	r3, [r7, #20]

	int nArgs = 0;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	613b      	str	r3, [r7, #16]

	/* Count the number of arguments in the format string (e.g., %d) */
	for (i = 0; (fmt[i] != 0) && (i < 52); i++)
 8007c80:	2300      	movs	r3, #0
 8007c82:	617b      	str	r3, [r7, #20]
 8007c84:	e015      	b.n	8007cb2 <vTracePrintF+0x44>
	{
		if (fmt[i] == '%')
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c8a:	4413      	add	r3, r2
 8007c8c:	781b      	ldrb	r3, [r3, #0]
 8007c8e:	2b25      	cmp	r3, #37	; 0x25
 8007c90:	d10c      	bne.n	8007cac <vTracePrintF+0x3e>
		{
			if (fmt[i + 1] != '%')
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	3301      	adds	r3, #1
 8007c96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c98:	4413      	add	r3, r2
 8007c9a:	781b      	ldrb	r3, [r3, #0]
 8007c9c:	2b25      	cmp	r3, #37	; 0x25
 8007c9e:	d002      	beq.n	8007ca6 <vTracePrintF+0x38>
			{
				nArgs++;        /* Found an argument */
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	613b      	str	r3, [r7, #16]
			}
			
			i++;      /* Move past format specifier or non-argument '%' */
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	3301      	adds	r3, #1
 8007caa:	617b      	str	r3, [r7, #20]
	for (i = 0; (fmt[i] != 0) && (i < 52); i++)
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	3301      	adds	r3, #1
 8007cb0:	617b      	str	r3, [r7, #20]
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cb6:	4413      	add	r3, r2
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d002      	beq.n	8007cc4 <vTracePrintF+0x56>
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	2b33      	cmp	r3, #51	; 0x33
 8007cc2:	dde0      	ble.n	8007c86 <vTracePrintF+0x18>
		}
	}

	va_start(vl, fmt);
 8007cc4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007cc8:	60fb      	str	r3, [r7, #12]
	
	if (chn != NULL)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d00c      	beq.n	8007cea <vTracePrintF+0x7c>
	{
		prvTraceStoreStringEventHelper(nArgs, (uint16_t)(PSF_EVENT_USER_EVENT + nArgs + 1), chn, fmt, &vl);
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	3391      	adds	r3, #145	; 0x91
 8007cd6:	b299      	uxth	r1, r3
 8007cd8:	f107 030c 	add.w	r3, r7, #12
 8007cdc:	9300      	str	r3, [sp, #0]
 8007cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce0:	687a      	ldr	r2, [r7, #4]
 8007ce2:	6938      	ldr	r0, [r7, #16]
 8007ce4:	f000 fb86 	bl	80083f4 <prvTraceStoreStringEventHelper>
	{
		prvTraceStoreStringEventHelper(nArgs, (uint16_t)(PSF_EVENT_USER_EVENT + nArgs), chn, fmt, &vl);
	}

	va_end(vl);
}
 8007ce8:	e00b      	b.n	8007d02 <vTracePrintF+0x94>
		prvTraceStoreStringEventHelper(nArgs, (uint16_t)(PSF_EVENT_USER_EVENT + nArgs), chn, fmt, &vl);
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	3390      	adds	r3, #144	; 0x90
 8007cf0:	b299      	uxth	r1, r3
 8007cf2:	f107 030c 	add.w	r3, r7, #12
 8007cf6:	9300      	str	r3, [sp, #0]
 8007cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfa:	687a      	ldr	r2, [r7, #4]
 8007cfc:	6938      	ldr	r0, [r7, #16]
 8007cfe:	f000 fb79 	bl	80083f4 <prvTraceStoreStringEventHelper>
}
 8007d02:	bf00      	nop
 8007d04:	371c      	adds	r7, #28
 8007d06:	46bd      	mov	sp, r7
 8007d08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007d0c:	b003      	add	sp, #12
 8007d0e:	4770      	bx	lr

08007d10 <prvSetRecorderEnabled>:
/*** INTERNAL FUNCTIONS *******************************************************/
/******************************************************************************/

/* Internal function for starting/stopping the recorder. */
static void prvSetRecorderEnabled(uint32_t isEnabled)
{
 8007d10:	b590      	push	{r4, r7, lr}
 8007d12:	b089      	sub	sp, #36	; 0x24
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  	void* currentTask;
	
	TRACE_ALLOC_CRITICAL_SECTION();
	
	currentTask = TRACE_GET_CURRENT_TASK();
 8007d18:	f7ff fed6 	bl	8007ac8 <prvTraceGetCurrentTaskHandle>
 8007d1c:	61f8      	str	r0, [r7, #28]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007d1e:	f3ef 8310 	mrs	r3, PRIMASK
 8007d22:	613b      	str	r3, [r7, #16]
  return(result);
 8007d24:	693b      	ldr	r3, [r7, #16]

	TRACE_ENTER_CRITICAL_SECTION();
 8007d26:	61bb      	str	r3, [r7, #24]
 8007d28:	2301      	movs	r3, #1
 8007d2a:	617b      	str	r3, [r7, #20]

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	f383 8810 	msr	PRIMASK, r3

    RecorderEnabled = isEnabled;
 8007d32:	4a1b      	ldr	r2, [pc, #108]	; (8007da0 <prvSetRecorderEnabled+0x90>)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6013      	str	r3, [r2, #0]

    if (currentTask == NULL)
 8007d38:	69fb      	ldr	r3, [r7, #28]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d101      	bne.n	8007d42 <prvSetRecorderEnabled+0x32>
    {
		currentTask = (void*)HANDLE_NO_TASK;
 8007d3e:	2302      	movs	r3, #2
 8007d40:	61fb      	str	r3, [r7, #28]
	}

	if (RecorderEnabled)
 8007d42:	4b17      	ldr	r3, [pc, #92]	; (8007da0 <prvSetRecorderEnabled+0x90>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d01f      	beq.n	8007d8a <prvSetRecorderEnabled+0x7a>
	{
        prvTraceOnBegin();
 8007d4a:	f7ff feaf 	bl	8007aac <prvTraceOnBegin>
        
     	eventCounter = 0;
 8007d4e:	4b15      	ldr	r3, [pc, #84]	; (8007da4 <prvSetRecorderEnabled+0x94>)
 8007d50:	2200      	movs	r2, #0
 8007d52:	601a      	str	r2, [r3, #0]
        ISR_stack_index = -1;
 8007d54:	4b14      	ldr	r3, [pc, #80]	; (8007da8 <prvSetRecorderEnabled+0x98>)
 8007d56:	22ff      	movs	r2, #255	; 0xff
 8007d58:	701a      	strb	r2, [r3, #0]
        prvTraceStoreHeader();
 8007d5a:	f000 f8bf 	bl	8007edc <prvTraceStoreHeader>
		prvTraceStoreSymbolTable();
 8007d5e:	f000 f829 	bl	8007db4 <prvTraceStoreSymbolTable>
    	prvTraceStoreObjectDataTable();
 8007d62:	f000 f871 	bl	8007e48 <prvTraceStoreObjectDataTable>
        prvTraceStoreEvent3(	PSF_EVENT_TRACE_START,
 8007d66:	4b11      	ldr	r3, [pc, #68]	; (8007dac <prvSetRecorderEnabled+0x9c>)
 8007d68:	6818      	ldr	r0, [r3, #0]
 8007d6a:	69fc      	ldr	r4, [r7, #28]
 8007d6c:	4b10      	ldr	r3, [pc, #64]	; (8007db0 <prvSetRecorderEnabled+0xa0>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	1c5a      	adds	r2, r3, #1
 8007d72:	490f      	ldr	r1, [pc, #60]	; (8007db0 <prvSetRecorderEnabled+0xa0>)
 8007d74:	600a      	str	r2, [r1, #0]
 8007d76:	4622      	mov	r2, r4
 8007d78:	4601      	mov	r1, r0
 8007d7a:	2001      	movs	r0, #1
 8007d7c:	f000 fa5e 	bl	800823c <prvTraceStoreEvent3>
							(uint32_t)TRACE_GET_OS_TICKS(),
							(uint32_t)currentTask,
							SessionCounter++);
        prvTraceStoreTSConfig();
 8007d80:	f000 fea0 	bl	8008ac4 <prvTraceStoreTSConfig>
		prvTraceStoreWarnings();
 8007d84:	f000 f8f4 	bl	8007f70 <prvTraceStoreWarnings>
 8007d88:	e001      	b.n	8007d8e <prvSetRecorderEnabled+0x7e>
	}
    else
    {
        prvTraceOnEnd();
 8007d8a:	f7ff fe96 	bl	8007aba <prvTraceOnEnd>
 8007d8e:	69bb      	ldr	r3, [r7, #24]
 8007d90:	60fb      	str	r3, [r7, #12]
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	f383 8810 	msr	PRIMASK, r3
    }

	TRACE_EXIT_CRITICAL_SECTION();
}
 8007d98:	bf00      	nop
 8007d9a:	3724      	adds	r7, #36	; 0x24
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd90      	pop	{r4, r7, pc}
 8007da0:	200149c8 	.word	0x200149c8
 8007da4:	200149cc 	.word	0x200149cc
 8007da8:	20000004 	.word	0x20000004
 8007dac:	200149d0 	.word	0x200149d0
 8007db0:	200149c4 	.word	0x200149c4

08007db4 <prvTraceStoreSymbolTable>:

/* Stores the symbol table on Start */
static void prvTraceStoreSymbolTable()
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b090      	sub	sp, #64	; 0x40
 8007db8:	af00      	add	r7, sp, #0
	uint32_t i = 0;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t j = 0;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007dc2:	f3ef 8310 	mrs	r3, PRIMASK
 8007dc6:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8007dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ENTER_CRITICAL_SECTION();
 8007dca:	637b      	str	r3, [r7, #52]	; 0x34
 8007dcc:	2301      	movs	r3, #1
 8007dce:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dd2:	f383 8810 	msr	PRIMASK, r3
	
	if (RecorderEnabled)
 8007dd6:	4b1a      	ldr	r3, [pc, #104]	; (8007e40 <prvTraceStoreSymbolTable+0x8c>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d027      	beq.n	8007e2e <prvTraceStoreSymbolTable+0x7a>
	{
		for (i = 0; i < (sizeof(SymbolTable) / sizeof(uint32_t)); i += (SYMBOL_TABLE_SLOT_SIZE / sizeof(uint32_t)))
 8007dde:	2300      	movs	r3, #0
 8007de0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007de2:	e020      	b.n	8007e26 <prvTraceStoreSymbolTable+0x72>
		{
            TRC_STREAM_PORT_ALLOCATE_EVENT(uint32_t, data, SYMBOL_TABLE_SLOT_SIZE);
 8007de4:	1d3b      	adds	r3, r7, #4
 8007de6:	633b      	str	r3, [r7, #48]	; 0x30
            if (data != NULL)
 8007de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d018      	beq.n	8007e20 <prvTraceStoreSymbolTable+0x6c>
            {
                for (j = 0; j < (SYMBOL_TABLE_SLOT_SIZE / sizeof(uint32_t)); j++)
 8007dee:	2300      	movs	r3, #0
 8007df0:	63bb      	str	r3, [r7, #56]	; 0x38
 8007df2:	e00d      	b.n	8007e10 <prvTraceStoreSymbolTable+0x5c>
                {
                        data[j] = symbolTable.SymbolTableBuffer.pSymbolTableBufferUINT32[i+j];
 8007df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007df6:	009b      	lsls	r3, r3, #2
 8007df8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dfa:	4413      	add	r3, r2
 8007dfc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007dfe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e00:	440a      	add	r2, r1
 8007e02:	4910      	ldr	r1, [pc, #64]	; (8007e44 <prvTraceStoreSymbolTable+0x90>)
 8007e04:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007e08:	601a      	str	r2, [r3, #0]
                for (j = 0; j < (SYMBOL_TABLE_SLOT_SIZE / sizeof(uint32_t)); j++)
 8007e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e0c:	3301      	adds	r3, #1
 8007e0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e12:	2b07      	cmp	r3, #7
 8007e14:	d9ee      	bls.n	8007df4 <prvTraceStoreSymbolTable+0x40>
                }
			    TRC_STREAM_PORT_COMMIT_EVENT(data, SYMBOL_TABLE_SLOT_SIZE);
 8007e16:	2220      	movs	r2, #32
 8007e18:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007e1a:	2001      	movs	r0, #1
 8007e1c:	f7ff fcc4 	bl	80077a8 <SEGGER_RTT_Write>
		for (i = 0; i < (sizeof(SymbolTable) / sizeof(uint32_t)); i += (SYMBOL_TABLE_SLOT_SIZE / sizeof(uint32_t)))
 8007e20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e22:	3308      	adds	r3, #8
 8007e24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e28:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8007e2c:	d3da      	bcc.n	8007de4 <prvTraceStoreSymbolTable+0x30>
 8007e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e30:	627b      	str	r3, [r7, #36]	; 0x24
 8007e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e34:	f383 8810 	msr	PRIMASK, r3
			}
		}
	}
	TRACE_EXIT_CRITICAL_SECTION();
}
 8007e38:	bf00      	nop
 8007e3a:	3740      	adds	r7, #64	; 0x40
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}
 8007e40:	200149c8 	.word	0x200149c8
 8007e44:	20014378 	.word	0x20014378

08007e48 <prvTraceStoreObjectDataTable>:

/* Stores the object table on Start */
static void prvTraceStoreObjectDataTable()
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b08a      	sub	sp, #40	; 0x28
 8007e4c:	af00      	add	r7, sp, #0
	uint32_t i = 0;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t j = 0;
 8007e52:	2300      	movs	r3, #0
 8007e54:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007e56:	f3ef 8310 	mrs	r3, PRIMASK
 8007e5a:	613b      	str	r3, [r7, #16]
  return(result);
 8007e5c:	693b      	ldr	r3, [r7, #16]
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ENTER_CRITICAL_SECTION();
 8007e5e:	61fb      	str	r3, [r7, #28]
 8007e60:	2301      	movs	r3, #1
 8007e62:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	f383 8810 	msr	PRIMASK, r3

	if (RecorderEnabled)
 8007e6a:	4b1a      	ldr	r3, [pc, #104]	; (8007ed4 <prvTraceStoreObjectDataTable+0x8c>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d026      	beq.n	8007ec0 <prvTraceStoreObjectDataTable+0x78>
	{
		for (i = 0; i < (sizeof(ObjectDataTable) / sizeof(uint32_t)); i += (OBJECT_DATA_SLOT_SIZE / sizeof(uint32_t)))
 8007e72:	2300      	movs	r3, #0
 8007e74:	627b      	str	r3, [r7, #36]	; 0x24
 8007e76:	e020      	b.n	8007eba <prvTraceStoreObjectDataTable+0x72>
        {
            TRC_STREAM_PORT_ALLOCATE_EVENT(uint32_t, data, OBJECT_DATA_SLOT_SIZE);
 8007e78:	1d3b      	adds	r3, r7, #4
 8007e7a:	61bb      	str	r3, [r7, #24]
            if (data != NULL)
 8007e7c:	69bb      	ldr	r3, [r7, #24]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d018      	beq.n	8007eb4 <prvTraceStoreObjectDataTable+0x6c>
            {
                for (j = 0; j < (OBJECT_DATA_SLOT_SIZE / sizeof(uint32_t)); j++)
 8007e82:	2300      	movs	r3, #0
 8007e84:	623b      	str	r3, [r7, #32]
 8007e86:	e00d      	b.n	8007ea4 <prvTraceStoreObjectDataTable+0x5c>
                {
                        data[j] = objectDataTable.ObjectDataTableBuffer.pObjectDataTableBufferUINT32[i+j];
 8007e88:	6a3b      	ldr	r3, [r7, #32]
 8007e8a:	009b      	lsls	r3, r3, #2
 8007e8c:	69ba      	ldr	r2, [r7, #24]
 8007e8e:	4413      	add	r3, r2
 8007e90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007e92:	6a3a      	ldr	r2, [r7, #32]
 8007e94:	440a      	add	r2, r1
 8007e96:	4910      	ldr	r1, [pc, #64]	; (8007ed8 <prvTraceStoreObjectDataTable+0x90>)
 8007e98:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007e9c:	601a      	str	r2, [r3, #0]
                for (j = 0; j < (OBJECT_DATA_SLOT_SIZE / sizeof(uint32_t)); j++)
 8007e9e:	6a3b      	ldr	r3, [r7, #32]
 8007ea0:	3301      	adds	r3, #1
 8007ea2:	623b      	str	r3, [r7, #32]
 8007ea4:	6a3b      	ldr	r3, [r7, #32]
 8007ea6:	2b01      	cmp	r3, #1
 8007ea8:	d9ee      	bls.n	8007e88 <prvTraceStoreObjectDataTable+0x40>
                }
                TRC_STREAM_PORT_COMMIT_EVENT(data, OBJECT_DATA_SLOT_SIZE);
 8007eaa:	2208      	movs	r2, #8
 8007eac:	69b9      	ldr	r1, [r7, #24]
 8007eae:	2001      	movs	r0, #1
 8007eb0:	f7ff fc7a 	bl	80077a8 <SEGGER_RTT_Write>
		for (i = 0; i < (sizeof(ObjectDataTable) / sizeof(uint32_t)); i += (OBJECT_DATA_SLOT_SIZE / sizeof(uint32_t)))
 8007eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb6:	3302      	adds	r3, #2
 8007eb8:	627b      	str	r3, [r7, #36]	; 0x24
 8007eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ebc:	2b4f      	cmp	r3, #79	; 0x4f
 8007ebe:	d9db      	bls.n	8007e78 <prvTraceStoreObjectDataTable+0x30>
 8007ec0:	69fb      	ldr	r3, [r7, #28]
 8007ec2:	60fb      	str	r3, [r7, #12]
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	f383 8810 	msr	PRIMASK, r3
			}
        }
	}
	TRACE_EXIT_CRITICAL_SECTION();
}
 8007eca:	bf00      	nop
 8007ecc:	3728      	adds	r7, #40	; 0x28
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}
 8007ed2:	bf00      	nop
 8007ed4:	200149c8 	.word	0x200149c8
 8007ed8:	2001487c 	.word	0x2001487c

08007edc <prvTraceStoreHeader>:

/* Stores the header information on Start */
static void prvTraceStoreHeader()
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b08a      	sub	sp, #40	; 0x28
 8007ee0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007ee2:	f3ef 8310 	mrs	r3, PRIMASK
 8007ee6:	61bb      	str	r3, [r7, #24]
  return(result);
 8007ee8:	69bb      	ldr	r3, [r7, #24]
  	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ENTER_CRITICAL_SECTION();
 8007eea:	627b      	str	r3, [r7, #36]	; 0x24
 8007eec:	2301      	movs	r3, #1
 8007eee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ef0:	69fb      	ldr	r3, [r7, #28]
 8007ef2:	f383 8810 	msr	PRIMASK, r3

	if (RecorderEnabled)
 8007ef6:	4b1b      	ldr	r3, [pc, #108]	; (8007f64 <prvTraceStoreHeader+0x88>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d028      	beq.n	8007f50 <prvTraceStoreHeader+0x74>
	{
	  	TRC_STREAM_PORT_ALLOCATE_EVENT(PSFHeaderInfo, header, sizeof(PSFHeaderInfo));
 8007efe:	463b      	mov	r3, r7
 8007f00:	623b      	str	r3, [r7, #32]
		if (header != NULL)
 8007f02:	6a3b      	ldr	r3, [r7, #32]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d023      	beq.n	8007f50 <prvTraceStoreHeader+0x74>
		{
			header->psf = PSFEndianessIdentifier;
 8007f08:	4b17      	ldr	r3, [pc, #92]	; (8007f68 <prvTraceStoreHeader+0x8c>)
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	6a3b      	ldr	r3, [r7, #32]
 8007f0e:	601a      	str	r2, [r3, #0]
			header->version = FormatVersion;
 8007f10:	4b16      	ldr	r3, [pc, #88]	; (8007f6c <prvTraceStoreHeader+0x90>)
 8007f12:	881a      	ldrh	r2, [r3, #0]
 8007f14:	6a3b      	ldr	r3, [r7, #32]
 8007f16:	809a      	strh	r2, [r3, #4]
			header->platform = TRACE_KERNEL_VERSION;
 8007f18:	6a3b      	ldr	r3, [r7, #32]
 8007f1a:	f641 22a1 	movw	r2, #6817	; 0x1aa1
 8007f1e:	80da      	strh	r2, [r3, #6]
            header->options = 0;
 8007f20:	6a3b      	ldr	r3, [r7, #32]
 8007f22:	2200      	movs	r2, #0
 8007f24:	609a      	str	r2, [r3, #8]
            /* Lowest bit used for TRC_IRQ_PRIORITY_ORDER */
            header->options = header->options | (TRC_IRQ_PRIORITY_ORDER << 0);
 8007f26:	6a3b      	ldr	r3, [r7, #32]
 8007f28:	689a      	ldr	r2, [r3, #8]
 8007f2a:	6a3b      	ldr	r3, [r7, #32]
 8007f2c:	609a      	str	r2, [r3, #8]
			header->symbolSize = SYMBOL_TABLE_SLOT_SIZE;
 8007f2e:	6a3b      	ldr	r3, [r7, #32]
 8007f30:	2220      	movs	r2, #32
 8007f32:	819a      	strh	r2, [r3, #12]
			header->symbolCount = (TRC_CFG_SYMBOL_TABLE_SLOTS);
 8007f34:	6a3b      	ldr	r3, [r7, #32]
 8007f36:	2228      	movs	r2, #40	; 0x28
 8007f38:	81da      	strh	r2, [r3, #14]
			header->objectDataSize = 8;
 8007f3a:	6a3b      	ldr	r3, [r7, #32]
 8007f3c:	2208      	movs	r2, #8
 8007f3e:	821a      	strh	r2, [r3, #16]
			header->objectDataCount = TRC_CFG_OBJECT_DATA_SLOTS;
 8007f40:	6a3b      	ldr	r3, [r7, #32]
 8007f42:	2228      	movs	r2, #40	; 0x28
 8007f44:	825a      	strh	r2, [r3, #18]
			TRC_STREAM_PORT_COMMIT_EVENT(header, sizeof(PSFHeaderInfo));
 8007f46:	2214      	movs	r2, #20
 8007f48:	6a39      	ldr	r1, [r7, #32]
 8007f4a:	2001      	movs	r0, #1
 8007f4c:	f7ff fc2c 	bl	80077a8 <SEGGER_RTT_Write>
 8007f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f52:	617b      	str	r3, [r7, #20]
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	f383 8810 	msr	PRIMASK, r3
		}
	}
	TRACE_EXIT_CRITICAL_SECTION();
}
 8007f5a:	bf00      	nop
 8007f5c:	3728      	adds	r7, #40	; 0x28
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
 8007f62:	bf00      	nop
 8007f64:	200149c8 	.word	0x200149c8
 8007f68:	20000008 	.word	0x20000008
 8007f6c:	2000000c 	.word	0x2000000c

08007f70 <prvTraceStoreWarnings>:

/* Store the current warnings */
static void prvTraceStoreWarnings()
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b084      	sub	sp, #16
 8007f74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007f76:	f3ef 8310 	mrs	r3, PRIMASK
 8007f7a:	607b      	str	r3, [r7, #4]
  return(result);
 8007f7c:	687b      	ldr	r3, [r7, #4]
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ENTER_CRITICAL_SECTION();
 8007f7e:	60fb      	str	r3, [r7, #12]
 8007f80:	2301      	movs	r3, #1
 8007f82:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	f383 8810 	msr	PRIMASK, r3

	if (RecorderEnabled)
 8007f8a:	4b2f      	ldr	r3, [pc, #188]	; (8008048 <prvTraceStoreWarnings+0xd8>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d050      	beq.n	8008034 <prvTraceStoreWarnings+0xc4>
	{
		if (NoRoomForSymbol > 0)
 8007f92:	4b2e      	ldr	r3, [pc, #184]	; (800804c <prvTraceStoreWarnings+0xdc>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d007      	beq.n	8007faa <prvTraceStoreWarnings+0x3a>
		{
			vTracePrintF(trcWarningChannel, "TRC_CFG_SYMBOL_TABLE_SLOTS too small. Add %d slots.", NoRoomForSymbol);
 8007f9a:	4b2d      	ldr	r3, [pc, #180]	; (8008050 <prvTraceStoreWarnings+0xe0>)
 8007f9c:	6818      	ldr	r0, [r3, #0]
 8007f9e:	4b2b      	ldr	r3, [pc, #172]	; (800804c <prvTraceStoreWarnings+0xdc>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	461a      	mov	r2, r3
 8007fa4:	492b      	ldr	r1, [pc, #172]	; (8008054 <prvTraceStoreWarnings+0xe4>)
 8007fa6:	f7ff fe62 	bl	8007c6e <vTracePrintF>
		}

		if (LongestSymbolName > 0)
 8007faa:	4b2b      	ldr	r3, [pc, #172]	; (8008058 <prvTraceStoreWarnings+0xe8>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d00c      	beq.n	8007fcc <prvTraceStoreWarnings+0x5c>
		{
			if (LongestSymbolName > (TRC_CFG_SYMBOL_MAX_LENGTH))
 8007fb2:	4b29      	ldr	r3, [pc, #164]	; (8008058 <prvTraceStoreWarnings+0xe8>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	2b19      	cmp	r3, #25
 8007fb8:	d908      	bls.n	8007fcc <prvTraceStoreWarnings+0x5c>
			{
				vTracePrintF(trcWarningChannel, "TRC_CFG_SYMBOL_MAX_LENGTH too small. Add %d chars.", LongestSymbolName - (TRC_CFG_SYMBOL_MAX_LENGTH));
 8007fba:	4b25      	ldr	r3, [pc, #148]	; (8008050 <prvTraceStoreWarnings+0xe0>)
 8007fbc:	6818      	ldr	r0, [r3, #0]
 8007fbe:	4b26      	ldr	r3, [pc, #152]	; (8008058 <prvTraceStoreWarnings+0xe8>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	3b19      	subs	r3, #25
 8007fc4:	461a      	mov	r2, r3
 8007fc6:	4925      	ldr	r1, [pc, #148]	; (800805c <prvTraceStoreWarnings+0xec>)
 8007fc8:	f7ff fe51 	bl	8007c6e <vTracePrintF>
			}
		}

		if (NoRoomForObjectData > 0)
 8007fcc:	4b24      	ldr	r3, [pc, #144]	; (8008060 <prvTraceStoreWarnings+0xf0>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d005      	beq.n	8007fe0 <prvTraceStoreWarnings+0x70>
		{
			/* We don't know how many objects we actually need to make room for since NoRoomForObjectData can be increased multiple times for the same object! */
			vTracePrintF(trcWarningChannel, "TRC_CFG_OBJECT_DATA_SLOTS too small. Add more slots.");
 8007fd4:	4b1e      	ldr	r3, [pc, #120]	; (8008050 <prvTraceStoreWarnings+0xe0>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4922      	ldr	r1, [pc, #136]	; (8008064 <prvTraceStoreWarnings+0xf4>)
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f7ff fe47 	bl	8007c6e <vTracePrintF>
		}

		if (MaxBytesTruncated > 0)
 8007fe0:	4b21      	ldr	r3, [pc, #132]	; (8008068 <prvTraceStoreWarnings+0xf8>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d007      	beq.n	8007ff8 <prvTraceStoreWarnings+0x88>

			A PSF event may store maximum 60 bytes payload, including data arguments
			and string characters. For User Events, also the User Event Channel ptr
			must be squeezed in, if a channel is specified. */

			vTracePrintF(trcWarningChannel, "String event too long, up to %d bytes truncated.", MaxBytesTruncated);
 8007fe8:	4b19      	ldr	r3, [pc, #100]	; (8008050 <prvTraceStoreWarnings+0xe0>)
 8007fea:	6818      	ldr	r0, [r3, #0]
 8007fec:	4b1e      	ldr	r3, [pc, #120]	; (8008068 <prvTraceStoreWarnings+0xf8>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	461a      	mov	r2, r3
 8007ff2:	491e      	ldr	r1, [pc, #120]	; (800806c <prvTraceStoreWarnings+0xfc>)
 8007ff4:	f7ff fe3b 	bl	8007c6e <vTracePrintF>
		}

		switch (errorCode)
 8007ff8:	4b1d      	ldr	r3, [pc, #116]	; (8008070 <prvTraceStoreWarnings+0x100>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	3b01      	subs	r3, #1
 8007ffe:	2b03      	cmp	r3, #3
 8008000:	d818      	bhi.n	8008034 <prvTraceStoreWarnings+0xc4>
 8008002:	a201      	add	r2, pc, #4	; (adr r2, 8008008 <prvTraceStoreWarnings+0x98>)
 8008004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008008:	08008035 	.word	0x08008035
 800800c:	08008035 	.word	0x08008035
 8008010:	08008019 	.word	0x08008019
 8008014:	08008027 	.word	0x08008027
		case PSF_ERROR_EVENT_CODE_TOO_LARGE:
			break;
		case PSF_ERROR_ISR_NESTING_OVERFLOW:			
			break;
		case PSF_ERROR_DWT_NOT_SUPPORTED:
			vTracePrintF(trcWarningChannel, "DWT not supported, see prvTraceInitCortexM.");
 8008018:	4b0d      	ldr	r3, [pc, #52]	; (8008050 <prvTraceStoreWarnings+0xe0>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4915      	ldr	r1, [pc, #84]	; (8008074 <prvTraceStoreWarnings+0x104>)
 800801e:	4618      	mov	r0, r3
 8008020:	f7ff fe25 	bl	8007c6e <vTracePrintF>
			break;
 8008024:	e006      	b.n	8008034 <prvTraceStoreWarnings+0xc4>
		case PSF_ERROR_DWT_CYCCNT_NOT_SUPPORTED:
			vTracePrintF(trcWarningChannel, "DWT_CYCCNT not supported, see prvTraceInitCortexM.");
 8008026:	4b0a      	ldr	r3, [pc, #40]	; (8008050 <prvTraceStoreWarnings+0xe0>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4913      	ldr	r1, [pc, #76]	; (8008078 <prvTraceStoreWarnings+0x108>)
 800802c:	4618      	mov	r0, r3
 800802e:	f7ff fe1e 	bl	8007c6e <vTracePrintF>
			break;
 8008032:	bf00      	nop
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	603b      	str	r3, [r7, #0]
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	f383 8810 	msr	PRIMASK, r3
		}
	}
	TRACE_EXIT_CRITICAL_SECTION();
}
 800803e:	bf00      	nop
 8008040:	3710      	adds	r7, #16
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}
 8008046:	bf00      	nop
 8008048:	200149c8 	.word	0x200149c8
 800804c:	200149d8 	.word	0x200149d8
 8008050:	20015e88 	.word	0x20015e88
 8008054:	08009c38 	.word	0x08009c38
 8008058:	200149e0 	.word	0x200149e0
 800805c:	08009c6c 	.word	0x08009c6c
 8008060:	200149dc 	.word	0x200149dc
 8008064:	08009ca0 	.word	0x08009ca0
 8008068:	200149e4 	.word	0x200149e4
 800806c:	08009cd8 	.word	0x08009cd8
 8008070:	200149c0 	.word	0x200149c0
 8008074:	08009d0c 	.word	0x08009d0c
 8008078:	08009d38 	.word	0x08009d38

0800807c <prvTraceStoreEvent0>:

/* Store an event with zero parameters (event ID only) */
void prvTraceStoreEvent0(uint16_t eventID)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b08a      	sub	sp, #40	; 0x28
 8008080:	af00      	add	r7, sp, #0
 8008082:	4603      	mov	r3, r0
 8008084:	80fb      	strh	r3, [r7, #6]
  	TRACE_ALLOC_CRITICAL_SECTION();

	PSF_ASSERT(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 8008086:	88fb      	ldrh	r3, [r7, #6]
 8008088:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800808c:	d303      	bcc.n	8008096 <prvTraceStoreEvent0+0x1a>
 800808e:	2001      	movs	r0, #1
 8008090:	f000 fcba 	bl	8008a08 <prvTraceError>
 8008094:	e02f      	b.n	80080f6 <prvTraceStoreEvent0+0x7a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008096:	f3ef 8310 	mrs	r3, PRIMASK
 800809a:	61bb      	str	r3, [r7, #24]
  return(result);
 800809c:	69bb      	ldr	r3, [r7, #24]

	TRACE_ENTER_CRITICAL_SECTION();
 800809e:	627b      	str	r3, [r7, #36]	; 0x24
 80080a0:	2301      	movs	r3, #1
 80080a2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080a4:	69fb      	ldr	r3, [r7, #28]
 80080a6:	f383 8810 	msr	PRIMASK, r3

	if (RecorderEnabled)
 80080aa:	4b14      	ldr	r3, [pc, #80]	; (80080fc <prvTraceStoreEvent0+0x80>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d01c      	beq.n	80080ec <prvTraceStoreEvent0+0x70>
	{
		eventCounter++;
 80080b2:	4b13      	ldr	r3, [pc, #76]	; (8008100 <prvTraceStoreEvent0+0x84>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	3301      	adds	r3, #1
 80080b8:	4a11      	ldr	r2, [pc, #68]	; (8008100 <prvTraceStoreEvent0+0x84>)
 80080ba:	6013      	str	r3, [r2, #0]

		{
			TRC_STREAM_PORT_ALLOCATE_EVENT(BaseEvent, event, sizeof(BaseEvent));
 80080bc:	f107 030c 	add.w	r3, r7, #12
 80080c0:	623b      	str	r3, [r7, #32]
			if (event != NULL)
 80080c2:	6a3b      	ldr	r3, [r7, #32]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d011      	beq.n	80080ec <prvTraceStoreEvent0+0x70>
			{
				event->EventID = eventID | PARAM_COUNT(0);
 80080c8:	6a3b      	ldr	r3, [r7, #32]
 80080ca:	88fa      	ldrh	r2, [r7, #6]
 80080cc:	801a      	strh	r2, [r3, #0]
				event->EventCount = (uint16_t)eventCounter;
 80080ce:	4b0c      	ldr	r3, [pc, #48]	; (8008100 <prvTraceStoreEvent0+0x84>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	b29a      	uxth	r2, r3
 80080d4:	6a3b      	ldr	r3, [r7, #32]
 80080d6:	805a      	strh	r2, [r3, #2]
				event->TS = prvGetTimestamp32();
 80080d8:	f000 fce8 	bl	8008aac <prvGetTimestamp32>
 80080dc:	4602      	mov	r2, r0
 80080de:	6a3b      	ldr	r3, [r7, #32]
 80080e0:	605a      	str	r2, [r3, #4]
				TRC_STREAM_PORT_COMMIT_EVENT(event, sizeof(BaseEvent));
 80080e2:	2208      	movs	r2, #8
 80080e4:	6a39      	ldr	r1, [r7, #32]
 80080e6:	2001      	movs	r0, #1
 80080e8:	f7ff fb5e 	bl	80077a8 <SEGGER_RTT_Write>
 80080ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ee:	617b      	str	r3, [r7, #20]
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	f383 8810 	msr	PRIMASK, r3
			}
		}
	}
	TRACE_EXIT_CRITICAL_SECTION();
}
 80080f6:	3728      	adds	r7, #40	; 0x28
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}
 80080fc:	200149c8 	.word	0x200149c8
 8008100:	200149cc 	.word	0x200149cc

08008104 <prvTraceStoreEvent1>:

/* Store an event with one 32-bit parameter (pointer address or an int) */
void prvTraceStoreEvent1(uint16_t eventID, uint32_t param1)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b08a      	sub	sp, #40	; 0x28
 8008108:	af00      	add	r7, sp, #0
 800810a:	4603      	mov	r3, r0
 800810c:	6039      	str	r1, [r7, #0]
 800810e:	80fb      	strh	r3, [r7, #6]
  	TRACE_ALLOC_CRITICAL_SECTION();

	PSF_ASSERT(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 8008110:	88fb      	ldrh	r3, [r7, #6]
 8008112:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008116:	d303      	bcc.n	8008120 <prvTraceStoreEvent1+0x1c>
 8008118:	2001      	movs	r0, #1
 800811a:	f000 fc75 	bl	8008a08 <prvTraceError>
 800811e:	e035      	b.n	800818c <prvTraceStoreEvent1+0x88>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008120:	f3ef 8310 	mrs	r3, PRIMASK
 8008124:	61bb      	str	r3, [r7, #24]
  return(result);
 8008126:	69bb      	ldr	r3, [r7, #24]

	TRACE_ENTER_CRITICAL_SECTION();
 8008128:	627b      	str	r3, [r7, #36]	; 0x24
 800812a:	2301      	movs	r3, #1
 800812c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800812e:	69fb      	ldr	r3, [r7, #28]
 8008130:	f383 8810 	msr	PRIMASK, r3

	if (RecorderEnabled)
 8008134:	4b17      	ldr	r3, [pc, #92]	; (8008194 <prvTraceStoreEvent1+0x90>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d022      	beq.n	8008182 <prvTraceStoreEvent1+0x7e>
	{
		eventCounter++;
 800813c:	4b16      	ldr	r3, [pc, #88]	; (8008198 <prvTraceStoreEvent1+0x94>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	3301      	adds	r3, #1
 8008142:	4a15      	ldr	r2, [pc, #84]	; (8008198 <prvTraceStoreEvent1+0x94>)
 8008144:	6013      	str	r3, [r2, #0]
		
		{
			TRC_STREAM_PORT_ALLOCATE_EVENT(EventWithParam_1, event, sizeof(EventWithParam_1));
 8008146:	f107 0308 	add.w	r3, r7, #8
 800814a:	623b      	str	r3, [r7, #32]
			if (event != NULL)
 800814c:	6a3b      	ldr	r3, [r7, #32]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d017      	beq.n	8008182 <prvTraceStoreEvent1+0x7e>
			{
				event->base.EventID = eventID | PARAM_COUNT(1);
 8008152:	88fb      	ldrh	r3, [r7, #6]
 8008154:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008158:	b29a      	uxth	r2, r3
 800815a:	6a3b      	ldr	r3, [r7, #32]
 800815c:	801a      	strh	r2, [r3, #0]
				event->base.EventCount = (uint16_t)eventCounter;
 800815e:	4b0e      	ldr	r3, [pc, #56]	; (8008198 <prvTraceStoreEvent1+0x94>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	b29a      	uxth	r2, r3
 8008164:	6a3b      	ldr	r3, [r7, #32]
 8008166:	805a      	strh	r2, [r3, #2]
				event->base.TS = prvGetTimestamp32();
 8008168:	f000 fca0 	bl	8008aac <prvGetTimestamp32>
 800816c:	4602      	mov	r2, r0
 800816e:	6a3b      	ldr	r3, [r7, #32]
 8008170:	605a      	str	r2, [r3, #4]
				event->param1 = (uint32_t)param1;
 8008172:	6a3b      	ldr	r3, [r7, #32]
 8008174:	683a      	ldr	r2, [r7, #0]
 8008176:	609a      	str	r2, [r3, #8]
				TRC_STREAM_PORT_COMMIT_EVENT(event, sizeof(EventWithParam_1));
 8008178:	220c      	movs	r2, #12
 800817a:	6a39      	ldr	r1, [r7, #32]
 800817c:	2001      	movs	r0, #1
 800817e:	f7ff fb13 	bl	80077a8 <SEGGER_RTT_Write>
 8008182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008184:	617b      	str	r3, [r7, #20]
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	f383 8810 	msr	PRIMASK, r3
			}
		}
	}
	TRACE_EXIT_CRITICAL_SECTION();
}
 800818c:	3728      	adds	r7, #40	; 0x28
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
 8008192:	bf00      	nop
 8008194:	200149c8 	.word	0x200149c8
 8008198:	200149cc 	.word	0x200149cc

0800819c <prvTraceStoreEvent2>:

/* Store an event with two 32-bit parameters */
void prvTraceStoreEvent2(uint16_t eventID, uint32_t param1, uint32_t param2)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b08e      	sub	sp, #56	; 0x38
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	4603      	mov	r3, r0
 80081a4:	60b9      	str	r1, [r7, #8]
 80081a6:	607a      	str	r2, [r7, #4]
 80081a8:	81fb      	strh	r3, [r7, #14]
  	TRACE_ALLOC_CRITICAL_SECTION();

	PSF_ASSERT(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 80081aa:	89fb      	ldrh	r3, [r7, #14]
 80081ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081b0:	d303      	bcc.n	80081ba <prvTraceStoreEvent2+0x1e>
 80081b2:	2001      	movs	r0, #1
 80081b4:	f000 fc28 	bl	8008a08 <prvTraceError>
 80081b8:	e038      	b.n	800822c <prvTraceStoreEvent2+0x90>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80081ba:	f3ef 8310 	mrs	r3, PRIMASK
 80081be:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80081c0:	6abb      	ldr	r3, [r7, #40]	; 0x28

	TRACE_ENTER_CRITICAL_SECTION();
 80081c2:	637b      	str	r3, [r7, #52]	; 0x34
 80081c4:	2301      	movs	r3, #1
 80081c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ca:	f383 8810 	msr	PRIMASK, r3

	if (RecorderEnabled)
 80081ce:	4b19      	ldr	r3, [pc, #100]	; (8008234 <prvTraceStoreEvent2+0x98>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d025      	beq.n	8008222 <prvTraceStoreEvent2+0x86>
	{
		eventCounter++;
 80081d6:	4b18      	ldr	r3, [pc, #96]	; (8008238 <prvTraceStoreEvent2+0x9c>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	3301      	adds	r3, #1
 80081dc:	4a16      	ldr	r2, [pc, #88]	; (8008238 <prvTraceStoreEvent2+0x9c>)
 80081de:	6013      	str	r3, [r2, #0]

		{
			TRC_STREAM_PORT_ALLOCATE_EVENT(EventWithParam_2, event, sizeof(EventWithParam_2));
 80081e0:	f107 0314 	add.w	r3, r7, #20
 80081e4:	633b      	str	r3, [r7, #48]	; 0x30
			if (event != NULL)
 80081e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d01a      	beq.n	8008222 <prvTraceStoreEvent2+0x86>
			{
				event->base.EventID = eventID | PARAM_COUNT(2);
 80081ec:	89fb      	ldrh	r3, [r7, #14]
 80081ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80081f2:	b29a      	uxth	r2, r3
 80081f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f6:	801a      	strh	r2, [r3, #0]
				event->base.EventCount = (uint16_t)eventCounter;
 80081f8:	4b0f      	ldr	r3, [pc, #60]	; (8008238 <prvTraceStoreEvent2+0x9c>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	b29a      	uxth	r2, r3
 80081fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008200:	805a      	strh	r2, [r3, #2]
				event->base.TS = prvGetTimestamp32();
 8008202:	f000 fc53 	bl	8008aac <prvGetTimestamp32>
 8008206:	4602      	mov	r2, r0
 8008208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800820a:	605a      	str	r2, [r3, #4]
				event->param1 = (uint32_t)param1;
 800820c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800820e:	68ba      	ldr	r2, [r7, #8]
 8008210:	609a      	str	r2, [r3, #8]
				event->param2 = param2;
 8008212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008214:	687a      	ldr	r2, [r7, #4]
 8008216:	60da      	str	r2, [r3, #12]
				TRC_STREAM_PORT_COMMIT_EVENT(event, sizeof(EventWithParam_2));
 8008218:	2210      	movs	r2, #16
 800821a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800821c:	2001      	movs	r0, #1
 800821e:	f7ff fac3 	bl	80077a8 <SEGGER_RTT_Write>
 8008222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008224:	627b      	str	r3, [r7, #36]	; 0x24
 8008226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008228:	f383 8810 	msr	PRIMASK, r3
			}
		}
	}
	TRACE_EXIT_CRITICAL_SECTION();
}
 800822c:	3738      	adds	r7, #56	; 0x38
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}
 8008232:	bf00      	nop
 8008234:	200149c8 	.word	0x200149c8
 8008238:	200149cc 	.word	0x200149cc

0800823c <prvTraceStoreEvent3>:
/* Store an event with three 32-bit parameters */
void prvTraceStoreEvent3(	uint16_t eventID,
						uint32_t param1,
						uint32_t param2,
						uint32_t param3)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b08e      	sub	sp, #56	; 0x38
 8008240:	af00      	add	r7, sp, #0
 8008242:	60b9      	str	r1, [r7, #8]
 8008244:	607a      	str	r2, [r7, #4]
 8008246:	603b      	str	r3, [r7, #0]
 8008248:	4603      	mov	r3, r0
 800824a:	81fb      	strh	r3, [r7, #14]
  	TRACE_ALLOC_CRITICAL_SECTION();

	PSF_ASSERT(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 800824c:	89fb      	ldrh	r3, [r7, #14]
 800824e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008252:	d303      	bcc.n	800825c <prvTraceStoreEvent3+0x20>
 8008254:	2001      	movs	r0, #1
 8008256:	f000 fbd7 	bl	8008a08 <prvTraceError>
 800825a:	e03b      	b.n	80082d4 <prvTraceStoreEvent3+0x98>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800825c:	f3ef 8310 	mrs	r3, PRIMASK
 8008260:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8008262:	6abb      	ldr	r3, [r7, #40]	; 0x28

	TRACE_ENTER_CRITICAL_SECTION();
 8008264:	637b      	str	r3, [r7, #52]	; 0x34
 8008266:	2301      	movs	r3, #1
 8008268:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800826a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800826c:	f383 8810 	msr	PRIMASK, r3

	if (RecorderEnabled)
 8008270:	4b1a      	ldr	r3, [pc, #104]	; (80082dc <prvTraceStoreEvent3+0xa0>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d028      	beq.n	80082ca <prvTraceStoreEvent3+0x8e>
	{
  		eventCounter++;
 8008278:	4b19      	ldr	r3, [pc, #100]	; (80082e0 <prvTraceStoreEvent3+0xa4>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	3301      	adds	r3, #1
 800827e:	4a18      	ldr	r2, [pc, #96]	; (80082e0 <prvTraceStoreEvent3+0xa4>)
 8008280:	6013      	str	r3, [r2, #0]

		{
			TRC_STREAM_PORT_ALLOCATE_EVENT(EventWithParam_3, event, sizeof(EventWithParam_3));
 8008282:	f107 0310 	add.w	r3, r7, #16
 8008286:	633b      	str	r3, [r7, #48]	; 0x30
			if (event != NULL)
 8008288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800828a:	2b00      	cmp	r3, #0
 800828c:	d01d      	beq.n	80082ca <prvTraceStoreEvent3+0x8e>
			{
				event->base.EventID = eventID | PARAM_COUNT(3);
 800828e:	89fb      	ldrh	r3, [r7, #14]
 8008290:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8008294:	b29a      	uxth	r2, r3
 8008296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008298:	801a      	strh	r2, [r3, #0]
				event->base.EventCount = (uint16_t)eventCounter;
 800829a:	4b11      	ldr	r3, [pc, #68]	; (80082e0 <prvTraceStoreEvent3+0xa4>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	b29a      	uxth	r2, r3
 80082a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a2:	805a      	strh	r2, [r3, #2]
				event->base.TS = prvGetTimestamp32();
 80082a4:	f000 fc02 	bl	8008aac <prvGetTimestamp32>
 80082a8:	4602      	mov	r2, r0
 80082aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ac:	605a      	str	r2, [r3, #4]
				event->param1 = (uint32_t)param1;
 80082ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b0:	68ba      	ldr	r2, [r7, #8]
 80082b2:	609a      	str	r2, [r3, #8]
				event->param2 = param2;
 80082b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b6:	687a      	ldr	r2, [r7, #4]
 80082b8:	60da      	str	r2, [r3, #12]
				event->param3 = param3;
 80082ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082bc:	683a      	ldr	r2, [r7, #0]
 80082be:	611a      	str	r2, [r3, #16]
				TRC_STREAM_PORT_COMMIT_EVENT(event, sizeof(EventWithParam_3));
 80082c0:	2214      	movs	r2, #20
 80082c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80082c4:	2001      	movs	r0, #1
 80082c6:	f7ff fa6f 	bl	80077a8 <SEGGER_RTT_Write>
 80082ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082cc:	627b      	str	r3, [r7, #36]	; 0x24
 80082ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d0:	f383 8810 	msr	PRIMASK, r3
			}
		}
	}
	TRACE_EXIT_CRITICAL_SECTION();
}
 80082d4:	3738      	adds	r7, #56	; 0x38
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}
 80082da:	bf00      	nop
 80082dc:	200149c8 	.word	0x200149c8
 80082e0:	200149cc 	.word	0x200149cc

080082e4 <prvTraceStoreEvent>:

/* Stores an event with <nParam> 32-bit integer parameters */
void prvTraceStoreEvent(int nParam, uint16_t eventID, ...)
{
 80082e4:	b40e      	push	{r1, r2, r3}
 80082e6:	b580      	push	{r7, lr}
 80082e8:	b09d      	sub	sp, #116	; 0x74
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	6078      	str	r0, [r7, #4]
	va_list vl;
	int i;
    TRACE_ALLOC_CRITICAL_SECTION();

	PSF_ASSERT(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 80082ee:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80082f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082f6:	d303      	bcc.n	8008300 <prvTraceStoreEvent+0x1c>
 80082f8:	2001      	movs	r0, #1
 80082fa:	f000 fb85 	bl	8008a08 <prvTraceError>
 80082fe:	e054      	b.n	80083aa <prvTraceStoreEvent+0xc6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008300:	f3ef 8310 	mrs	r3, PRIMASK
 8008304:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8008306:	6d7b      	ldr	r3, [r7, #84]	; 0x54

	TRACE_ENTER_CRITICAL_SECTION();
 8008308:	66bb      	str	r3, [r7, #104]	; 0x68
 800830a:	2301      	movs	r3, #1
 800830c:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800830e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008310:	f383 8810 	msr	PRIMASK, r3

	if (RecorderEnabled)
 8008314:	4b28      	ldr	r3, [pc, #160]	; (80083b8 <prvTraceStoreEvent+0xd4>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d041      	beq.n	80083a0 <prvTraceStoreEvent+0xbc>
	{
	  	int eventSize = (int)sizeof(BaseEvent) + nParam * (int)sizeof(uint32_t);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	3302      	adds	r3, #2
 8008320:	009b      	lsls	r3, r3, #2
 8008322:	667b      	str	r3, [r7, #100]	; 0x64

		eventCounter++;
 8008324:	4b25      	ldr	r3, [pc, #148]	; (80083bc <prvTraceStoreEvent+0xd8>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	3301      	adds	r3, #1
 800832a:	4a24      	ldr	r2, [pc, #144]	; (80083bc <prvTraceStoreEvent+0xd8>)
 800832c:	6013      	str	r3, [r2, #0]

		{
			TRC_STREAM_PORT_ALLOCATE_DYNAMIC_EVENT(largestEventType, event, eventSize);
 800832e:	f107 0308 	add.w	r3, r7, #8
 8008332:	663b      	str	r3, [r7, #96]	; 0x60
			if (event != NULL)
 8008334:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008336:	2b00      	cmp	r3, #0
 8008338:	d032      	beq.n	80083a0 <prvTraceStoreEvent+0xbc>
			{
				event->base.EventID = eventID | (uint16_t)PARAM_COUNT(nParam);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	b29b      	uxth	r3, r3
 800833e:	031b      	lsls	r3, r3, #12
 8008340:	b29a      	uxth	r2, r3
 8008342:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8008346:	4313      	orrs	r3, r2
 8008348:	b29a      	uxth	r2, r3
 800834a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800834c:	801a      	strh	r2, [r3, #0]
				event->base.EventCount = (uint16_t)eventCounter;
 800834e:	4b1b      	ldr	r3, [pc, #108]	; (80083bc <prvTraceStoreEvent+0xd8>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	b29a      	uxth	r2, r3
 8008354:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008356:	805a      	strh	r2, [r3, #2]
				event->base.TS = prvGetTimestamp32();
 8008358:	f000 fba8 	bl	8008aac <prvGetTimestamp32>
 800835c:	4602      	mov	r2, r0
 800835e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008360:	605a      	str	r2, [r3, #4]

				va_start(vl, eventID);
 8008362:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8008366:	64fb      	str	r3, [r7, #76]	; 0x4c
				for (i = 0; i < nParam; i++)
 8008368:	2300      	movs	r3, #0
 800836a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800836c:	e00e      	b.n	800838c <prvTraceStoreEvent+0xa8>
				{
					uint32_t* tmp = (uint32_t*) &(event->data[i]);
 800836e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008370:	3302      	adds	r3, #2
 8008372:	009b      	lsls	r3, r3, #2
 8008374:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008376:	4413      	add	r3, r2
 8008378:	65fb      	str	r3, [r7, #92]	; 0x5c
					*tmp = va_arg(vl, uint32_t);
 800837a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800837c:	1d1a      	adds	r2, r3, #4
 800837e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008380:	681a      	ldr	r2, [r3, #0]
 8008382:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008384:	601a      	str	r2, [r3, #0]
				for (i = 0; i < nParam; i++)
 8008386:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008388:	3301      	adds	r3, #1
 800838a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800838c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	429a      	cmp	r2, r3
 8008392:	dbec      	blt.n	800836e <prvTraceStoreEvent+0x8a>
				}
				va_end(vl);

				TRC_STREAM_PORT_COMMIT_EVENT(event, (uint32_t)eventSize);
 8008394:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008396:	461a      	mov	r2, r3
 8008398:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800839a:	2001      	movs	r0, #1
 800839c:	f7ff fa04 	bl	80077a8 <SEGGER_RTT_Write>
 80083a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80083a2:	653b      	str	r3, [r7, #80]	; 0x50
 80083a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083a6:	f383 8810 	msr	PRIMASK, r3
			}
		}
	}
	TRACE_EXIT_CRITICAL_SECTION();
}
 80083aa:	3774      	adds	r7, #116	; 0x74
 80083ac:	46bd      	mov	sp, r7
 80083ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80083b2:	b003      	add	sp, #12
 80083b4:	4770      	bx	lr
 80083b6:	bf00      	nop
 80083b8:	200149c8 	.word	0x200149c8
 80083bc:	200149cc 	.word	0x200149cc

080083c0 <prvTraceStoreStringEvent>:

/* Stories an event with a string and <nParam> 32-bit integer parameters */
void prvTraceStoreStringEvent(int nArgs, uint16_t eventID, const char* str, ...)
{
 80083c0:	b40c      	push	{r2, r3}
 80083c2:	b580      	push	{r7, lr}
 80083c4:	b086      	sub	sp, #24
 80083c6:	af02      	add	r7, sp, #8
 80083c8:	6078      	str	r0, [r7, #4]
 80083ca:	460b      	mov	r3, r1
 80083cc:	807b      	strh	r3, [r7, #2]
  	va_list vl;

	va_start(vl, str);
 80083ce:	f107 031c 	add.w	r3, r7, #28
 80083d2:	60fb      	str	r3, [r7, #12]
	prvTraceStoreStringEventHelper(nArgs, eventID, NULL, str, &vl);
 80083d4:	8879      	ldrh	r1, [r7, #2]
 80083d6:	f107 030c 	add.w	r3, r7, #12
 80083da:	9300      	str	r3, [sp, #0]
 80083dc:	69bb      	ldr	r3, [r7, #24]
 80083de:	2200      	movs	r2, #0
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f000 f807 	bl	80083f4 <prvTraceStoreStringEventHelper>
	va_end(vl);
}
 80083e6:	bf00      	nop
 80083e8:	3710      	adds	r7, #16
 80083ea:	46bd      	mov	sp, r7
 80083ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80083f0:	b002      	add	sp, #8
 80083f2:	4770      	bx	lr

080083f4 <prvTraceStoreStringEventHelper>:
/* Internal common function for storing string events */
static void prvTraceStoreStringEventHelper(	int nArgs,
										uint16_t eventID,
										traceString userEvtChannel,
										const char* str, va_list* vl)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b0a4      	sub	sp, #144	; 0x90
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	60f8      	str	r0, [r7, #12]
 80083fc:	607a      	str	r2, [r7, #4]
 80083fe:	603b      	str	r3, [r7, #0]
 8008400:	460b      	mov	r3, r1
 8008402:	817b      	strh	r3, [r7, #10]
	int len;
  	int nWords;
	int nStrWords;
	int i;
	int offset = 0;
 8008404:	2300      	movs	r3, #0
 8008406:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  	TRACE_ALLOC_CRITICAL_SECTION();

	PSF_ASSERT(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
 800840a:	897b      	ldrh	r3, [r7, #10]
 800840c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008410:	d303      	bcc.n	800841a <prvTraceStoreStringEventHelper+0x26>
 8008412:	2001      	movs	r0, #1
 8008414:	f000 faf8 	bl	8008a08 <prvTraceError>
 8008418:	e0e2      	b.n	80085e0 <prvTraceStoreStringEventHelper+0x1ec>

	for (len = 0; (str[len] != 0) && (len < 52); len++); /* empty loop */
 800841a:	2300      	movs	r3, #0
 800841c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008420:	e004      	b.n	800842c <prvTraceStoreStringEventHelper+0x38>
 8008422:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008426:	3301      	adds	r3, #1
 8008428:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800842c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008430:	683a      	ldr	r2, [r7, #0]
 8008432:	4413      	add	r3, r2
 8008434:	781b      	ldrb	r3, [r3, #0]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d003      	beq.n	8008442 <prvTraceStoreStringEventHelper+0x4e>
 800843a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800843e:	2b33      	cmp	r3, #51	; 0x33
 8008440:	ddef      	ble.n	8008422 <prvTraceStoreStringEventHelper+0x2e>
	
	/* The string length in multiples of 32 bit words (+1 for null character) */
	nStrWords = (len+1+3)/4;
 8008442:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008446:	3304      	adds	r3, #4
 8008448:	2b00      	cmp	r3, #0
 800844a:	da00      	bge.n	800844e <prvTraceStoreStringEventHelper+0x5a>
 800844c:	3303      	adds	r3, #3
 800844e:	109b      	asrs	r3, r3, #2
 8008450:	67fb      	str	r3, [r7, #124]	; 0x7c

	/* If a user event channel is specified, add in the list */
	if (userEvtChannel)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d002      	beq.n	800845e <prvTraceStoreStringEventHelper+0x6a>
		nArgs++;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	3301      	adds	r3, #1
 800845c:	60fb      	str	r3, [r7, #12]

	offset = nArgs * 4;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	009b      	lsls	r3, r3, #2
 8008462:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

	/* The total number of 32-bit words needed for the whole payload */
	nWords = nStrWords + nArgs;
 8008466:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	4413      	add	r3, r2
 800846c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

	if (nWords > 15) /* if attempting to store more than 60 byte (= max) */
 8008470:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008474:	2b0f      	cmp	r3, #15
 8008476:	dd15      	ble.n	80084a4 <prvTraceStoreStringEventHelper+0xb0>
		/* Truncate event if too large. The	string characters are stored
		last, so usually only the string is truncated, unless there a lot
		of parameters... */

		/* Diagnostics ... */
		uint32_t bytesTruncated = (uint32_t)(nWords - 15) * 4;
 8008478:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800847c:	3b0f      	subs	r3, #15
 800847e:	009b      	lsls	r3, r3, #2
 8008480:	67bb      	str	r3, [r7, #120]	; 0x78

		if (bytesTruncated > MaxBytesTruncated)
 8008482:	4b59      	ldr	r3, [pc, #356]	; (80085e8 <prvTraceStoreStringEventHelper+0x1f4>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008488:	429a      	cmp	r2, r3
 800848a:	d902      	bls.n	8008492 <prvTraceStoreStringEventHelper+0x9e>
		{
			MaxBytesTruncated = bytesTruncated;
 800848c:	4a56      	ldr	r2, [pc, #344]	; (80085e8 <prvTraceStoreStringEventHelper+0x1f4>)
 800848e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008490:	6013      	str	r3, [r2, #0]
		}

		nWords = 15;
 8008492:	230f      	movs	r3, #15
 8008494:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		len = 15 * 4 - offset;
 8008498:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800849c:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 80084a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80084a4:	f3ef 8310 	mrs	r3, PRIMASK
 80084a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  return(result);
 80084aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
	}

	TRACE_ENTER_CRITICAL_SECTION();
 80084ac:	677b      	str	r3, [r7, #116]	; 0x74
 80084ae:	2301      	movs	r3, #1
 80084b0:	663b      	str	r3, [r7, #96]	; 0x60
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80084b4:	f383 8810 	msr	PRIMASK, r3

	if (RecorderEnabled)
 80084b8:	4b4c      	ldr	r3, [pc, #304]	; (80085ec <prvTraceStoreStringEventHelper+0x1f8>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	f000 808a 	beq.w	80085d6 <prvTraceStoreStringEventHelper+0x1e2>
	{
		int eventSize = (int)sizeof(BaseEvent) + nWords * (int)sizeof(uint32_t);
 80084c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80084c6:	3302      	adds	r3, #2
 80084c8:	009b      	lsls	r3, r3, #2
 80084ca:	673b      	str	r3, [r7, #112]	; 0x70

		eventCounter++;
 80084cc:	4b48      	ldr	r3, [pc, #288]	; (80085f0 <prvTraceStoreStringEventHelper+0x1fc>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	3301      	adds	r3, #1
 80084d2:	4a47      	ldr	r2, [pc, #284]	; (80085f0 <prvTraceStoreStringEventHelper+0x1fc>)
 80084d4:	6013      	str	r3, [r2, #0]

		{
			TRC_STREAM_PORT_ALLOCATE_DYNAMIC_EVENT(largestEventType, event, eventSize);
 80084d6:	f107 0314 	add.w	r3, r7, #20
 80084da:	66fb      	str	r3, [r7, #108]	; 0x6c
			if (event != NULL)
 80084dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d079      	beq.n	80085d6 <prvTraceStoreStringEventHelper+0x1e2>
			{
				uint32_t* data32;
				uint8_t* data8;
				event->base.EventID = (eventID) | (uint16_t)PARAM_COUNT(nWords);
 80084e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80084e6:	b29b      	uxth	r3, r3
 80084e8:	031b      	lsls	r3, r3, #12
 80084ea:	b29a      	uxth	r2, r3
 80084ec:	897b      	ldrh	r3, [r7, #10]
 80084ee:	4313      	orrs	r3, r2
 80084f0:	b29a      	uxth	r2, r3
 80084f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084f4:	801a      	strh	r2, [r3, #0]
				event->base.EventCount = (uint16_t)eventCounter;
 80084f6:	4b3e      	ldr	r3, [pc, #248]	; (80085f0 <prvTraceStoreStringEventHelper+0x1fc>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	b29a      	uxth	r2, r3
 80084fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084fe:	805a      	strh	r2, [r3, #2]
				event->base.TS = prvGetTimestamp32();
 8008500:	f000 fad4 	bl	8008aac <prvGetTimestamp32>
 8008504:	4602      	mov	r2, r0
 8008506:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008508:	605a      	str	r2, [r3, #4]

				/* 32-bit write-pointer for the data argument */
				data32 = (uint32_t*) &(event->data[0]);
 800850a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800850c:	3308      	adds	r3, #8
 800850e:	66bb      	str	r3, [r7, #104]	; 0x68

				for (i = 0; i < nArgs; i++)
 8008510:	2300      	movs	r3, #0
 8008512:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008516:	e021      	b.n	800855c <prvTraceStoreStringEventHelper+0x168>
				{
					if ((userEvtChannel != NULL) && (i == 0))
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d00b      	beq.n	8008536 <prvTraceStoreStringEventHelper+0x142>
 800851e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008522:	2b00      	cmp	r3, #0
 8008524:	d107      	bne.n	8008536 <prvTraceStoreStringEventHelper+0x142>
					{
						/* First, add the User Event Channel if not NULL */
						data32[i] = (uint32_t)userEvtChannel;
 8008526:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800852a:	009b      	lsls	r3, r3, #2
 800852c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800852e:	4413      	add	r3, r2
 8008530:	687a      	ldr	r2, [r7, #4]
 8008532:	601a      	str	r2, [r3, #0]
 8008534:	e00d      	b.n	8008552 <prvTraceStoreStringEventHelper+0x15e>
					}
					else
					{
						/* Add data arguments... */
						data32[i] = va_arg(*vl, uint32_t);
 8008536:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800853a:	009b      	lsls	r3, r3, #2
 800853c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800853e:	441a      	add	r2, r3
 8008540:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	1d18      	adds	r0, r3, #4
 8008548:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800854c:	6008      	str	r0, [r1, #0]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	6013      	str	r3, [r2, #0]
				for (i = 0; i < nArgs; i++)
 8008552:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008556:	3301      	adds	r3, #1
 8008558:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800855c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	429a      	cmp	r2, r3
 8008564:	dbd8      	blt.n	8008518 <prvTraceStoreStringEventHelper+0x124>
					}
				}
				data8 = (uint8_t*)&(event->data[0]);
 8008566:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008568:	3308      	adds	r3, #8
 800856a:	667b      	str	r3, [r7, #100]	; 0x64
				for (i = 0; i < len; i++)
 800856c:	2300      	movs	r3, #0
 800856e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008572:	e012      	b.n	800859a <prvTraceStoreStringEventHelper+0x1a6>
				{
					data8[offset + i] = str[i];
 8008574:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008578:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800857c:	4413      	add	r3, r2
 800857e:	461a      	mov	r2, r3
 8008580:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008582:	4413      	add	r3, r2
 8008584:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008588:	6839      	ldr	r1, [r7, #0]
 800858a:	440a      	add	r2, r1
 800858c:	7812      	ldrb	r2, [r2, #0]
 800858e:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < len; i++)
 8008590:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008594:	3301      	adds	r3, #1
 8008596:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800859a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800859e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80085a2:	429a      	cmp	r2, r3
 80085a4:	dbe6      	blt.n	8008574 <prvTraceStoreStringEventHelper+0x180>
				}

				if (len < (15 * 4 - offset))
 80085a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80085aa:	f1c3 023c 	rsb	r2, r3, #60	; 0x3c
 80085ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80085b2:	429a      	cmp	r2, r3
 80085b4:	dd09      	ble.n	80085ca <prvTraceStoreStringEventHelper+0x1d6>
					data8[offset + len] = 0;	/* Only truncate if we don't fill up the buffer completely */
 80085b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80085ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80085be:	4413      	add	r3, r2
 80085c0:	461a      	mov	r2, r3
 80085c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80085c4:	4413      	add	r3, r2
 80085c6:	2200      	movs	r2, #0
 80085c8:	701a      	strb	r2, [r3, #0]
				TRC_STREAM_PORT_COMMIT_EVENT(event, (uint32_t)eventSize);
 80085ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80085cc:	461a      	mov	r2, r3
 80085ce:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80085d0:	2001      	movs	r0, #1
 80085d2:	f7ff f8e9 	bl	80077a8 <SEGGER_RTT_Write>
 80085d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80085da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80085dc:	f383 8810 	msr	PRIMASK, r3
			}
		}
	}
	
	TRACE_EXIT_CRITICAL_SECTION();
}
 80085e0:	3790      	adds	r7, #144	; 0x90
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}
 80085e6:	bf00      	nop
 80085e8:	200149e4 	.word	0x200149e4
 80085ec:	200149c8 	.word	0x200149c8
 80085f0:	200149cc 	.word	0x200149cc

080085f4 <prvTraceSaveSymbol>:
	TRACE_EXIT_CRITICAL_SECTION();
}

/* Saves a symbol name (task name etc.) in symbol table */
void prvTraceSaveSymbol(const void *address, const char *name)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b08b      	sub	sp, #44	; 0x2c
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80085fe:	f3ef 8310 	mrs	r3, PRIMASK
 8008602:	60fb      	str	r3, [r7, #12]
  return(result);
 8008604:	68fb      	ldr	r3, [r7, #12]
	uint32_t foundSlot;
	uint32_t *ptrAddress;
	uint8_t *ptrSymbol;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ENTER_CRITICAL_SECTION();
 8008606:	61fb      	str	r3, [r7, #28]
 8008608:	2301      	movs	r3, #1
 800860a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	f383 8810 	msr	PRIMASK, r3
	
	foundSlot = firstFreeSymbolTableIndex;
 8008612:	4b3a      	ldr	r3, [pc, #232]	; (80086fc <prvTraceSaveSymbol+0x108>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	623b      	str	r3, [r7, #32]

	/* First look for previous entries using this address */
	for (i = 0; i < firstFreeSymbolTableIndex; i += SYMBOL_TABLE_SLOT_SIZE)
 8008618:	2300      	movs	r3, #0
 800861a:	627b      	str	r3, [r7, #36]	; 0x24
 800861c:	e010      	b.n	8008640 <prvTraceSaveSymbol+0x4c>
	{
		/* We access the symbol table via the union member pSymbolTableBufferUINT32 to avoid strict-aliasing issues */
		ptrAddress = &symbolTable.SymbolTableBuffer.pSymbolTableBufferUINT32[i / sizeof(uint32_t)];
 800861e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008620:	089b      	lsrs	r3, r3, #2
 8008622:	009b      	lsls	r3, r3, #2
 8008624:	4a36      	ldr	r2, [pc, #216]	; (8008700 <prvTraceSaveSymbol+0x10c>)
 8008626:	4413      	add	r3, r2
 8008628:	61bb      	str	r3, [r7, #24]
		if (*ptrAddress == (uint32_t)address)
 800862a:	69bb      	ldr	r3, [r7, #24]
 800862c:	681a      	ldr	r2, [r3, #0]
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	429a      	cmp	r2, r3
 8008632:	d102      	bne.n	800863a <prvTraceSaveSymbol+0x46>
		{
			foundSlot = i;
 8008634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008636:	623b      	str	r3, [r7, #32]
			break;
 8008638:	e007      	b.n	800864a <prvTraceSaveSymbol+0x56>
	for (i = 0; i < firstFreeSymbolTableIndex; i += SYMBOL_TABLE_SLOT_SIZE)
 800863a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800863c:	3320      	adds	r3, #32
 800863e:	627b      	str	r3, [r7, #36]	; 0x24
 8008640:	4b2e      	ldr	r3, [pc, #184]	; (80086fc <prvTraceSaveSymbol+0x108>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008646:	429a      	cmp	r2, r3
 8008648:	d3e9      	bcc.n	800861e <prvTraceSaveSymbol+0x2a>
		}
	}

	if (foundSlot < SYMBOL_TABLE_BUFFER_SIZE)
 800864a:	6a3b      	ldr	r3, [r7, #32]
 800864c:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8008650:	d243      	bcs.n	80086da <prvTraceSaveSymbol+0xe6>
	{
		/* We access the symbol table via the union member pSymbolTableBufferUINT32 to avoid strict-aliasing issues */
		symbolTable.SymbolTableBuffer.pSymbolTableBufferUINT32[foundSlot / sizeof(uint32_t)] = (uint32_t)address;
 8008652:	6a3b      	ldr	r3, [r7, #32]
 8008654:	089b      	lsrs	r3, r3, #2
 8008656:	687a      	ldr	r2, [r7, #4]
 8008658:	4929      	ldr	r1, [pc, #164]	; (8008700 <prvTraceSaveSymbol+0x10c>)
 800865a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		
		/* We access the symbol table via the union member pSymbolTableBufferUINT8 to avoid strict-aliasing issues */
		ptrSymbol = &symbolTable.SymbolTableBuffer.pSymbolTableBufferUINT8[foundSlot + sizeof(uint32_t)];
 800865e:	6a3b      	ldr	r3, [r7, #32]
 8008660:	3304      	adds	r3, #4
 8008662:	4a27      	ldr	r2, [pc, #156]	; (8008700 <prvTraceSaveSymbol+0x10c>)
 8008664:	4413      	add	r3, r2
 8008666:	617b      	str	r3, [r7, #20]
		for (i = 0; i < (TRC_CFG_SYMBOL_MAX_LENGTH); i++)
 8008668:	2300      	movs	r3, #0
 800866a:	627b      	str	r3, [r7, #36]	; 0x24
 800866c:	e010      	b.n	8008690 <prvTraceSaveSymbol+0x9c>
        {
			ptrSymbol[i] = (uint8_t)name[i];	/* We do this first to ensure we also get the 0 termination, if there is one */
 800866e:	697a      	ldr	r2, [r7, #20]
 8008670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008672:	4413      	add	r3, r2
 8008674:	6839      	ldr	r1, [r7, #0]
 8008676:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008678:	440a      	add	r2, r1
 800867a:	7812      	ldrb	r2, [r2, #0]
 800867c:	701a      	strb	r2, [r3, #0]

			if (name[i] == 0)
 800867e:	683a      	ldr	r2, [r7, #0]
 8008680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008682:	4413      	add	r3, r2
 8008684:	781b      	ldrb	r3, [r3, #0]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d006      	beq.n	8008698 <prvTraceSaveSymbol+0xa4>
		for (i = 0; i < (TRC_CFG_SYMBOL_MAX_LENGTH); i++)
 800868a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800868c:	3301      	adds	r3, #1
 800868e:	627b      	str	r3, [r7, #36]	; 0x24
 8008690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008692:	2b18      	cmp	r3, #24
 8008694:	d9eb      	bls.n	800866e <prvTraceSaveSymbol+0x7a>
 8008696:	e004      	b.n	80086a2 <prvTraceSaveSymbol+0xae>
				break;
 8008698:	bf00      	nop
		}

		/* Check the length of "name", if longer than SYMBOL_MAX_LENGTH */
		while ((name[i] != 0) && i < 128)
 800869a:	e002      	b.n	80086a2 <prvTraceSaveSymbol+0xae>
		{
			i++;
 800869c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800869e:	3301      	adds	r3, #1
 80086a0:	627b      	str	r3, [r7, #36]	; 0x24
		while ((name[i] != 0) && i < 128)
 80086a2:	683a      	ldr	r2, [r7, #0]
 80086a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a6:	4413      	add	r3, r2
 80086a8:	781b      	ldrb	r3, [r3, #0]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d002      	beq.n	80086b4 <prvTraceSaveSymbol+0xc0>
 80086ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b0:	2b7f      	cmp	r3, #127	; 0x7f
 80086b2:	d9f3      	bls.n	800869c <prvTraceSaveSymbol+0xa8>
		}

		/* Remember the longest symbol name, for diagnostic purposes */
		if (i > LongestSymbolName)
 80086b4:	4b13      	ldr	r3, [pc, #76]	; (8008704 <prvTraceSaveSymbol+0x110>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086ba:	429a      	cmp	r2, r3
 80086bc:	d902      	bls.n	80086c4 <prvTraceSaveSymbol+0xd0>
		{
			LongestSymbolName = i;
 80086be:	4a11      	ldr	r2, [pc, #68]	; (8008704 <prvTraceSaveSymbol+0x110>)
 80086c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c2:	6013      	str	r3, [r2, #0]
		}

		/* Is this the last entry in the symbol table? */
		if (foundSlot == firstFreeSymbolTableIndex)
 80086c4:	4b0d      	ldr	r3, [pc, #52]	; (80086fc <prvTraceSaveSymbol+0x108>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	6a3a      	ldr	r2, [r7, #32]
 80086ca:	429a      	cmp	r2, r3
 80086cc:	d10a      	bne.n	80086e4 <prvTraceSaveSymbol+0xf0>
		{
			firstFreeSymbolTableIndex += SYMBOL_TABLE_SLOT_SIZE;
 80086ce:	4b0b      	ldr	r3, [pc, #44]	; (80086fc <prvTraceSaveSymbol+0x108>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	3320      	adds	r3, #32
 80086d4:	4a09      	ldr	r2, [pc, #36]	; (80086fc <prvTraceSaveSymbol+0x108>)
 80086d6:	6013      	str	r3, [r2, #0]
 80086d8:	e004      	b.n	80086e4 <prvTraceSaveSymbol+0xf0>
		}
	}
	else
	{
		NoRoomForSymbol++;
 80086da:	4b0b      	ldr	r3, [pc, #44]	; (8008708 <prvTraceSaveSymbol+0x114>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	3301      	adds	r3, #1
 80086e0:	4a09      	ldr	r2, [pc, #36]	; (8008708 <prvTraceSaveSymbol+0x114>)
 80086e2:	6013      	str	r3, [r2, #0]
 80086e4:	69fb      	ldr	r3, [r7, #28]
 80086e6:	60bb      	str	r3, [r7, #8]
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	f383 8810 	msr	PRIMASK, r3
	}

	TRACE_EXIT_CRITICAL_SECTION();
}
 80086ee:	bf00      	nop
 80086f0:	372c      	adds	r7, #44	; 0x2c
 80086f2:	46bd      	mov	sp, r7
 80086f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f8:	4770      	bx	lr
 80086fa:	bf00      	nop
 80086fc:	20014878 	.word	0x20014878
 8008700:	20014378 	.word	0x20014378
 8008704:	200149e0 	.word	0x200149e0
 8008708:	200149d8 	.word	0x200149d8

0800870c <prvTraceDeleteSymbol>:

/* Deletes a symbol name (task name etc.) from symbol table */
void prvTraceDeleteSymbol(void *address)
{
 800870c:	b480      	push	{r7}
 800870e:	b08b      	sub	sp, #44	; 0x2c
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008714:	f3ef 8310 	mrs	r3, PRIMASK
 8008718:	60fb      	str	r3, [r7, #12]
  return(result);
 800871a:	68fb      	ldr	r3, [r7, #12]
	uint32_t i, j;
	uint32_t *ptr, *lastEntryPtr;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ENTER_CRITICAL_SECTION();
 800871c:	61fb      	str	r3, [r7, #28]
 800871e:	2301      	movs	r3, #1
 8008720:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	f383 8810 	msr	PRIMASK, r3

	for (i = 0; i < firstFreeSymbolTableIndex; i += SYMBOL_TABLE_SLOT_SIZE)
 8008728:	2300      	movs	r3, #0
 800872a:	627b      	str	r3, [r7, #36]	; 0x24
 800872c:	e040      	b.n	80087b0 <prvTraceDeleteSymbol+0xa4>
	{
		/* We access the symbol table via the union member pSymbolTableBufferUINT32 to avoid strict-aliasing issues */
		ptr = &symbolTable.SymbolTableBuffer.pSymbolTableBufferUINT32[i / sizeof(uint32_t)];
 800872e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008730:	089b      	lsrs	r3, r3, #2
 8008732:	009b      	lsls	r3, r3, #2
 8008734:	4a26      	ldr	r2, [pc, #152]	; (80087d0 <prvTraceDeleteSymbol+0xc4>)
 8008736:	4413      	add	r3, r2
 8008738:	61bb      	str	r3, [r7, #24]
		if (*ptr == (uint32_t)address)
 800873a:	69bb      	ldr	r3, [r7, #24]
 800873c:	681a      	ldr	r2, [r3, #0]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	429a      	cmp	r2, r3
 8008742:	d132      	bne.n	80087aa <prvTraceDeleteSymbol+0x9e>
		{
			/* See if we have another entry in the table, and that this isn't already the last entry */
			if (firstFreeSymbolTableIndex > SYMBOL_TABLE_SLOT_SIZE && i != (firstFreeSymbolTableIndex - SYMBOL_TABLE_SLOT_SIZE))
 8008744:	4b23      	ldr	r3, [pc, #140]	; (80087d4 <prvTraceDeleteSymbol+0xc8>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	2b20      	cmp	r3, #32
 800874a:	d925      	bls.n	8008798 <prvTraceDeleteSymbol+0x8c>
 800874c:	4b21      	ldr	r3, [pc, #132]	; (80087d4 <prvTraceDeleteSymbol+0xc8>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f1a3 0220 	sub.w	r2, r3, #32
 8008754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008756:	429a      	cmp	r2, r3
 8008758:	d01e      	beq.n	8008798 <prvTraceDeleteSymbol+0x8c>
			{
				/* Another entry is available, get pointer to the last one */
				/* We access the symbol table via the union member pSymbolTableBufferUINT32 to avoid strict-aliasing issues */
				lastEntryPtr = &symbolTable.SymbolTableBuffer.pSymbolTableBufferUINT32[(firstFreeSymbolTableIndex - SYMBOL_TABLE_SLOT_SIZE) / sizeof(uint32_t)];
 800875a:	4b1e      	ldr	r3, [pc, #120]	; (80087d4 <prvTraceDeleteSymbol+0xc8>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	3b20      	subs	r3, #32
 8008760:	089b      	lsrs	r3, r3, #2
 8008762:	009b      	lsls	r3, r3, #2
 8008764:	4a1a      	ldr	r2, [pc, #104]	; (80087d0 <prvTraceDeleteSymbol+0xc4>)
 8008766:	4413      	add	r3, r2
 8008768:	617b      	str	r3, [r7, #20]
				
				/* Copy last entry to this position */
				for (j = 0; j < (SYMBOL_TABLE_SLOT_SIZE) / sizeof(uint32_t); j++)
 800876a:	2300      	movs	r3, #0
 800876c:	623b      	str	r3, [r7, #32]
 800876e:	e00c      	b.n	800878a <prvTraceDeleteSymbol+0x7e>
				{
					ptr[j] = lastEntryPtr[j];
 8008770:	6a3b      	ldr	r3, [r7, #32]
 8008772:	009b      	lsls	r3, r3, #2
 8008774:	69ba      	ldr	r2, [r7, #24]
 8008776:	4413      	add	r3, r2
 8008778:	6a3a      	ldr	r2, [r7, #32]
 800877a:	0092      	lsls	r2, r2, #2
 800877c:	6979      	ldr	r1, [r7, #20]
 800877e:	440a      	add	r2, r1
 8008780:	6812      	ldr	r2, [r2, #0]
 8008782:	601a      	str	r2, [r3, #0]
				for (j = 0; j < (SYMBOL_TABLE_SLOT_SIZE) / sizeof(uint32_t); j++)
 8008784:	6a3b      	ldr	r3, [r7, #32]
 8008786:	3301      	adds	r3, #1
 8008788:	623b      	str	r3, [r7, #32]
 800878a:	6a3b      	ldr	r3, [r7, #32]
 800878c:	2b07      	cmp	r3, #7
 800878e:	d9ef      	bls.n	8008770 <prvTraceDeleteSymbol+0x64>
				}

				/* For good measure we also zero out the original position */
				*lastEntryPtr = 0;
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	2200      	movs	r2, #0
 8008794:	601a      	str	r2, [r3, #0]
 8008796:	e002      	b.n	800879e <prvTraceDeleteSymbol+0x92>
			}
			else
				*ptr = 0; /* No other entry found, or this is the last entry */
 8008798:	69bb      	ldr	r3, [r7, #24]
 800879a:	2200      	movs	r2, #0
 800879c:	601a      	str	r2, [r3, #0]

			/* Lower index */
			firstFreeSymbolTableIndex -= SYMBOL_TABLE_SLOT_SIZE;
 800879e:	4b0d      	ldr	r3, [pc, #52]	; (80087d4 <prvTraceDeleteSymbol+0xc8>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	3b20      	subs	r3, #32
 80087a4:	4a0b      	ldr	r2, [pc, #44]	; (80087d4 <prvTraceDeleteSymbol+0xc8>)
 80087a6:	6013      	str	r3, [r2, #0]

			break;
 80087a8:	e007      	b.n	80087ba <prvTraceDeleteSymbol+0xae>
	for (i = 0; i < firstFreeSymbolTableIndex; i += SYMBOL_TABLE_SLOT_SIZE)
 80087aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ac:	3320      	adds	r3, #32
 80087ae:	627b      	str	r3, [r7, #36]	; 0x24
 80087b0:	4b08      	ldr	r3, [pc, #32]	; (80087d4 <prvTraceDeleteSymbol+0xc8>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087b6:	429a      	cmp	r2, r3
 80087b8:	d3b9      	bcc.n	800872e <prvTraceDeleteSymbol+0x22>
 80087ba:	69fb      	ldr	r3, [r7, #28]
 80087bc:	60bb      	str	r3, [r7, #8]
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	f383 8810 	msr	PRIMASK, r3
		}
	}

	TRACE_EXIT_CRITICAL_SECTION();
}
 80087c4:	bf00      	nop
 80087c6:	372c      	adds	r7, #44	; 0x2c
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr
 80087d0:	20014378 	.word	0x20014378
 80087d4:	20014878 	.word	0x20014878

080087d8 <prvTraceSaveObjectData>:

/* Saves an object data entry (current task priority) in object data table */
void prvTraceSaveObjectData(const void *address, uint32_t data)
{
 80087d8:	b480      	push	{r7}
 80087da:	b08b      	sub	sp, #44	; 0x2c
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
 80087e0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80087e2:	f3ef 8310 	mrs	r3, PRIMASK
 80087e6:	613b      	str	r3, [r7, #16]
  return(result);
 80087e8:	693b      	ldr	r3, [r7, #16]
	uint32_t i;
	uint32_t foundSlot;
	uint32_t *ptr;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ENTER_CRITICAL_SECTION();
 80087ea:	61fb      	str	r3, [r7, #28]
 80087ec:	2301      	movs	r3, #1
 80087ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	f383 8810 	msr	PRIMASK, r3
	
	foundSlot = firstFreeObjectDataTableIndex;
 80087f6:	4b24      	ldr	r3, [pc, #144]	; (8008888 <prvTraceSaveObjectData+0xb0>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	623b      	str	r3, [r7, #32]

	/* First look for previous entries using this address */
	for (i = 0; i < firstFreeObjectDataTableIndex; i += OBJECT_DATA_SLOT_SIZE)
 80087fc:	2300      	movs	r3, #0
 80087fe:	627b      	str	r3, [r7, #36]	; 0x24
 8008800:	e010      	b.n	8008824 <prvTraceSaveObjectData+0x4c>
	{
		/* We access the data table via the union member pObjectDataTableBufferUINT32 to avoid strict-aliasing issues */
		ptr = &objectDataTable.ObjectDataTableBuffer.pObjectDataTableBufferUINT32[i / sizeof(uint32_t)];
 8008802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008804:	089b      	lsrs	r3, r3, #2
 8008806:	009b      	lsls	r3, r3, #2
 8008808:	4a20      	ldr	r2, [pc, #128]	; (800888c <prvTraceSaveObjectData+0xb4>)
 800880a:	4413      	add	r3, r2
 800880c:	61bb      	str	r3, [r7, #24]
		if (*ptr == (uint32_t)address)
 800880e:	69bb      	ldr	r3, [r7, #24]
 8008810:	681a      	ldr	r2, [r3, #0]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	429a      	cmp	r2, r3
 8008816:	d102      	bne.n	800881e <prvTraceSaveObjectData+0x46>
		{
			foundSlot = i;
 8008818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881a:	623b      	str	r3, [r7, #32]
			break;
 800881c:	e007      	b.n	800882e <prvTraceSaveObjectData+0x56>
	for (i = 0; i < firstFreeObjectDataTableIndex; i += OBJECT_DATA_SLOT_SIZE)
 800881e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008820:	3308      	adds	r3, #8
 8008822:	627b      	str	r3, [r7, #36]	; 0x24
 8008824:	4b18      	ldr	r3, [pc, #96]	; (8008888 <prvTraceSaveObjectData+0xb0>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800882a:	429a      	cmp	r2, r3
 800882c:	d3e9      	bcc.n	8008802 <prvTraceSaveObjectData+0x2a>
		}
	}

	if (foundSlot < OBJECT_DATA_TABLE_BUFFER_SIZE)
 800882e:	6a3b      	ldr	r3, [r7, #32]
 8008830:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8008834:	d217      	bcs.n	8008866 <prvTraceSaveObjectData+0x8e>
	{
		/* We access the data table via the union member pObjectDataTableBufferUINT32 to avoid strict-aliasing issues */
		objectDataTable.ObjectDataTableBuffer.pObjectDataTableBufferUINT32[foundSlot / sizeof(uint32_t)] = (uint32_t)address;
 8008836:	6a3b      	ldr	r3, [r7, #32]
 8008838:	089b      	lsrs	r3, r3, #2
 800883a:	687a      	ldr	r2, [r7, #4]
 800883c:	4913      	ldr	r1, [pc, #76]	; (800888c <prvTraceSaveObjectData+0xb4>)
 800883e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		objectDataTable.ObjectDataTableBuffer.pObjectDataTableBufferUINT32[foundSlot / sizeof(uint32_t) + 1] = data;
 8008842:	6a3b      	ldr	r3, [r7, #32]
 8008844:	089b      	lsrs	r3, r3, #2
 8008846:	3301      	adds	r3, #1
 8008848:	4910      	ldr	r1, [pc, #64]	; (800888c <prvTraceSaveObjectData+0xb4>)
 800884a:	683a      	ldr	r2, [r7, #0]
 800884c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		/* Is this the last entry in the object data table? */
		if (foundSlot == firstFreeObjectDataTableIndex)
 8008850:	4b0d      	ldr	r3, [pc, #52]	; (8008888 <prvTraceSaveObjectData+0xb0>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	6a3a      	ldr	r2, [r7, #32]
 8008856:	429a      	cmp	r2, r3
 8008858:	d10a      	bne.n	8008870 <prvTraceSaveObjectData+0x98>
		{
			firstFreeObjectDataTableIndex += OBJECT_DATA_SLOT_SIZE;
 800885a:	4b0b      	ldr	r3, [pc, #44]	; (8008888 <prvTraceSaveObjectData+0xb0>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	3308      	adds	r3, #8
 8008860:	4a09      	ldr	r2, [pc, #36]	; (8008888 <prvTraceSaveObjectData+0xb0>)
 8008862:	6013      	str	r3, [r2, #0]
 8008864:	e004      	b.n	8008870 <prvTraceSaveObjectData+0x98>
		}
	}
	else
	{
		NoRoomForObjectData++;
 8008866:	4b0a      	ldr	r3, [pc, #40]	; (8008890 <prvTraceSaveObjectData+0xb8>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	3301      	adds	r3, #1
 800886c:	4a08      	ldr	r2, [pc, #32]	; (8008890 <prvTraceSaveObjectData+0xb8>)
 800886e:	6013      	str	r3, [r2, #0]
 8008870:	69fb      	ldr	r3, [r7, #28]
 8008872:	60fb      	str	r3, [r7, #12]
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f383 8810 	msr	PRIMASK, r3
	}

	TRACE_EXIT_CRITICAL_SECTION();
}
 800887a:	bf00      	nop
 800887c:	372c      	adds	r7, #44	; 0x2c
 800887e:	46bd      	mov	sp, r7
 8008880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008884:	4770      	bx	lr
 8008886:	bf00      	nop
 8008888:	200149bc 	.word	0x200149bc
 800888c:	2001487c 	.word	0x2001487c
 8008890:	200149dc 	.word	0x200149dc

08008894 <prvTraceDeleteObjectData>:

/* Removes an object data entry (task base priority) from object data table */
void prvTraceDeleteObjectData(void *address)
{
 8008894:	b480      	push	{r7}
 8008896:	b08b      	sub	sp, #44	; 0x2c
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800889c:	f3ef 8310 	mrs	r3, PRIMASK
 80088a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80088a2:	68fb      	ldr	r3, [r7, #12]
	uint32_t i, j;
	uint32_t *ptr, *lastEntryPtr;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ENTER_CRITICAL_SECTION();
 80088a4:	61fb      	str	r3, [r7, #28]
 80088a6:	2301      	movs	r3, #1
 80088a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	f383 8810 	msr	PRIMASK, r3

	for (i = 0; i < firstFreeObjectDataTableIndex; i += OBJECT_DATA_SLOT_SIZE)
 80088b0:	2300      	movs	r3, #0
 80088b2:	627b      	str	r3, [r7, #36]	; 0x24
 80088b4:	e040      	b.n	8008938 <prvTraceDeleteObjectData+0xa4>
	{
		/* We access the data table via the union member pObjectDataTableBufferUINT32 to avoid strict-aliasing issues */
		ptr = &objectDataTable.ObjectDataTableBuffer.pObjectDataTableBufferUINT32[i / sizeof(uint32_t)];
 80088b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b8:	089b      	lsrs	r3, r3, #2
 80088ba:	009b      	lsls	r3, r3, #2
 80088bc:	4a26      	ldr	r2, [pc, #152]	; (8008958 <prvTraceDeleteObjectData+0xc4>)
 80088be:	4413      	add	r3, r2
 80088c0:	61bb      	str	r3, [r7, #24]
		if (*ptr == (uint32_t)address)
 80088c2:	69bb      	ldr	r3, [r7, #24]
 80088c4:	681a      	ldr	r2, [r3, #0]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d132      	bne.n	8008932 <prvTraceDeleteObjectData+0x9e>
		{
			/* See if we have another entry in the table, and that this isn't already the last entry */
			if (firstFreeObjectDataTableIndex > OBJECT_DATA_SLOT_SIZE && i != (firstFreeObjectDataTableIndex - OBJECT_DATA_SLOT_SIZE))
 80088cc:	4b23      	ldr	r3, [pc, #140]	; (800895c <prvTraceDeleteObjectData+0xc8>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	2b08      	cmp	r3, #8
 80088d2:	d925      	bls.n	8008920 <prvTraceDeleteObjectData+0x8c>
 80088d4:	4b21      	ldr	r3, [pc, #132]	; (800895c <prvTraceDeleteObjectData+0xc8>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f1a3 0208 	sub.w	r2, r3, #8
 80088dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088de:	429a      	cmp	r2, r3
 80088e0:	d01e      	beq.n	8008920 <prvTraceDeleteObjectData+0x8c>
			{
				/* Another entry is available, get pointer to the last one */
				/* We access the data table via the union member pObjectDataTableBufferUINT32 to avoid strict-aliasing issues */
				lastEntryPtr = &objectDataTable.ObjectDataTableBuffer.pObjectDataTableBufferUINT32[(firstFreeObjectDataTableIndex - OBJECT_DATA_SLOT_SIZE) / sizeof(uint32_t)];
 80088e2:	4b1e      	ldr	r3, [pc, #120]	; (800895c <prvTraceDeleteObjectData+0xc8>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	3b08      	subs	r3, #8
 80088e8:	089b      	lsrs	r3, r3, #2
 80088ea:	009b      	lsls	r3, r3, #2
 80088ec:	4a1a      	ldr	r2, [pc, #104]	; (8008958 <prvTraceDeleteObjectData+0xc4>)
 80088ee:	4413      	add	r3, r2
 80088f0:	617b      	str	r3, [r7, #20]
				
				/* Copy last entry to this position */
				for (j = 0; j < (OBJECT_DATA_SLOT_SIZE) / sizeof(uint32_t); j++)
 80088f2:	2300      	movs	r3, #0
 80088f4:	623b      	str	r3, [r7, #32]
 80088f6:	e00c      	b.n	8008912 <prvTraceDeleteObjectData+0x7e>
				{
					ptr[j] = lastEntryPtr[j];
 80088f8:	6a3b      	ldr	r3, [r7, #32]
 80088fa:	009b      	lsls	r3, r3, #2
 80088fc:	69ba      	ldr	r2, [r7, #24]
 80088fe:	4413      	add	r3, r2
 8008900:	6a3a      	ldr	r2, [r7, #32]
 8008902:	0092      	lsls	r2, r2, #2
 8008904:	6979      	ldr	r1, [r7, #20]
 8008906:	440a      	add	r2, r1
 8008908:	6812      	ldr	r2, [r2, #0]
 800890a:	601a      	str	r2, [r3, #0]
				for (j = 0; j < (OBJECT_DATA_SLOT_SIZE) / sizeof(uint32_t); j++)
 800890c:	6a3b      	ldr	r3, [r7, #32]
 800890e:	3301      	adds	r3, #1
 8008910:	623b      	str	r3, [r7, #32]
 8008912:	6a3b      	ldr	r3, [r7, #32]
 8008914:	2b01      	cmp	r3, #1
 8008916:	d9ef      	bls.n	80088f8 <prvTraceDeleteObjectData+0x64>
				}

				/* For good measure we also zero out the original position */
				*lastEntryPtr = 0;
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	2200      	movs	r2, #0
 800891c:	601a      	str	r2, [r3, #0]
 800891e:	e002      	b.n	8008926 <prvTraceDeleteObjectData+0x92>
			}
			else
				*ptr = 0; /* No other entry found, or this is the last entry */
 8008920:	69bb      	ldr	r3, [r7, #24]
 8008922:	2200      	movs	r2, #0
 8008924:	601a      	str	r2, [r3, #0]

			/* Lower index */
			firstFreeObjectDataTableIndex -= OBJECT_DATA_SLOT_SIZE;
 8008926:	4b0d      	ldr	r3, [pc, #52]	; (800895c <prvTraceDeleteObjectData+0xc8>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	3b08      	subs	r3, #8
 800892c:	4a0b      	ldr	r2, [pc, #44]	; (800895c <prvTraceDeleteObjectData+0xc8>)
 800892e:	6013      	str	r3, [r2, #0]

			break;
 8008930:	e007      	b.n	8008942 <prvTraceDeleteObjectData+0xae>
	for (i = 0; i < firstFreeObjectDataTableIndex; i += OBJECT_DATA_SLOT_SIZE)
 8008932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008934:	3308      	adds	r3, #8
 8008936:	627b      	str	r3, [r7, #36]	; 0x24
 8008938:	4b08      	ldr	r3, [pc, #32]	; (800895c <prvTraceDeleteObjectData+0xc8>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800893e:	429a      	cmp	r2, r3
 8008940:	d3b9      	bcc.n	80088b6 <prvTraceDeleteObjectData+0x22>
 8008942:	69fb      	ldr	r3, [r7, #28]
 8008944:	60bb      	str	r3, [r7, #8]
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	f383 8810 	msr	PRIMASK, r3
		}
	}

	TRACE_EXIT_CRITICAL_SECTION();
}
 800894c:	bf00      	nop
 800894e:	372c      	adds	r7, #44	; 0x2c
 8008950:	46bd      	mov	sp, r7
 8008952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008956:	4770      	bx	lr
 8008958:	2001487c 	.word	0x2001487c
 800895c:	200149bc 	.word	0x200149bc

08008960 <prvIsValidCommand>:

/* Checks if the provided command is a valid command */
int prvIsValidCommand(TracealyzerCommandType* cmd)
{
 8008960:	b480      	push	{r7}
 8008962:	b085      	sub	sp, #20
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  	uint16_t checksum = (uint16_t)(0xFFFF - (	cmd->cmdCode +
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	781b      	ldrb	r3, [r3, #0]
 800896c:	b29a      	uxth	r2, r3
												cmd->param1 +
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	785b      	ldrb	r3, [r3, #1]
 8008972:	b29b      	uxth	r3, r3
  	uint16_t checksum = (uint16_t)(0xFFFF - (	cmd->cmdCode +
 8008974:	4413      	add	r3, r2
 8008976:	b29a      	uxth	r2, r3
												cmd->param2 +
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	789b      	ldrb	r3, [r3, #2]
 800897c:	b29b      	uxth	r3, r3
												cmd->param1 +
 800897e:	4413      	add	r3, r2
 8008980:	b29a      	uxth	r2, r3
												cmd->param3 +
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	78db      	ldrb	r3, [r3, #3]
 8008986:	b29b      	uxth	r3, r3
												cmd->param2 +
 8008988:	4413      	add	r3, r2
 800898a:	b29a      	uxth	r2, r3
												cmd->param4 +
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	791b      	ldrb	r3, [r3, #4]
 8008990:	b29b      	uxth	r3, r3
												cmd->param3 +
 8008992:	4413      	add	r3, r2
 8008994:	b29a      	uxth	r2, r3
												cmd->param5));
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	795b      	ldrb	r3, [r3, #5]
 800899a:	b29b      	uxth	r3, r3
												cmd->param4 +
 800899c:	4413      	add	r3, r2
 800899e:	b29b      	uxth	r3, r3
  	uint16_t checksum = (uint16_t)(0xFFFF - (	cmd->cmdCode +
 80089a0:	43db      	mvns	r3, r3
 80089a2:	81fb      	strh	r3, [r7, #14]

	if (cmd->checksumMSB != (unsigned char)(checksum >> 8))
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	79da      	ldrb	r2, [r3, #7]
 80089a8:	89fb      	ldrh	r3, [r7, #14]
 80089aa:	0a1b      	lsrs	r3, r3, #8
 80089ac:	b29b      	uxth	r3, r3
 80089ae:	b2db      	uxtb	r3, r3
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d001      	beq.n	80089b8 <prvIsValidCommand+0x58>
		return 0;
 80089b4:	2300      	movs	r3, #0
 80089b6:	e00e      	b.n	80089d6 <prvIsValidCommand+0x76>

	if (cmd->checksumLSB != (unsigned char)(checksum & 0xFF))
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	799a      	ldrb	r2, [r3, #6]
 80089bc:	89fb      	ldrh	r3, [r7, #14]
 80089be:	b2db      	uxtb	r3, r3
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d001      	beq.n	80089c8 <prvIsValidCommand+0x68>
		return 0;
 80089c4:	2300      	movs	r3, #0
 80089c6:	e006      	b.n	80089d6 <prvIsValidCommand+0x76>

	if (cmd->cmdCode > CMD_LAST_COMMAND)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	781b      	ldrb	r3, [r3, #0]
 80089cc:	2b01      	cmp	r3, #1
 80089ce:	d901      	bls.n	80089d4 <prvIsValidCommand+0x74>
		return 0;
 80089d0:	2300      	movs	r3, #0
 80089d2:	e000      	b.n	80089d6 <prvIsValidCommand+0x76>

	return 1;
 80089d4:	2301      	movs	r3, #1
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3714      	adds	r7, #20
 80089da:	46bd      	mov	sp, r7
 80089dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e0:	4770      	bx	lr

080089e2 <prvProcessCommand>:

/* Executed the received command (Start or Stop) */
void prvProcessCommand(TracealyzerCommandType* cmd)
{
 80089e2:	b580      	push	{r7, lr}
 80089e4:	b082      	sub	sp, #8
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	6078      	str	r0, [r7, #4]
  	switch(cmd->cmdCode)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	781b      	ldrb	r3, [r3, #0]
 80089ee:	2b01      	cmp	r3, #1
 80089f0:	d000      	beq.n	80089f4 <prvProcessCommand+0x12>
	{
		case CMD_SET_ACTIVE:
		  	prvSetRecorderEnabled(cmd->param1);
		  	break;
		default:
		  	break;
 80089f2:	e005      	b.n	8008a00 <prvProcessCommand+0x1e>
		  	prvSetRecorderEnabled(cmd->param1);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	785b      	ldrb	r3, [r3, #1]
 80089f8:	4618      	mov	r0, r3
 80089fa:	f7ff f989 	bl	8007d10 <prvSetRecorderEnabled>
		  	break;
 80089fe:	bf00      	nop
	}
}
 8008a00:	bf00      	nop
 8008a02:	3708      	adds	r7, #8
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <prvTraceError>:

/* Called on critical errors in the recorder. Stops the recorder! */
void prvTraceError(int errCode)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b082      	sub	sp, #8
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
	if (! errorCode)
 8008a10:	4b0a      	ldr	r3, [pc, #40]	; (8008a3c <prvTraceError+0x34>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d10d      	bne.n	8008a34 <prvTraceError+0x2c>
	{
		errorCode = errCode;
 8008a18:	4a08      	ldr	r2, [pc, #32]	; (8008a3c <prvTraceError+0x34>)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6013      	str	r3, [r2, #0]
		prvTraceStoreWarnings();
 8008a1e:	f7ff faa7 	bl	8007f70 <prvTraceStoreWarnings>
		vTracePrintF(trcWarningChannel, "Error detected. Stopped recorder.");
 8008a22:	4b07      	ldr	r3, [pc, #28]	; (8008a40 <prvTraceError+0x38>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4907      	ldr	r1, [pc, #28]	; (8008a44 <prvTraceError+0x3c>)
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f7ff f920 	bl	8007c6e <vTracePrintF>

		prvSetRecorderEnabled(0);
 8008a2e:	2000      	movs	r0, #0
 8008a30:	f7ff f96e 	bl	8007d10 <prvSetRecorderEnabled>
	}
}
 8008a34:	bf00      	nop
 8008a36:	3708      	adds	r7, #8
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}
 8008a3c:	200149c0 	.word	0x200149c0
 8008a40:	20015e88 	.word	0x20015e88
 8008a44:	08009d6c 	.word	0x08009d6c

08008a48 <prvTraceInitCortexM>:
/* If using DWT timestamping (default on ARM Cortex-M3, M4 and M7), make sure the DWT unit is initialized. */
#ifndef TRC_CFG_ARM_CM_USE_SYSTICK
#if ((TRC_CFG_HARDWARE_PORT == TRC_HARDWARE_PORT_ARM_Cortex_M) && (defined (__CORTEX_M) && (__CORTEX_M >= 0x03)))

void prvTraceInitCortexM()
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	af00      	add	r7, sp, #0
	/* Make sure the DWT registers are unlocked, in case the debugger doesn't do this. */
	TRC_REG_ITM_LOCKACCESS = TRC_ITM_LOCKACCESS_UNLOCK;
 8008a4c:	4b12      	ldr	r3, [pc, #72]	; (8008a98 <prvTraceInitCortexM+0x50>)
 8008a4e:	4a13      	ldr	r2, [pc, #76]	; (8008a9c <prvTraceInitCortexM+0x54>)
 8008a50:	601a      	str	r2, [r3, #0]

	/* Make sure DWT is enabled is enabled, if supported */
	TRC_REG_DEMCR |= TRC_DEMCR_TRCENA;
 8008a52:	4a13      	ldr	r2, [pc, #76]	; (8008aa0 <prvTraceInitCortexM+0x58>)
 8008a54:	4b12      	ldr	r3, [pc, #72]	; (8008aa0 <prvTraceInitCortexM+0x58>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008a5c:	6013      	str	r3, [r2, #0]

	do
	{
		/* Verify that DWT is supported */
		if (TRC_REG_DEMCR == 0)
 8008a5e:	4b10      	ldr	r3, [pc, #64]	; (8008aa0 <prvTraceInitCortexM+0x58>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d103      	bne.n	8008a6e <prvTraceInitCortexM+0x26>
			In that case, define the macro TRC_CFG_ARM_CM_USE_SYSTICK in your build
			to use SysTick timestamping instead, or define your own timestamping by 
			setting TRC_CFG_HARDWARE_PORT to TRC_HARDWARE_PORT_APPLICATION_DEFINED
			and make the necessary definitions, as explained in trcHardwarePort.h.*/
			
			prvTraceError(PSF_ERROR_DWT_NOT_SUPPORTED);
 8008a66:	2003      	movs	r0, #3
 8008a68:	f7ff ffce 	bl	8008a08 <prvTraceError>
			break;
 8008a6c:	e012      	b.n	8008a94 <prvTraceInitCortexM+0x4c>
		}

		/* Verify that DWT_CYCCNT is supported */
		if (TRC_REG_DWT_CTRL & TRC_DWT_CTRL_NOCYCCNT)
 8008a6e:	4b0d      	ldr	r3, [pc, #52]	; (8008aa4 <prvTraceInitCortexM+0x5c>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d003      	beq.n	8008a82 <prvTraceInitCortexM+0x3a>
			In that case, define the macro TRC_CFG_ARM_CM_USE_SYSTICK in your build
			to use SysTick timestamping instead, or define your own timestamping by 
			setting TRC_CFG_HARDWARE_PORT to TRC_HARDWARE_PORT_APPLICATION_DEFINED
			and make the necessary definitions, as explained in trcHardwarePort.h.*/

			prvTraceError(PSF_ERROR_DWT_CYCCNT_NOT_SUPPORTED);
 8008a7a:	2004      	movs	r0, #4
 8008a7c:	f7ff ffc4 	bl	8008a08 <prvTraceError>
			break;
 8008a80:	e008      	b.n	8008a94 <prvTraceInitCortexM+0x4c>
		}

		/* Reset the cycle counter */
		TRC_REG_DWT_CYCCNT = 0;
 8008a82:	4b09      	ldr	r3, [pc, #36]	; (8008aa8 <prvTraceInitCortexM+0x60>)
 8008a84:	2200      	movs	r2, #0
 8008a86:	601a      	str	r2, [r3, #0]

		/* Enable the cycle counter */
		TRC_REG_DWT_CTRL |= TRC_DWT_CTRL_CYCCNTENA;
 8008a88:	4a06      	ldr	r2, [pc, #24]	; (8008aa4 <prvTraceInitCortexM+0x5c>)
 8008a8a:	4b06      	ldr	r3, [pc, #24]	; (8008aa4 <prvTraceInitCortexM+0x5c>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f043 0301 	orr.w	r3, r3, #1
 8008a92:	6013      	str	r3, [r2, #0]

	} while(0);	/* breaks above jump here */
}
 8008a94:	bf00      	nop
 8008a96:	bd80      	pop	{r7, pc}
 8008a98:	e0001fb0 	.word	0xe0001fb0
 8008a9c:	c5acce55 	.word	0xc5acce55
 8008aa0:	e000edfc 	.word	0xe000edfc
 8008aa4:	e0001000 	.word	0xe0001000
 8008aa8:	e0001004 	.word	0xe0001004

08008aac <prvGetTimestamp32>:
#endif
#endif

/* Performs timestamping using definitions in trcHardwarePort.h */
static uint32_t prvGetTimestamp32(void)
{
 8008aac:	b480      	push	{r7}
 8008aae:	af00      	add	r7, sp, #0
#if ((TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR) || (TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR))
	return TRC_HWTC_COUNT;
 8008ab0:	4b03      	ldr	r3, [pc, #12]	; (8008ac0 <prvGetTimestamp32+0x14>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
	
#if ((TRC_HWTC_TYPE == TRC_OS_TIMER_INCR) || (TRC_HWTC_TYPE == TRC_OS_TIMER_DECR))
	uint32_t ticks = TRACE_GET_OS_TICKS();
	return (TRC_HWTC_COUNT & 0x00FFFFFFU) + ((ticks & 0x000000FFU) << 24);
#endif
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abc:	4770      	bx	lr
 8008abe:	bf00      	nop
 8008ac0:	e0001004 	.word	0xe0001004

08008ac4 <prvTraceStoreTSConfig>:

/* Store the Timestamp Config event */
static void prvTraceStoreTSConfig(void)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b082      	sub	sp, #8
 8008ac8:	af02      	add	r7, sp, #8
	/* If not overridden using vTraceSetFrequency, use default value */
	if (timestampFrequency == 0)
 8008aca:	4b0b      	ldr	r3, [pc, #44]	; (8008af8 <prvTraceStoreTSConfig+0x34>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d103      	bne.n	8008ada <prvTraceStoreTSConfig+0x16>
	{
		timestampFrequency = TRC_HWTC_FREQ_HZ;
 8008ad2:	4b0a      	ldr	r3, [pc, #40]	; (8008afc <prvTraceStoreTSConfig+0x38>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4a08      	ldr	r2, [pc, #32]	; (8008af8 <prvTraceStoreTSConfig+0x34>)
 8008ad8:	6013      	str	r3, [r2, #0]
							(uint32_t)TRC_CFG_ISR_TAILCHAINING_THRESHOLD,
							(uint32_t)TRC_HWTC_PERIOD);
	}
	else
	{
	prvTraceStoreEvent(4, 
 8008ada:	4b07      	ldr	r3, [pc, #28]	; (8008af8 <prvTraceStoreTSConfig+0x34>)
 8008adc:	681a      	ldr	r2, [r3, #0]
 8008ade:	2300      	movs	r3, #0
 8008ae0:	9301      	str	r3, [sp, #4]
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	9300      	str	r3, [sp, #0]
 8008ae6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008aea:	2102      	movs	r1, #2
 8008aec:	2004      	movs	r0, #4
 8008aee:	f7ff fbf9 	bl	80082e4 <prvTraceStoreEvent>
						(uint32_t)timestampFrequency,	                    
						(uint32_t)TRACE_TICK_RATE_HZ,
						(uint32_t)TRC_HWTC_TYPE,
						(uint32_t)TRC_CFG_ISR_TAILCHAINING_THRESHOLD);
	}
}
 8008af2:	bf00      	nop
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}
 8008af8:	200149d4 	.word	0x200149d4
 8008afc:	20000024 	.word	0x20000024

08008b00 <vParTestInitialise>:
static const Led_TypeDef xLEDs[ partstMAX_LEDS ] = { LED5, LED6, LED3, LED4 };

/*-----------------------------------------------------------*/

void vParTestInitialise( void )
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	af00      	add	r7, sp, #0
	/* Initialise all four LEDs that are built onto the starter kit. */
	STM_EVAL_LEDInit( LED5 );
 8008b04:	2002      	movs	r0, #2
 8008b06:	f000 fa25 	bl	8008f54 <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit( LED6 );
 8008b0a:	2003      	movs	r0, #3
 8008b0c:	f000 fa22 	bl	8008f54 <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit( LED3 );
 8008b10:	2001      	movs	r0, #1
 8008b12:	f000 fa1f 	bl	8008f54 <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit( LED4 );
 8008b16:	2000      	movs	r0, #0
 8008b18:	f000 fa1c 	bl	8008f54 <STM_EVAL_LEDInit>
}
 8008b1c:	bf00      	nop
 8008b1e:	bd80      	pop	{r7, pc}

08008b20 <vParTestToggleLED>:
	}
}
/*-----------------------------------------------------------*/

void vParTestToggleLED( unsigned long ulLED )
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b082      	sub	sp, #8
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
	if( ulLED < partstMAX_LEDS )
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2b03      	cmp	r3, #3
 8008b2c:	d80a      	bhi.n	8008b44 <vParTestToggleLED+0x24>
	{
		taskENTER_CRITICAL();
 8008b2e:	f7fa ff8f 	bl	8003a50 <vPortEnterCritical>
		{
			STM_EVAL_LEDToggle( xLEDs[ ulLED ] );
 8008b32:	4a06      	ldr	r2, [pc, #24]	; (8008b4c <vParTestToggleLED+0x2c>)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	4413      	add	r3, r2
 8008b38:	781b      	ldrb	r3, [r3, #0]
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f000 fa38 	bl	8008fb0 <STM_EVAL_LEDToggle>
		}
		taskEXIT_CRITICAL();
 8008b40:	f7fa ffb4 	bl	8003aac <vPortExitCritical>
	}
}
 8008b44:	bf00      	nop
 8008b46:	3708      	adds	r7, #8
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}
 8008b4c:	08009db0 	.word	0x08009db0

08008b50 <NVIC_SetPendingIRQ>:
    The function sets the pending bit of an external interrupt.

    \param [in]      IRQn  Interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b083      	sub	sp, #12
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	4603      	mov	r3, r0
 8008b58:	71fb      	strb	r3, [r7, #7]
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8008b5a:	4909      	ldr	r1, [pc, #36]	; (8008b80 <NVIC_SetPendingIRQ+0x30>)
 8008b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b60:	095b      	lsrs	r3, r3, #5
 8008b62:	79fa      	ldrb	r2, [r7, #7]
 8008b64:	f002 021f 	and.w	r2, r2, #31
 8008b68:	2001      	movs	r0, #1
 8008b6a:	fa00 f202 	lsl.w	r2, r0, r2
 8008b6e:	3340      	adds	r3, #64	; 0x40
 8008b70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008b74:	bf00      	nop
 8008b76:	370c      	adds	r7, #12
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr
 8008b80:	e000e100 	.word	0xe000e100

08008b84 <main>:
volatile unsigned long ulButtonPressCounts = 0UL;

/*-----------------------------------------------------------*/

int main(void)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	af00      	add	r7, sp, #0
	/* Configure the hardware ready to run the test. */
	prvSetupHardware();
 8008b88:	f000 f8c0 	bl	8008d0c <prvSetupHardware>


	vTraceEnable(TRC_START);
 8008b8c:	2001      	movs	r0, #1
 8008b8e:	f7fe ff03 	bl	8007998 <vTraceEnable>
	/* Start standard demo/test application flash tasks.  See the comments at
	the top of this file.  The LED flash tasks are always created.  The other
	tasks are only created if mainCREATE_SIMPLE_LED_FLASHER_DEMO_ONLY is set to
	0 (at the top of this file).  See the comments at the top of this file for
	more information. */
	vStartLEDFlashTasks( mainFLASH_TASK_PRIORITY );
 8008b92:	2001      	movs	r0, #1
 8008b94:	f7f9 fcbe 	bl	8002514 <vStartLEDFlashTasks>

	/* The following function will only create more tasks and timers if
	mainCREATE_SIMPLE_LED_FLASHER_DEMO_ONLY is set to 0 (at the top of this
	file).  See the comments at the top of this file for more information. */
	prvOptionallyCreateComprehensveTestApplication();
 8008b98:	f000 f930 	bl	8008dfc <prvOptionallyCreateComprehensveTestApplication>

	/* Start the scheduler. */
	vTaskStartScheduler();
 8008b9c:	f7fc ffea 	bl	8005b74 <vTaskStartScheduler>
	/* If all is well, the scheduler will now be running, and the following line
	will never be reached.  If the following line does execute, then there was
	insufficient FreeRTOS heap memory available for the idle and/or timer tasks
	to be created.  See the memory management section on the FreeRTOS web site
	for more details. */
	for( ;; );
 8008ba0:	e7fe      	b.n	8008ba0 <main+0x1c>
	...

08008ba4 <prvCheckTimerCallback>:
}
/*-----------------------------------------------------------*/

static void prvCheckTimerCallback( TimerHandle_t xTimer )
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b086      	sub	sp, #24
 8008ba8:	af02      	add	r7, sp, #8
 8008baa:	6078      	str	r0, [r7, #4]
static long lChangedTimerPeriodAlready = pdFALSE;
static unsigned long ulLastRegTest1Value = 0, ulLastRegTest2Value = 0;
long lErrorFound = pdFALSE;
 8008bac:	2300      	movs	r3, #0
 8008bae:	60fb      	str	r3, [r7, #12]

	/* Check all the demo tasks (other than the flash tasks) to ensure
	that they are all still running, and that none have detected an error. */

	if( xAreMathsTaskStillRunning() != pdTRUE )
 8008bb0:	f7fa f814 	bl	8002bdc <xAreMathsTaskStillRunning>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	2b01      	cmp	r3, #1
 8008bb8:	d001      	beq.n	8008bbe <prvCheckTimerCallback+0x1a>
	{
		lErrorFound = pdTRUE;
 8008bba:	2301      	movs	r3, #1
 8008bbc:	60fb      	str	r3, [r7, #12]
	}

	if( xAreIntegerMathsTaskStillRunning() != pdTRUE )
 8008bbe:	f7fa fa49 	bl	8003054 <xAreIntegerMathsTaskStillRunning>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	2b01      	cmp	r3, #1
 8008bc6:	d001      	beq.n	8008bcc <prvCheckTimerCallback+0x28>
	{
		lErrorFound = pdTRUE;
 8008bc8:	2301      	movs	r3, #1
 8008bca:	60fb      	str	r3, [r7, #12]
	}

	if( xAreDynamicPriorityTasksStillRunning() != pdTRUE )
 8008bcc:	f7f9 fc6e 	bl	80024ac <xAreDynamicPriorityTasksStillRunning>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	2b01      	cmp	r3, #1
 8008bd4:	d001      	beq.n	8008bda <prvCheckTimerCallback+0x36>
	{
		lErrorFound = pdTRUE;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	60fb      	str	r3, [r7, #12]
	}

	if( xAreBlockingQueuesStillRunning() != pdTRUE )
 8008bda:	f7f8 f895 	bl	8000d08 <xAreBlockingQueuesStillRunning>
 8008bde:	4603      	mov	r3, r0
 8008be0:	2b01      	cmp	r3, #1
 8008be2:	d001      	beq.n	8008be8 <prvCheckTimerCallback+0x44>
	{
		lErrorFound = pdTRUE;
 8008be4:	2301      	movs	r3, #1
 8008be6:	60fb      	str	r3, [r7, #12]
	}

	if ( xAreBlockTimeTestTasksStillRunning() != pdTRUE )
 8008be8:	f7f8 ffdc 	bl	8001ba4 <xAreBlockTimeTestTasksStillRunning>
 8008bec:	4603      	mov	r3, r0
 8008bee:	2b01      	cmp	r3, #1
 8008bf0:	d001      	beq.n	8008bf6 <prvCheckTimerCallback+0x52>
	{
		lErrorFound = pdTRUE;
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	60fb      	str	r3, [r7, #12]
	}

	if ( xAreGenericQueueTasksStillRunning() != pdTRUE )
 8008bf6:	f7f8 fc33 	bl	8001460 <xAreGenericQueueTasksStillRunning>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	d001      	beq.n	8008c04 <prvCheckTimerCallback+0x60>
	{
		lErrorFound = pdTRUE;
 8008c00:	2301      	movs	r3, #1
 8008c02:	60fb      	str	r3, [r7, #12]
	}

	if ( xAreRecursiveMutexTasksStillRunning() != pdTRUE )
 8008c04:	f7fa fbc0 	bl	8003388 <xAreRecursiveMutexTasksStillRunning>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	2b01      	cmp	r3, #1
 8008c0c:	d001      	beq.n	8008c12 <prvCheckTimerCallback+0x6e>
	{
		lErrorFound = pdTRUE;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	60fb      	str	r3, [r7, #12]
	}

	if( xIsCreateTaskStillRunning() != pdTRUE )
 8008c12:	f7f9 f9f1 	bl	8001ff8 <xIsCreateTaskStillRunning>
 8008c16:	4603      	mov	r3, r0
 8008c18:	2b01      	cmp	r3, #1
 8008c1a:	d001      	beq.n	8008c20 <prvCheckTimerCallback+0x7c>
	{
		lErrorFound = pdTRUE;
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	60fb      	str	r3, [r7, #12]
	}

	if( xArePollingQueuesStillRunning() != pdTRUE )
 8008c20:	f7f8 fd22 	bl	8001668 <xArePollingQueuesStillRunning>
 8008c24:	4603      	mov	r3, r0
 8008c26:	2b01      	cmp	r3, #1
 8008c28:	d001      	beq.n	8008c2e <prvCheckTimerCallback+0x8a>
	{
		lErrorFound = pdTRUE;
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	60fb      	str	r3, [r7, #12]
	}

	if( xAreSemaphoreTasksStillRunning() != pdTRUE )
 8008c2e:	f7fa fd29 	bl	8003684 <xAreSemaphoreTasksStillRunning>
 8008c32:	4603      	mov	r3, r0
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d001      	beq.n	8008c3c <prvCheckTimerCallback+0x98>
	{
		lErrorFound = pdTRUE;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	60fb      	str	r3, [r7, #12]
	}

	/* Check that the register test 1 task is still running. */
	if( ulLastRegTest1Value == ulRegTest1LoopCounter )
 8008c3c:	4b18      	ldr	r3, [pc, #96]	; (8008ca0 <prvCheckTimerCallback+0xfc>)
 8008c3e:	681a      	ldr	r2, [r3, #0]
 8008c40:	4b18      	ldr	r3, [pc, #96]	; (8008ca4 <prvCheckTimerCallback+0x100>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	429a      	cmp	r2, r3
 8008c46:	d101      	bne.n	8008c4c <prvCheckTimerCallback+0xa8>
	{
		lErrorFound = pdTRUE;
 8008c48:	2301      	movs	r3, #1
 8008c4a:	60fb      	str	r3, [r7, #12]
	}
	ulLastRegTest1Value = ulRegTest1LoopCounter;
 8008c4c:	4b15      	ldr	r3, [pc, #84]	; (8008ca4 <prvCheckTimerCallback+0x100>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4a13      	ldr	r2, [pc, #76]	; (8008ca0 <prvCheckTimerCallback+0xfc>)
 8008c52:	6013      	str	r3, [r2, #0]

	/* Check that the register test 2 task is still running. */
	if( ulLastRegTest2Value == ulRegTest2LoopCounter )
 8008c54:	4b14      	ldr	r3, [pc, #80]	; (8008ca8 <prvCheckTimerCallback+0x104>)
 8008c56:	681a      	ldr	r2, [r3, #0]
 8008c58:	4b14      	ldr	r3, [pc, #80]	; (8008cac <prvCheckTimerCallback+0x108>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	d101      	bne.n	8008c64 <prvCheckTimerCallback+0xc0>
	{
		lErrorFound = pdTRUE;
 8008c60:	2301      	movs	r3, #1
 8008c62:	60fb      	str	r3, [r7, #12]
	}
	ulLastRegTest2Value = ulRegTest2LoopCounter;
 8008c64:	4b11      	ldr	r3, [pc, #68]	; (8008cac <prvCheckTimerCallback+0x108>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a0f      	ldr	r2, [pc, #60]	; (8008ca8 <prvCheckTimerCallback+0x104>)
 8008c6a:	6013      	str	r3, [r2, #0]

	/* Toggle the check LED to give an indication of the system status.  If
	the LED toggles every mainCHECK_TIMER_PERIOD_MS milliseconds then
	everything is ok.  A faster toggle indicates an error. */
	vParTestToggleLED( mainCHECK_LED );
 8008c6c:	2003      	movs	r0, #3
 8008c6e:	f7ff ff57 	bl	8008b20 <vParTestToggleLED>

	/* Have any errors been latch in lErrorFound?  If so, shorten the
	period of the check timer to mainERROR_CHECK_TIMER_PERIOD_MS milliseconds.
	This will result in an increase in the rate at which mainCHECK_LED
	toggles. */
	if( lErrorFound != pdFALSE )
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d00e      	beq.n	8008c96 <prvCheckTimerCallback+0xf2>
	{
		if( lChangedTimerPeriodAlready == pdFALSE )
 8008c78:	4b0d      	ldr	r3, [pc, #52]	; (8008cb0 <prvCheckTimerCallback+0x10c>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d10a      	bne.n	8008c96 <prvCheckTimerCallback+0xf2>
		{
			lChangedTimerPeriodAlready = pdTRUE;
 8008c80:	4b0b      	ldr	r3, [pc, #44]	; (8008cb0 <prvCheckTimerCallback+0x10c>)
 8008c82:	2201      	movs	r2, #1
 8008c84:	601a      	str	r2, [r3, #0]

			/* This call to xTimerChangePeriod() uses a zero block time.
			Functions called from inside of a timer callback function must
			*never* attempt	to block. */
			xTimerChangePeriod( xTimer, ( mainERROR_CHECK_TIMER_PERIOD_MS ), mainDONT_BLOCK );
 8008c86:	2300      	movs	r3, #0
 8008c88:	9300      	str	r3, [sp, #0]
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	22c8      	movs	r2, #200	; 0xc8
 8008c8e:	2104      	movs	r1, #4
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f7fd fe63 	bl	800695c <xTimerGenericCommand>
		}
	}
}
 8008c96:	bf00      	nop
 8008c98:	3710      	adds	r7, #16
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}
 8008c9e:	bf00      	nop
 8008ca0:	20014a00 	.word	0x20014a00
 8008ca4:	200149e8 	.word	0x200149e8
 8008ca8:	20014a04 	.word	0x20014a04
 8008cac:	200149ec 	.word	0x200149ec
 8008cb0:	20014a08 	.word	0x20014a08

08008cb4 <prvButtonTestTask>:
/*-----------------------------------------------------------*/

static void prvButtonTestTask( void *pvParameters )
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b084      	sub	sp, #16
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
	configASSERT( xTestSemaphore );
 8008cbc:	4b11      	ldr	r3, [pc, #68]	; (8008d04 <prvButtonTestTask+0x50>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d109      	bne.n	8008cd8 <prvButtonTestTask+0x24>
 8008cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc8:	f383 8811 	msr	BASEPRI, r3
 8008ccc:	f3bf 8f6f 	isb	sy
 8008cd0:	f3bf 8f4f 	dsb	sy
 8008cd4:	60fb      	str	r3, [r7, #12]
 8008cd6:	e7fe      	b.n	8008cd6 <prvButtonTestTask+0x22>
	will unblock, increment its execution counter, then return to block
	again. */

	/* Take the semaphore before started to ensure it is in the correct
	state. */
	xSemaphoreTake( xTestSemaphore, mainDONT_BLOCK );
 8008cd8:	4b0a      	ldr	r3, [pc, #40]	; (8008d04 <prvButtonTestTask+0x50>)
 8008cda:	6818      	ldr	r0, [r3, #0]
 8008cdc:	2300      	movs	r3, #0
 8008cde:	2200      	movs	r2, #0
 8008ce0:	2100      	movs	r1, #0
 8008ce2:	f7fb fef3 	bl	8004acc <xQueueGenericReceive>

	for( ;; )
	{
		xSemaphoreTake( xTestSemaphore, portMAX_DELAY );
 8008ce6:	4b07      	ldr	r3, [pc, #28]	; (8008d04 <prvButtonTestTask+0x50>)
 8008ce8:	6818      	ldr	r0, [r3, #0]
 8008cea:	2300      	movs	r3, #0
 8008cec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008cf0:	2100      	movs	r1, #0
 8008cf2:	f7fb feeb 	bl	8004acc <xQueueGenericReceive>
		ulButtonPressCounts++;
 8008cf6:	4b04      	ldr	r3, [pc, #16]	; (8008d08 <prvButtonTestTask+0x54>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	3301      	adds	r3, #1
 8008cfc:	4a02      	ldr	r2, [pc, #8]	; (8008d08 <prvButtonTestTask+0x54>)
 8008cfe:	6013      	str	r3, [r2, #0]
		xSemaphoreTake( xTestSemaphore, portMAX_DELAY );
 8008d00:	e7f1      	b.n	8008ce6 <prvButtonTestTask+0x32>
 8008d02:	bf00      	nop
 8008d04:	200149f8 	.word	0x200149f8
 8008d08:	200149fc 	.word	0x200149fc

08008d0c <prvSetupHardware>:
	}
}
/*-----------------------------------------------------------*/

static void prvSetupHardware( void )
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	af00      	add	r7, sp, #0
	/* Setup STM32 system (clock, PLL and Flash configuration) */
	SystemInit();
 8008d10:	f000 f9cc 	bl	80090ac <SystemInit>

	/* Ensure all priority bits are assigned as preemption priority bits. */
	NVIC_PriorityGroupConfig( NVIC_PriorityGroup_4 );
 8008d14:	f44f 7040 	mov.w	r0, #768	; 0x300
 8008d18:	f7fe f942 	bl	8006fa0 <NVIC_PriorityGroupConfig>

	/* Setup the LED outputs. */
	vParTestInitialise();
 8008d1c:	f7ff fef0 	bl	8008b00 <vParTestInitialise>

	/* Configure the button input.  This configures the interrupt to use the
	lowest interrupt priority, so it is ok to use the ISR safe FreeRTOS API
	from the button interrupt handler. */
	STM_EVAL_PBInit( BUTTON_USER, BUTTON_MODE_EXTI );
 8008d20:	2101      	movs	r1, #1
 8008d22:	2000      	movs	r0, #0
 8008d24:	f000 f962 	bl	8008fec <STM_EVAL_PBInit>
}
 8008d28:	bf00      	nop
 8008d2a:	bd80      	pop	{r7, pc}

08008d2c <vApplicationTickHook>:
/*-----------------------------------------------------------*/

void vApplicationTickHook( void )
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	af00      	add	r7, sp, #0
	#if ( mainCREATE_SIMPLE_LED_FLASHER_DEMO_ONLY == 0 )
	{
		/* Just to verify that the interrupt nesting behaves as expected,
		increment ulFPUInterruptNesting on entry, and decrement it on exit. */
		ulFPUInterruptNesting++;
 8008d30:	4b07      	ldr	r3, [pc, #28]	; (8008d50 <vApplicationTickHook+0x24>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	3301      	adds	r3, #1
 8008d36:	4a06      	ldr	r2, [pc, #24]	; (8008d50 <vApplicationTickHook+0x24>)
 8008d38:	6013      	str	r3, [r2, #0]

		/* Trigger a timer 2 interrupt, which will fill the registers with a
		different value and itself trigger a timer 3 interrupt.  Note that the
		timers are not actually used.  The timer 2 and 3 interrupt vectors are
		just used for convenience. */
		NVIC_SetPendingIRQ( TIM2_IRQn );
 8008d3a:	201c      	movs	r0, #28
 8008d3c:	f7ff ff08 	bl	8008b50 <NVIC_SetPendingIRQ>
		/* Ensure that, after returning from the nested interrupts, all the FPU
		registers contain the value to which they were set by the tick hook
		function. */
		//configASSERT( ulRegTestCheckFlopRegistersContainParameterValue( 0UL ) );

		ulFPUInterruptNesting--;
 8008d40:	4b03      	ldr	r3, [pc, #12]	; (8008d50 <vApplicationTickHook+0x24>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	3b01      	subs	r3, #1
 8008d46:	4a02      	ldr	r2, [pc, #8]	; (8008d50 <vApplicationTickHook+0x24>)
 8008d48:	6013      	str	r3, [r2, #0]
	}
	#endif
}
 8008d4a:	bf00      	nop
 8008d4c:	bd80      	pop	{r7, pc}
 8008d4e:	bf00      	nop
 8008d50:	200149f0 	.word	0x200149f0

08008d54 <prvSetupNestedFPUInterruptsTest>:
/*-----------------------------------------------------------*/

static void prvSetupNestedFPUInterruptsTest( void )
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b082      	sub	sp, #8
 8008d58:	af00      	add	r7, sp, #0

	/* Enable the TIM2 interrupt in the NVIC.  The timer itself is not used,
	just its interrupt vector to force nesting from software.  TIM2 must have
	a lower priority than TIM3, and both must have priorities above
	configMAX_SYSCALL_INTERRUPT_PRIORITY. */
	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
 8008d5a:	231c      	movs	r3, #28
 8008d5c:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY - 1;
 8008d5e:	2304      	movs	r3, #4
 8008d60:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8008d62:	2300      	movs	r3, #0
 8008d64:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8008d66:	2301      	movs	r3, #1
 8008d68:	71fb      	strb	r3, [r7, #7]
	NVIC_Init( &NVIC_InitStructure );
 8008d6a:	1d3b      	adds	r3, r7, #4
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f7fe f92b 	bl	8006fc8 <NVIC_Init>

	/* Enable the TIM3 interrupt in the NVIC.  The timer itself is not used,
	just its interrupt vector to force nesting from software.  TIM2 must have
	a lower priority than TIM3, and both must have priorities above
	configMAX_SYSCALL_INTERRUPT_PRIORITY. */
	NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn;
 8008d72:	231d      	movs	r3, #29
 8008d74:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY - 2;
 8008d76:	2303      	movs	r3, #3
 8008d78:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8008d7e:	2301      	movs	r3, #1
 8008d80:	71fb      	strb	r3, [r7, #7]
	NVIC_Init( &NVIC_InitStructure );
 8008d82:	1d3b      	adds	r3, r7, #4
 8008d84:	4618      	mov	r0, r3
 8008d86:	f7fe f91f 	bl	8006fc8 <NVIC_Init>
}
 8008d8a:	bf00      	nop
 8008d8c:	3708      	adds	r7, #8
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}
	...

08008d94 <TIM3_IRQHandler>:
/*-----------------------------------------------------------*/

void TIM3_IRQHandler( void )
{
 8008d94:	b480      	push	{r7}
 8008d96:	af00      	add	r7, sp, #0
	/* Just to verify that the interrupt nesting behaves as expected, increment
	ulFPUInterruptNesting on entry, and decrement it on exit. */
	ulFPUInterruptNesting++;
 8008d98:	4b0c      	ldr	r3, [pc, #48]	; (8008dcc <TIM3_IRQHandler+0x38>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	3301      	adds	r3, #1
 8008d9e:	4a0b      	ldr	r2, [pc, #44]	; (8008dcc <TIM3_IRQHandler+0x38>)
 8008da0:	6013      	str	r3, [r2, #0]

	/* This is the highest priority interrupt in the chain of forced nesting
	interrupts, so latch the maximum value reached by ulFPUInterruptNesting.
	This is done purely to allow verification that the nesting depth reaches
	that intended. */
	if( ulFPUInterruptNesting > ulMaxFPUInterruptNesting )
 8008da2:	4b0a      	ldr	r3, [pc, #40]	; (8008dcc <TIM3_IRQHandler+0x38>)
 8008da4:	681a      	ldr	r2, [r3, #0]
 8008da6:	4b0a      	ldr	r3, [pc, #40]	; (8008dd0 <TIM3_IRQHandler+0x3c>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	429a      	cmp	r2, r3
 8008dac:	d903      	bls.n	8008db6 <TIM3_IRQHandler+0x22>
	{
		ulMaxFPUInterruptNesting = ulFPUInterruptNesting;
 8008dae:	4b07      	ldr	r3, [pc, #28]	; (8008dcc <TIM3_IRQHandler+0x38>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	4a07      	ldr	r2, [pc, #28]	; (8008dd0 <TIM3_IRQHandler+0x3c>)
 8008db4:	6013      	str	r3, [r2, #0]

	/* Fill the FPU registers with 99 to overwrite the values written by
	TIM2_IRQHandler(). */
	//vRegTestClearFlopRegistersToParameterValue( 99UL );

	ulFPUInterruptNesting--;
 8008db6:	4b05      	ldr	r3, [pc, #20]	; (8008dcc <TIM3_IRQHandler+0x38>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	3b01      	subs	r3, #1
 8008dbc:	4a03      	ldr	r2, [pc, #12]	; (8008dcc <TIM3_IRQHandler+0x38>)
 8008dbe:	6013      	str	r3, [r2, #0]
}
 8008dc0:	bf00      	nop
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc8:	4770      	bx	lr
 8008dca:	bf00      	nop
 8008dcc:	200149f0 	.word	0x200149f0
 8008dd0:	200149f4 	.word	0x200149f4

08008dd4 <TIM2_IRQHandler>:
/*-----------------------------------------------------------*/

void TIM2_IRQHandler( void )
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	af00      	add	r7, sp, #0
	/* Just to verify that the interrupt nesting behaves as expected, increment
	ulFPUInterruptNesting on entry, and decrement it on exit. */
	ulFPUInterruptNesting++;
 8008dd8:	4b07      	ldr	r3, [pc, #28]	; (8008df8 <TIM2_IRQHandler+0x24>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	3301      	adds	r3, #1
 8008dde:	4a06      	ldr	r2, [pc, #24]	; (8008df8 <TIM2_IRQHandler+0x24>)
 8008de0:	6013      	str	r3, [r2, #0]
	/* Fill the FPU registers with 1. */
	//vRegTestClearFlopRegistersToParameterValue( 1UL );

	/* Trigger a timer 3 interrupt, which will fill the registers with a
	different value. */
	NVIC_SetPendingIRQ( TIM3_IRQn );
 8008de2:	201d      	movs	r0, #29
 8008de4:	f7ff feb4 	bl	8008b50 <NVIC_SetPendingIRQ>
	/* Ensure that, after returning from the nesting interrupt, all the FPU
	registers contain the value to which they were set by this interrupt
	function. */
	//configASSERT( ulRegTestCheckFlopRegistersContainParameterValue( 1UL ) );

	ulFPUInterruptNesting--;
 8008de8:	4b03      	ldr	r3, [pc, #12]	; (8008df8 <TIM2_IRQHandler+0x24>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	3b01      	subs	r3, #1
 8008dee:	4a02      	ldr	r2, [pc, #8]	; (8008df8 <TIM2_IRQHandler+0x24>)
 8008df0:	6013      	str	r3, [r2, #0]
}
 8008df2:	bf00      	nop
 8008df4:	bd80      	pop	{r7, pc}
 8008df6:	bf00      	nop
 8008df8:	200149f0 	.word	0x200149f0

08008dfc <prvOptionallyCreateComprehensveTestApplication>:
/*-----------------------------------------------------------*/

static void prvOptionallyCreateComprehensveTestApplication( void )
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b084      	sub	sp, #16
 8008e00:	af02      	add	r7, sp, #8
	#if ( mainCREATE_SIMPLE_LED_FLASHER_DEMO_ONLY == 0 )
	{
	TimerHandle_t xCheckTimer = NULL;
 8008e02:	2300      	movs	r3, #0
 8008e04:	607b      	str	r3, [r7, #4]

		/* Configure the interrupts used to test FPU registers being used from
		nested interrupts. */
		prvSetupNestedFPUInterruptsTest();
 8008e06:	f7ff ffa5 	bl	8008d54 <prvSetupNestedFPUInterruptsTest>

		/* Start all the other standard demo/test tasks. */
		vStartIntegerMathTasks( tskIDLE_PRIORITY );
 8008e0a:	2000      	movs	r0, #0
 8008e0c:	f7f9 ff16 	bl	8002c3c <vStartIntegerMathTasks>
		vStartDynamicPriorityTasks();
 8008e10:	f7f9 f922 	bl	8002058 <vStartDynamicPriorityTasks>
		vStartBlockingQueueTasks( mainBLOCK_Q_PRIORITY );
 8008e14:	2002      	movs	r0, #2
 8008e16:	f7f7 fe2d 	bl	8000a74 <vStartBlockingQueueTasks>
		vCreateBlockTimeTasks();
 8008e1a:	f7f8 fc57 	bl	80016cc <vCreateBlockTimeTasks>
		vStartCountingSemaphoreTasks();
 8008e1e:	f7f8 fef5 	bl	8001c0c <vStartCountingSemaphoreTasks>
		vStartGenericQueueTasks( tskIDLE_PRIORITY );
 8008e22:	2000      	movs	r0, #0
 8008e24:	f7f7 ffba 	bl	8000d9c <vStartGenericQueueTasks>
		vStartRecursiveMutexTasks();
 8008e28:	f7fa f94e 	bl	80030c8 <vStartRecursiveMutexTasks>
		vStartPolledQueueTasks( mainQUEUE_POLL_PRIORITY );
 8008e2c:	2002      	movs	r0, #2
 8008e2e:	f7f8 fb49 	bl	80014c4 <vStartPolledQueueTasks>
		vStartSemaphoreTasks( mainSEM_TEST_PRIORITY );
 8008e32:	2001      	movs	r0, #1
 8008e34:	f7fa faf4 	bl	8003420 <vStartSemaphoreTasks>

		/* Most importantly, start the tasks that use the FPU. */
		vStartMathTasks( mainFLOP_TASK_PRIORITY );
 8008e38:	2000      	movs	r0, #0
 8008e3a:	f7f9 fbc3 	bl	80025c4 <vStartMathTasks>
		//xTaskCreate( vRegTest1Task, "Reg1", configMINIMAL_STACK_SIZE, ( void * ) NULL, tskIDLE_PRIORITY, NULL );
		//xTaskCreate( vRegTest2Task, "Reg2", configMINIMAL_STACK_SIZE, ( void * ) NULL, tskIDLE_PRIORITY, NULL );

		/* Create the semaphore that is used to demonstrate a task being
		synchronised with an interrupt. */
		vSemaphoreCreateBinary( xTestSemaphore );
 8008e3e:	2203      	movs	r2, #3
 8008e40:	2100      	movs	r1, #0
 8008e42:	2001      	movs	r0, #1
 8008e44:	f7fb f964 	bl	8004110 <xQueueGenericCreate>
 8008e48:	4602      	mov	r2, r0
 8008e4a:	4b1a      	ldr	r3, [pc, #104]	; (8008eb4 <prvOptionallyCreateComprehensveTestApplication+0xb8>)
 8008e4c:	601a      	str	r2, [r3, #0]
 8008e4e:	4b19      	ldr	r3, [pc, #100]	; (8008eb4 <prvOptionallyCreateComprehensveTestApplication+0xb8>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d006      	beq.n	8008e64 <prvOptionallyCreateComprehensveTestApplication+0x68>
 8008e56:	4b17      	ldr	r3, [pc, #92]	; (8008eb4 <prvOptionallyCreateComprehensveTestApplication+0xb8>)
 8008e58:	6818      	ldr	r0, [r3, #0]
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	2100      	movs	r1, #0
 8008e60:	f7fb fad0 	bl	8004404 <xQueueGenericSend>

		/* Create the task that is unblocked by the demonstration interrupt. */
		xTaskCreate( prvButtonTestTask, "BtnTest", configMINIMAL_STACK_SIZE, ( void * ) NULL, tskIDLE_PRIORITY, NULL );
 8008e64:	2300      	movs	r3, #0
 8008e66:	9301      	str	r3, [sp, #4]
 8008e68:	2300      	movs	r3, #0
 8008e6a:	9300      	str	r3, [sp, #0]
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	2282      	movs	r2, #130	; 0x82
 8008e70:	4911      	ldr	r1, [pc, #68]	; (8008eb8 <prvOptionallyCreateComprehensveTestApplication+0xbc>)
 8008e72:	4812      	ldr	r0, [pc, #72]	; (8008ebc <prvOptionallyCreateComprehensveTestApplication+0xc0>)
 8008e74:	f7fc f9cc 	bl	8005210 <xTaskCreate>

		/* Create the software timer that performs the 'check' functionality,
		as described at the top of this file. */
		xCheckTimer = xTimerCreate( "CheckTimer",					/* A text name, purely to help debugging. */
 8008e78:	4b11      	ldr	r3, [pc, #68]	; (8008ec0 <prvOptionallyCreateComprehensveTestApplication+0xc4>)
 8008e7a:	9300      	str	r3, [sp, #0]
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	2201      	movs	r2, #1
 8008e80:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8008e84:	480f      	ldr	r0, [pc, #60]	; (8008ec4 <prvOptionallyCreateComprehensveTestApplication+0xc8>)
 8008e86:	f7fd fd07 	bl	8006898 <xTimerCreate>
 8008e8a:	6078      	str	r0, [r7, #4]
									pdTRUE,							/* This is an auto-reload timer, so xAutoReload is set to pdTRUE. */
									( void * ) 0,					/* The ID is not used, so can be set to anything. */
									prvCheckTimerCallback			/* The callback function that inspects the status of all the other tasks. */
								  );

		if( xCheckTimer != NULL )
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d009      	beq.n	8008ea6 <prvOptionallyCreateComprehensveTestApplication+0xaa>
		{
			xTimerStart( xCheckTimer, mainDONT_BLOCK );
 8008e92:	f7fc ff69 	bl	8005d68 <xTaskGetTickCount>
 8008e96:	4602      	mov	r2, r0
 8008e98:	2300      	movs	r3, #0
 8008e9a:	9300      	str	r3, [sp, #0]
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	2101      	movs	r1, #1
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f7fd fd5b 	bl	800695c <xTimerGenericCommand>
		}

		/* This task has to be created last as it keeps account of the number of
		tasks it expects to see running. */
		vCreateSuicidalTasks( mainCREATOR_TASK_PRIORITY );
 8008ea6:	2003      	movs	r0, #3
 8008ea8:	f7f8 ffe6 	bl	8001e78 <vCreateSuicidalTasks>
		( void ) vRegTest2Task;
		( void ) prvCheckTimerCallback;
		( void ) prvSetupNestedFPUInterruptsTest;
	}
	#endif /* mainCREATE_SIMPLE_LED_FLASHER_DEMO_ONLY */
}
 8008eac:	bf00      	nop
 8008eae:	3708      	adds	r7, #8
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}
 8008eb4:	200149f8 	.word	0x200149f8
 8008eb8:	08009d90 	.word	0x08009d90
 8008ebc:	08008cb5 	.word	0x08008cb5
 8008ec0:	08008ba5 	.word	0x08008ba5
 8008ec4:	08009d98 	.word	0x08009d98

08008ec8 <EXTI0_IRQHandler>:
/*-----------------------------------------------------------*/

void EXTI0_IRQHandler(void)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b082      	sub	sp, #8
 8008ecc:	af00      	add	r7, sp, #0
long lHigherPriorityTaskWoken = pdFALSE;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	607b      	str	r3, [r7, #4]

	/* Only line 6 is enabled, so there is no need to test which line generated
	the interrupt. */
	EXTI_ClearITPendingBit( EXTI_Line0 );
 8008ed2:	2001      	movs	r0, #1
 8008ed4:	f7fe f94c 	bl	8007170 <EXTI_ClearITPendingBit>

	/* This interrupt does nothing more than demonstrate how to synchronise a
	task with an interrupt.  First the handler releases a semaphore.
	lHigherPriorityTaskWoken has been initialised to zero. */
	xSemaphoreGiveFromISR( xTestSemaphore, &lHigherPriorityTaskWoken );
 8008ed8:	4b0a      	ldr	r3, [pc, #40]	; (8008f04 <EXTI0_IRQHandler+0x3c>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	1d3a      	adds	r2, r7, #4
 8008ede:	4611      	mov	r1, r2
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f7fb fd17 	bl	8004914 <xQueueGiveFromISR>
	semaphore caused the task to unblock, and the unblocked task has a priority
	higher than the currently executing task (the task that this interrupt
	interrupted), then lHigherPriorityTaskWoken will have been set to pdTRUE.
	Passing pdTRUE into the following macro call will cause this interrupt to
	return directly to the unblocked, higher priority, task. */
	portEND_SWITCHING_ISR( lHigherPriorityTaskWoken );
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d007      	beq.n	8008efc <EXTI0_IRQHandler+0x34>
 8008eec:	4b06      	ldr	r3, [pc, #24]	; (8008f08 <EXTI0_IRQHandler+0x40>)
 8008eee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ef2:	601a      	str	r2, [r3, #0]
 8008ef4:	f3bf 8f4f 	dsb	sy
 8008ef8:	f3bf 8f6f 	isb	sy
}
 8008efc:	bf00      	nop
 8008efe:	3708      	adds	r7, #8
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}
 8008f04:	200149f8 	.word	0x200149f8
 8008f08:	e000ed04 	.word	0xe000ed04

08008f0c <vApplicationMallocFailedHook>:
/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b083      	sub	sp, #12
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f16:	f383 8811 	msr	BASEPRI, r3
 8008f1a:	f3bf 8f6f 	isb	sy
 8008f1e:	f3bf 8f4f 	dsb	sy
 8008f22:	607b      	str	r3, [r7, #4]
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
	for( ;; );
 8008f24:	e7fe      	b.n	8008f24 <vApplicationMallocFailedHook+0x18>

08008f26 <vApplicationIdleHook>:
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
 8008f26:	b480      	push	{r7}
 8008f28:	af00      	add	r7, sp, #0
	specified, or call vTaskDelay()).  If the application makes use of the
	vTaskDelete() API function (as this demo application does) then it is also
	important that vApplicationIdleHook() is permitted to return to its calling
	function, because it is the responsibility of the idle task to clean up
	memory allocated by the kernel to any task that has since been deleted. */
}
 8008f2a:	bf00      	nop
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f32:	4770      	bx	lr

08008f34 <vApplicationStackOverflowHook>:
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
 8008f34:	b480      	push	{r7}
 8008f36:	b085      	sub	sp, #20
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	6039      	str	r1, [r7, #0]
 8008f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f42:	f383 8811 	msr	BASEPRI, r3
 8008f46:	f3bf 8f6f 	isb	sy
 8008f4a:	f3bf 8f4f 	dsb	sy
 8008f4e:	60fb      	str	r3, [r7, #12]

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
	for( ;; );
 8008f50:	e7fe      	b.n	8008f50 <vApplicationStackOverflowHook+0x1c>
	...

08008f54 <STM_EVAL_LEDInit>:
  *     @arg LED5
  *     @arg LED6
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b084      	sub	sp, #16
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 8008f5e:	79fb      	ldrb	r3, [r7, #7]
 8008f60:	4a10      	ldr	r2, [pc, #64]	; (8008fa4 <STM_EVAL_LEDInit+0x50>)
 8008f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f66:	2101      	movs	r1, #1
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f7fe f99f 	bl	80072ac <RCC_AHB1PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 8008f6e:	79fb      	ldrb	r3, [r7, #7]
 8008f70:	4a0d      	ldr	r2, [pc, #52]	; (8008fa8 <STM_EVAL_LEDInit+0x54>)
 8008f72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f76:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8008f78:	2301      	movs	r3, #1
 8008f7a:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8008f80:	2301      	movs	r3, #1
 8008f82:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8008f84:	2302      	movs	r3, #2
 8008f86:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 8008f88:	79fb      	ldrb	r3, [r7, #7]
 8008f8a:	4a08      	ldr	r2, [pc, #32]	; (8008fac <STM_EVAL_LEDInit+0x58>)
 8008f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f90:	f107 0208 	add.w	r2, r7, #8
 8008f94:	4611      	mov	r1, r2
 8008f96:	4618      	mov	r0, r3
 8008f98:	f7fe f8fa 	bl	8007190 <GPIO_Init>
}
 8008f9c:	bf00      	nop
 8008f9e:	3710      	adds	r7, #16
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}
 8008fa4:	08009dbc 	.word	0x08009dbc
 8008fa8:	08009db4 	.word	0x08009db4
 8008fac:	20000010 	.word	0x20000010

08008fb0 <STM_EVAL_LEDToggle>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDToggle(Led_TypeDef Led)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b083      	sub	sp, #12
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->ODR ^= GPIO_PIN[Led];
 8008fba:	79fb      	ldrb	r3, [r7, #7]
 8008fbc:	4a09      	ldr	r2, [pc, #36]	; (8008fe4 <STM_EVAL_LEDToggle+0x34>)
 8008fbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fc2:	79fa      	ldrb	r2, [r7, #7]
 8008fc4:	4907      	ldr	r1, [pc, #28]	; (8008fe4 <STM_EVAL_LEDToggle+0x34>)
 8008fc6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008fca:	6952      	ldr	r2, [r2, #20]
 8008fcc:	79f9      	ldrb	r1, [r7, #7]
 8008fce:	4806      	ldr	r0, [pc, #24]	; (8008fe8 <STM_EVAL_LEDToggle+0x38>)
 8008fd0:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
 8008fd4:	404a      	eors	r2, r1
 8008fd6:	615a      	str	r2, [r3, #20]
}
 8008fd8:	bf00      	nop
 8008fda:	370c      	adds	r7, #12
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe2:	4770      	bx	lr
 8008fe4:	20000010 	.word	0x20000010
 8008fe8:	08009db4 	.word	0x08009db4

08008fec <STM_EVAL_PBInit>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void STM_EVAL_PBInit(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b088      	sub	sp, #32
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	460a      	mov	r2, r1
 8008ff6:	71fb      	strb	r3, [r7, #7]
 8008ff8:	4613      	mov	r3, r2
 8008ffa:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStructure;
  EXTI_InitTypeDef EXTI_InitStructure;
  NVIC_InitTypeDef NVIC_InitStructure;

  /* Enable the BUTTON Clock */
  RCC_AHB1PeriphClockCmd(BUTTON_CLK[Button], ENABLE);
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	2101      	movs	r1, #1
 8009000:	4618      	mov	r0, r3
 8009002:	f7fe f953 	bl	80072ac <RCC_AHB1PeriphClockCmd>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8009006:	2101      	movs	r1, #1
 8009008:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800900c:	f7fe f96e 	bl	80072ec <RCC_APB2PeriphClockCmd>

  /* Configure Button pin as input */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8009010:	2300      	movs	r3, #0
 8009012:	773b      	strb	r3, [r7, #28]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8009014:	2300      	movs	r3, #0
 8009016:	77fb      	strb	r3, [r7, #31]
  GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
 8009018:	2301      	movs	r3, #1
 800901a:	61bb      	str	r3, [r7, #24]
  GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
 800901c:	79fb      	ldrb	r3, [r7, #7]
 800901e:	4a18      	ldr	r2, [pc, #96]	; (8009080 <STM_EVAL_PBInit+0x94>)
 8009020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009024:	f107 0218 	add.w	r2, r7, #24
 8009028:	4611      	mov	r1, r2
 800902a:	4618      	mov	r0, r3
 800902c:	f7fe f8b0 	bl	8007190 <GPIO_Init>

  if (Button_Mode == BUTTON_MODE_EXTI)
 8009030:	79bb      	ldrb	r3, [r7, #6]
 8009032:	2b01      	cmp	r3, #1
 8009034:	d11f      	bne.n	8009076 <STM_EVAL_PBInit+0x8a>
  {
    /* Connect Button EXTI Line to Button GPIO Pin */
    SYSCFG_EXTILineConfig(BUTTON_PORT_SOURCE[Button], BUTTON_PIN_SOURCE[Button]);
 8009036:	2300      	movs	r3, #0
 8009038:	2200      	movs	r2, #0
 800903a:	4611      	mov	r1, r2
 800903c:	4618      	mov	r0, r3
 800903e:	f7fe f975 	bl	800732c <SYSCFG_EXTILineConfig>

    /* Configure Button EXTI line */
    EXTI_InitStructure.EXTI_Line = BUTTON_EXTI_LINE[Button];
 8009042:	2301      	movs	r3, #1
 8009044:	613b      	str	r3, [r7, #16]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8009046:	2300      	movs	r3, #0
 8009048:	753b      	strb	r3, [r7, #20]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
 800904a:	2308      	movs	r3, #8
 800904c:	757b      	strb	r3, [r7, #21]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 800904e:	2301      	movs	r3, #1
 8009050:	75bb      	strb	r3, [r7, #22]
    EXTI_Init(&EXTI_InitStructure);
 8009052:	f107 0310 	add.w	r3, r7, #16
 8009056:	4618      	mov	r0, r3
 8009058:	f7fe f818 	bl	800708c <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = BUTTON_IRQn[Button];
 800905c:	2306      	movs	r3, #6
 800905e:	733b      	strb	r3, [r7, #12]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
 8009060:	230f      	movs	r3, #15
 8009062:	737b      	strb	r3, [r7, #13]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
 8009064:	230f      	movs	r3, #15
 8009066:	73bb      	strb	r3, [r7, #14]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8009068:	2301      	movs	r3, #1
 800906a:	73fb      	strb	r3, [r7, #15]

    NVIC_Init(&NVIC_InitStructure); 
 800906c:	f107 030c 	add.w	r3, r7, #12
 8009070:	4618      	mov	r0, r3
 8009072:	f7fd ffa9 	bl	8006fc8 <NVIC_Init>
  }
}
 8009076:	bf00      	nop
 8009078:	3720      	adds	r7, #32
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}
 800907e:	bf00      	nop
 8009080:	20000020 	.word	0x20000020

08009084 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8009084:	b480      	push	{r7}
 8009086:	af00      	add	r7, sp, #0
}
 8009088:	bf00      	nop
 800908a:	46bd      	mov	sp, r7
 800908c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009090:	4770      	bx	lr

08009092 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8009092:	b480      	push	{r7}
 8009094:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8009096:	e7fe      	b.n	8009096 <HardFault_Handler+0x4>

08009098 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8009098:	b480      	push	{r7}
 800909a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800909c:	e7fe      	b.n	800909c <MemManage_Handler+0x4>

0800909e <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800909e:	b480      	push	{r7}
 80090a0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80090a2:	e7fe      	b.n	80090a2 <BusFault_Handler+0x4>

080090a4 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80090a4:	b480      	push	{r7}
 80090a6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80090a8:	e7fe      	b.n	80090a8 <UsageFault_Handler+0x4>
	...

080090ac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80090b0:	4a16      	ldr	r2, [pc, #88]	; (800910c <SystemInit+0x60>)
 80090b2:	4b16      	ldr	r3, [pc, #88]	; (800910c <SystemInit+0x60>)
 80090b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80090bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80090c0:	4a13      	ldr	r2, [pc, #76]	; (8009110 <SystemInit+0x64>)
 80090c2:	4b13      	ldr	r3, [pc, #76]	; (8009110 <SystemInit+0x64>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f043 0301 	orr.w	r3, r3, #1
 80090ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80090cc:	4b10      	ldr	r3, [pc, #64]	; (8009110 <SystemInit+0x64>)
 80090ce:	2200      	movs	r2, #0
 80090d0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80090d2:	4a0f      	ldr	r2, [pc, #60]	; (8009110 <SystemInit+0x64>)
 80090d4:	4b0e      	ldr	r3, [pc, #56]	; (8009110 <SystemInit+0x64>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80090dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80090e0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80090e2:	4b0b      	ldr	r3, [pc, #44]	; (8009110 <SystemInit+0x64>)
 80090e4:	4a0b      	ldr	r2, [pc, #44]	; (8009114 <SystemInit+0x68>)
 80090e6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80090e8:	4a09      	ldr	r2, [pc, #36]	; (8009110 <SystemInit+0x64>)
 80090ea:	4b09      	ldr	r3, [pc, #36]	; (8009110 <SystemInit+0x64>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80090f2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80090f4:	4b06      	ldr	r3, [pc, #24]	; (8009110 <SystemInit+0x64>)
 80090f6:	2200      	movs	r2, #0
 80090f8:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80090fa:	f000 f80d 	bl	8009118 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80090fe:	4b03      	ldr	r3, [pc, #12]	; (800910c <SystemInit+0x60>)
 8009100:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009104:	609a      	str	r2, [r3, #8]
#endif
}
 8009106:	bf00      	nop
 8009108:	bd80      	pop	{r7, pc}
 800910a:	bf00      	nop
 800910c:	e000ed00 	.word	0xe000ed00
 8009110:	40023800 	.word	0x40023800
 8009114:	24003010 	.word	0x24003010

08009118 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8009118:	b480      	push	{r7}
 800911a:	b083      	sub	sp, #12
 800911c:	af00      	add	r7, sp, #0
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)|| defined(STM32F469_479xx)
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800911e:	2300      	movs	r3, #0
 8009120:	607b      	str	r3, [r7, #4]
 8009122:	2300      	movs	r3, #0
 8009124:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8009126:	4a36      	ldr	r2, [pc, #216]	; (8009200 <SetSysClock+0xe8>)
 8009128:	4b35      	ldr	r3, [pc, #212]	; (8009200 <SetSysClock+0xe8>)
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009130:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8009132:	4b33      	ldr	r3, [pc, #204]	; (8009200 <SetSysClock+0xe8>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800913a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	3301      	adds	r3, #1
 8009140:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d103      	bne.n	8009150 <SetSysClock+0x38>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800914e:	d1f0      	bne.n	8009132 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8009150:	4b2b      	ldr	r3, [pc, #172]	; (8009200 <SetSysClock+0xe8>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009158:	2b00      	cmp	r3, #0
 800915a:	d002      	beq.n	8009162 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800915c:	2301      	movs	r3, #1
 800915e:	603b      	str	r3, [r7, #0]
 8009160:	e001      	b.n	8009166 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8009162:	2300      	movs	r3, #0
 8009164:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	2b01      	cmp	r3, #1
 800916a:	d142      	bne.n	80091f2 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800916c:	4a24      	ldr	r2, [pc, #144]	; (8009200 <SetSysClock+0xe8>)
 800916e:	4b24      	ldr	r3, [pc, #144]	; (8009200 <SetSysClock+0xe8>)
 8009170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009172:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009176:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8009178:	4a22      	ldr	r2, [pc, #136]	; (8009204 <SetSysClock+0xec>)
 800917a:	4b22      	ldr	r3, [pc, #136]	; (8009204 <SetSysClock+0xec>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009182:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8009184:	4a1e      	ldr	r2, [pc, #120]	; (8009200 <SetSysClock+0xe8>)
 8009186:	4b1e      	ldr	r3, [pc, #120]	; (8009200 <SetSysClock+0xe8>)
 8009188:	689b      	ldr	r3, [r3, #8]
 800918a:	6093      	str	r3, [r2, #8]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) ||  defined(STM32F412xG) || defined(STM32F446xx) || defined(STM32F469_479xx)    
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800918c:	4a1c      	ldr	r2, [pc, #112]	; (8009200 <SetSysClock+0xe8>)
 800918e:	4b1c      	ldr	r3, [pc, #112]	; (8009200 <SetSysClock+0xe8>)
 8009190:	689b      	ldr	r3, [r3, #8]
 8009192:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009196:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8009198:	4a19      	ldr	r2, [pc, #100]	; (8009200 <SetSysClock+0xe8>)
 800919a:	4b19      	ldr	r3, [pc, #100]	; (8009200 <SetSysClock+0xe8>)
 800919c:	689b      	ldr	r3, [r3, #8]
 800919e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80091a2:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx || STM32F413_423xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F469_479xx)    
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80091a4:	4b16      	ldr	r3, [pc, #88]	; (8009200 <SetSysClock+0xe8>)
 80091a6:	4a18      	ldr	r2, [pc, #96]	; (8009208 <SetSysClock+0xf0>)
 80091a8:	605a      	str	r2, [r3, #4]
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24) | (PLL_R << 28);
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */    
    
    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80091aa:	4a15      	ldr	r2, [pc, #84]	; (8009200 <SetSysClock+0xe8>)
 80091ac:	4b14      	ldr	r3, [pc, #80]	; (8009200 <SetSysClock+0xe8>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80091b4:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80091b6:	bf00      	nop
 80091b8:	4b11      	ldr	r3, [pc, #68]	; (8009200 <SetSysClock+0xe8>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d0f9      	beq.n	80091b8 <SetSysClock+0xa0>
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
#endif /* STM32F427_437x || STM32F429_439xx || STM32F446xx || STM32F469_479xx */

#if defined(STM32F40_41xxx)  || defined(STM32F412xG)  
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80091c4:	4b11      	ldr	r3, [pc, #68]	; (800920c <SetSysClock+0xf4>)
 80091c6:	f240 7205 	movw	r2, #1797	; 0x705
 80091ca:	601a      	str	r2, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80091cc:	4a0c      	ldr	r2, [pc, #48]	; (8009200 <SetSysClock+0xe8>)
 80091ce:	4b0c      	ldr	r3, [pc, #48]	; (8009200 <SetSysClock+0xe8>)
 80091d0:	689b      	ldr	r3, [r3, #8]
 80091d2:	f023 0303 	bic.w	r3, r3, #3
 80091d6:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80091d8:	4a09      	ldr	r2, [pc, #36]	; (8009200 <SetSysClock+0xe8>)
 80091da:	4b09      	ldr	r3, [pc, #36]	; (8009200 <SetSysClock+0xe8>)
 80091dc:	689b      	ldr	r3, [r3, #8]
 80091de:	f043 0302 	orr.w	r3, r3, #2
 80091e2:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80091e4:	bf00      	nop
 80091e6:	4b06      	ldr	r3, [pc, #24]	; (8009200 <SetSysClock+0xe8>)
 80091e8:	689b      	ldr	r3, [r3, #8]
 80091ea:	f003 030c 	and.w	r3, r3, #12
 80091ee:	2b08      	cmp	r3, #8
 80091f0:	d1f9      	bne.n	80091e6 <SetSysClock+0xce>
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
  {
  }
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F469_479xx */  
}
 80091f2:	bf00      	nop
 80091f4:	370c      	adds	r7, #12
 80091f6:	46bd      	mov	sp, r7
 80091f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fc:	4770      	bx	lr
 80091fe:	bf00      	nop
 8009200:	40023800 	.word	0x40023800
 8009204:	40007000 	.word	0x40007000
 8009208:	07405419 	.word	0x07405419
 800920c:	40023c00 	.word	0x40023c00

08009210 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009210:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009212:	e003      	b.n	800921c <LoopCopyDataInit>

08009214 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009214:	4b0b      	ldr	r3, [pc, #44]	; (8009244 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8009216:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009218:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800921a:	3104      	adds	r1, #4

0800921c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800921c:	480a      	ldr	r0, [pc, #40]	; (8009248 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 800921e:	4b0b      	ldr	r3, [pc, #44]	; (800924c <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8009220:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009222:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009224:	d3f6      	bcc.n	8009214 <CopyDataInit>
  ldr  r2, =_sbss
 8009226:	4a0a      	ldr	r2, [pc, #40]	; (8009250 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8009228:	e002      	b.n	8009230 <LoopFillZerobss>

0800922a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800922a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800922c:	f842 3b04 	str.w	r3, [r2], #4

08009230 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009230:	4b08      	ldr	r3, [pc, #32]	; (8009254 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8009232:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009234:	d3f9      	bcc.n	800922a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009236:	f7ff ff39 	bl	80090ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800923a:	f000 f80f 	bl	800925c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800923e:	f7ff fca1 	bl	8008b84 <main>
  bx  lr    
 8009242:	4770      	bx	lr
  ldr  r3, =_sidata
 8009244:	08009dd4 	.word	0x08009dd4
  ldr  r0, =_sdata
 8009248:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800924c:	20000028 	.word	0x20000028
  ldr  r2, =_sbss
 8009250:	20000028 	.word	0x20000028
  ldr  r3, = _ebss
 8009254:	20015e8c 	.word	0x20015e8c

08009258 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009258:	e7fe      	b.n	8009258 <ADC_IRQHandler>
	...

0800925c <__libc_init_array>:
 800925c:	b570      	push	{r4, r5, r6, lr}
 800925e:	4e0d      	ldr	r6, [pc, #52]	; (8009294 <__libc_init_array+0x38>)
 8009260:	4c0d      	ldr	r4, [pc, #52]	; (8009298 <__libc_init_array+0x3c>)
 8009262:	1ba4      	subs	r4, r4, r6
 8009264:	10a4      	asrs	r4, r4, #2
 8009266:	2500      	movs	r5, #0
 8009268:	42a5      	cmp	r5, r4
 800926a:	d109      	bne.n	8009280 <__libc_init_array+0x24>
 800926c:	4e0b      	ldr	r6, [pc, #44]	; (800929c <__libc_init_array+0x40>)
 800926e:	4c0c      	ldr	r4, [pc, #48]	; (80092a0 <__libc_init_array+0x44>)
 8009270:	f000 f82c 	bl	80092cc <_init>
 8009274:	1ba4      	subs	r4, r4, r6
 8009276:	10a4      	asrs	r4, r4, #2
 8009278:	2500      	movs	r5, #0
 800927a:	42a5      	cmp	r5, r4
 800927c:	d105      	bne.n	800928a <__libc_init_array+0x2e>
 800927e:	bd70      	pop	{r4, r5, r6, pc}
 8009280:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009284:	4798      	blx	r3
 8009286:	3501      	adds	r5, #1
 8009288:	e7ee      	b.n	8009268 <__libc_init_array+0xc>
 800928a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800928e:	4798      	blx	r3
 8009290:	3501      	adds	r5, #1
 8009292:	e7f2      	b.n	800927a <__libc_init_array+0x1e>
 8009294:	08009dcc 	.word	0x08009dcc
 8009298:	08009dcc 	.word	0x08009dcc
 800929c:	08009dcc 	.word	0x08009dcc
 80092a0:	08009dd0 	.word	0x08009dd0

080092a4 <memcpy>:
 80092a4:	b510      	push	{r4, lr}
 80092a6:	1e43      	subs	r3, r0, #1
 80092a8:	440a      	add	r2, r1
 80092aa:	4291      	cmp	r1, r2
 80092ac:	d100      	bne.n	80092b0 <memcpy+0xc>
 80092ae:	bd10      	pop	{r4, pc}
 80092b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80092b8:	e7f7      	b.n	80092aa <memcpy+0x6>

080092ba <memset>:
 80092ba:	4402      	add	r2, r0
 80092bc:	4603      	mov	r3, r0
 80092be:	4293      	cmp	r3, r2
 80092c0:	d100      	bne.n	80092c4 <memset+0xa>
 80092c2:	4770      	bx	lr
 80092c4:	f803 1b01 	strb.w	r1, [r3], #1
 80092c8:	e7f9      	b.n	80092be <memset+0x4>
	...

080092cc <_init>:
 80092cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ce:	bf00      	nop
 80092d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092d2:	bc08      	pop	{r3}
 80092d4:	469e      	mov	lr, r3
 80092d6:	4770      	bx	lr

080092d8 <_fini>:
 80092d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092da:	bf00      	nop
 80092dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092de:	bc08      	pop	{r3}
 80092e0:	469e      	mov	lr, r3
 80092e2:	4770      	bx	lr
